<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory allocation theory memory-allocation-strategies on gingerBill</title>
    <link>/categories/memory-allocation-theory-memory-allocation-strategies/</link>
    <description>Recent content in memory allocation theory memory-allocation-strategies on gingerBill</description>
    <language>en-gb</language>
    <lastBuildDate>Fri, 08 Feb 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/memory-allocation-theory-memory-allocation-strategies/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory Allocation Strategies - Part 2</title>
      <link>/article/2019/02/08/memory-allocation-strategies-002/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/02/08/memory-allocation-strategies-002/</guid>
      <description>Linear Allocation The first memory allocation strategy that I will cover is the also one of the simplest ones: linear allocation. As the name suggests, memory is allocated linearly. Throughout this series, I will be using to concept of an allocator as a means to allocate this memory. An linear allocator, is also known by other names such as an Arena or Region-based allocator. In this article, I will refer to this allocator an a Arena.</description>
    </item>
    
    <item>
      <title>Memory Allocation Strategies - Part 1</title>
      <link>/article/2019/02/01/memory-allocation-strategies-001/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/02/01/memory-allocation-strategies-001/</guid>
      <description>Memory allocation seems to be something many people struggle with. Many languages try to automatically handle memory for you using different strategies: garbage collection (GC), automatic reference counting (ARC), resource acquisition is initialization (RAII), and ownership semantics. However, trying to abstract away memory allocation comes at a higher cost than most people realize.
Most people are taught to think of memory in terms of the stack and the heap, where the stack is automatically grown for a procedure call, and the heap is some magical thing that you can use to get memory that needs to live longer than the stack.</description>
    </item>
    
  </channel>
</rss>
