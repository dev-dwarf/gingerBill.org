<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>philosophy on gingerBill</title>
    <link>/tags/philosophy/</link>
    <description>Recent content in philosophy on gingerBill</description>
    <language>en-gb</language>
    <lastBuildDate>Sun, 07 Mar 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/philosophy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Untyped Types</title>
      <link>/article/2021/03/07/untyped-types/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/03/07/untyped-types/</guid>
      <description>When I was designing the constant value system in Odin, I wanted literals (especially numbers) to &amp;ldquo;just work&amp;rdquo;. I was inspired by how both Ada1 and Go2 both handled their constant value systems. But this lead me to a realization that there are two general different models of thought when it comes to values in programming languages.
 Model-1: Expressions have a type, not all expressions may have a value. Therefore all values must have a type.</description>
    </item>
    
    <item>
      <title>Structured Control Flow (Brain Dump)</title>
      <link>/article/2021/02/02/structured-control-flow/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/02/02/structured-control-flow/</guid>
      <description>Note: This is a &amp;ldquo;brain dump&amp;rdquo; article, and subject to be cleaned up.
Categories of Structured Control Flow  Procedure call  foo(123, true)   Terminating  return   Conditional  if, if-else, switch   Looping  for - loop with initial statement, condition, post statement, and body for-in - loop with a value to be iterated over while - loop with condition then body do-while - loop with body then condition   Branching  break - go to end outside of the control statement continue - skip to the end of a loop fallthrough - merge two switch case bodies, to have multiple entry points to the merged body Labels on other control flow statements   Deferred  defer/scope(exit)    Pseudo/Partial Categories  Structured Exception Handling (not specifically Microsoft&amp;rsquo;s SEH  try, catch   Default (named) return values  foo :: proc(x: int) -&amp;gt; (val: int, err: Error) { .</description>
    </item>
    
    <item>
      <title>The Essence of Programming</title>
      <link>/article/2021/02/01/the-essence-of-programming/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/02/01/the-essence-of-programming/</guid>
      <description>One thing I have noticed a lot when a programmer is struggling to solve a problem, especially a novice, is that he is stuck worrying about the &amp;ldquo;best way&amp;rdquo; to implement the solution rather than actually understanding the problem he has. I believe a lot of this stems from not understanding the essence of what programming fundamentally is.
Essentially Ordered Aspects In a previous article of mine, I state that &amp;ldquo;Programming is a tool to solve problems that you have in the domain of computers&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Error States</title>
      <link>/show/2/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/show/2/</guid>
      <description>Notes:  Exceptions â€” And Why Odin Will Never Have Them Essential vs Accidental Properties Exception handling I used the term structured exception handling which is different to Microsoft&amp;rsquo;s SEH, I meant structured in the structured programming sense  Structured Exception Handling Microsoft&amp;rsquo;s SEH   Error handling and Go Odin is a multi-valued type system, compared to most languages which have singularly-valued type systems.  </description>
    </item>
    
    <item>
      <title>Schools of Thought</title>
      <link>/show/1/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/show/1/</guid>
      <description>Notes: Schools  Procedural/Pragmatist Mathematical/Functional Bodging Business/Managerial  Definitions  Bodge  (British Slang) A quick and dirty job, something done very hastily. Make it look good for the next day or two and if it falls down after that, it&amp;rsquo;s alright. https://www.urbandictionary.com/define.php?term=bodge    Books and References  A Conflict of Visions - Thomas Sowell Fallen human nature Rousseau&amp;rsquo;s theory of human nature  </description>
    </item>
    
    <item>
      <title>The Fatal Flaw of Ownership Semantics</title>
      <link>/article/2020/06/21/the-ownership-semantics-flaw/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/article/2020/06/21/the-ownership-semantics-flaw/</guid>
      <description>I have been toying with a theoretical idea for the past 18 months off-and-on in my head and I have not fully articulated it aloud yet. It is regarding the concept of Ownership Semantics (OS) or Move Semantics in programming languages. Fundamentally this article is a criticism of the concept and states that the concept is a duality of traditional OOP but applied to a different area.
General Definitions of Terminology A general list of definitions of terminology used within this article in order to minimize confusion.</description>
    </item>
    
    <item>
      <title>Flash Fads Model (Audio Article)</title>
      <link>/article/2020/06/13/flash-fads-model/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/article/2020/06/13/flash-fads-model/</guid>
      <description>Audio Article:
</description>
    </item>
    
  </channel>
</rss>
