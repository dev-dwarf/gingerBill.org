
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
var fileData0 = [];
fileData0.push.apply(fileData0, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 1, 0, 8, 6, 0, 0, 0, 92, 114, 168, 102, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 194, 0, 0, 14, 194, 1, 21, 40, 74, 128, 0, 0, 0, 24, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 112, 97, 105, 110, 116, 46, 110, 101, 116, 32, 52, 46, 48, 46, 53, 101, 133, 50, 101, 0, 0, 19, 226, 73, 68, 65, 84, 120, 94, 237, 157, 105, 147, 21, 85, 186, 133, 243, 39, 24, 14, 29, 42, 54, 183, 25, 196, 134, 226, 50, 93, 172, 166, 138, 161, 138, 154, 235, 212, 60, 83, 85, 32, 20, 138, 32, 114, 21, 84, 148, 80, 20, 16, 7, 28, 226, 6, 54, 127, 160, 191, 244, 31, 232, 63, 229, 39, 67, 67, 195, 121, 216, 247, 172, 141, 239, 233, 247, 100, 231, 169, 150, 147, 118, 236, 200, 88, 235, 137, 120, 99, 231, 206, 157, 171, 50, 63, 156, 181, 246, 206, 125, 14, 154, 61, 242, 200, 35, 225, 225, 135, 31, 14, 104, 31, 122, 232, 161, 88, 247, 221, 119, 95, 120, 224, 129, 7, 226, 49, 198, 172, 143, 22, 125, 59, 143, 118, 199, 142, 29, 97, 251, 246, 237, 177, 221, 186, 117, 107, 172, 141, 27, 55, 134, 205, 155, 55, 199, 99, 140, 89, 31, 45, 250, 118, 30, 109, 157, 172, 76, 93, 191, 126, 61, 168, 218, 47, 193, 77, 102, 70, 54, 115, 195, 232, 102, 122, 27, 179, 48, 176, 16, 64, 161, 143, 208, 48, 35, 155, 185, 97, 116, 51, 189, 141, 89, 24, 88, 8, 160, 208, 71, 104, 224, 25, 202, 84, 209, 135, 90, 245, 219, 75, 112, 147, 153, 177, 205, 236, 102, 126, 51, 184, 157, 183, 64, 176, 62, 198, 160, 51, 99, 155, 217, 205, 252, 102, 112, 59, 111, 129, 96, 125, 140, 65, 135, 103, 40, 83, 101, 63, 200, 236, 122, 193, 77, 102, 179, 58, 218, 71, 31, 125, 180, 97, 122, 244, 45, 28, 80, 56, 135, 113, 11, 9, 27, 183, 89, 29, 109, 71, 71, 71, 195, 244, 232, 91, 56, 160, 112, 14, 227, 22, 18, 54, 142, 103, 40, 83, 169, 13, 84, 117, 189, 224, 166, 233, 21, 0, 173, 149, 237, 9, 248, 243, 56, 103, 33, 96, 161, 97, 51, 186, 205, 250, 86, 182, 39, 224, 207, 227, 156, 133, 128, 133, 6, 158, 161, 76, 165, 54, 80, 213, 245, 130, 155, 198, 38, 32, 76, 141, 214, 27, 222, 102, 121, 187, 198, 198, 172, 197, 121, 191, 204, 71, 235, 13, 111, 179, 188, 93, 99, 99, 214, 226, 60, 158, 161, 76, 165, 54, 80, 213, 245, 130, 155, 184, 2, 176, 37, 190, 55, 190, 15, 6, 11, 2, 43, 140, 161, 69, 16, 216, 114, 222, 66, 192, 140, 239, 131, 193, 130, 192, 10, 99, 104, 17, 4, 120, 134, 50, 149, 218, 64, 85, 215, 11, 110, 226, 38, 32, 140, 110, 239, 255, 62, 12, 252, 204, 111, 33, 128, 62, 202, 250, 48, 50, 140, 110, 239, 255, 62, 12, 252, 204, 111, 33, 128, 62, 202, 250, 120, 134, 50, 149, 218, 64, 85, 215, 11, 110, 26, 123, 0, 126, 198, 247, 70, 47, 234, 227, 90, 11, 133, 188, 217, 113, 236, 141, 94, 212, 199, 181, 22, 10, 120, 134, 50, 149, 218, 64, 85, 215, 11, 110, 50, 123, 159, 55, 147, 195, 212, 126, 198, 247, 193, 224, 143, 109, 220, 222, 231, 205, 228, 48, 181, 159, 241, 125, 48, 248, 99, 173, 0, 238, 146, 90, 47, 184, 137, 155, 128, 48, 51, 90, 24, 58, 191, 220, 199, 177, 245, 189, 241, 49, 134, 130, 169, 97, 102, 180, 48, 116, 126, 185, 143, 99, 235, 123, 227, 99, 12, 133, 103, 40, 83, 169, 13, 84, 117, 189, 224, 38, 238, 1, 160, 96, 252, 252, 106, 192, 246, 5, 108, 220, 102, 127, 187, 14, 99, 102, 108, 24, 63, 191, 26, 176, 125, 1, 27, 183, 217, 223, 174, 195, 24, 158, 161, 76, 165, 54, 80, 213, 245, 130, 155, 198, 38, 160, 181, 126, 182, 207, 47, 249, 109, 181, 128, 115, 56, 70, 16, 152, 217, 173, 245, 179, 125, 126, 201, 111, 171, 5, 156, 195, 49, 130, 0, 207, 80, 166, 82, 27, 168, 234, 122, 193, 77, 99, 15, 192, 102, 122, 152, 219, 175, 4, 204, 248, 54, 142, 214, 7, 134, 159, 205, 45, 4, 252, 74, 192, 140, 111, 227, 104, 125, 96, 224, 25, 202, 84, 106, 3, 85, 93, 47, 184, 105, 188, 2, 152, 185, 177, 236, 135, 177, 109, 166, 183, 48, 192, 113, 126, 12, 231, 205, 232, 102, 110, 44, 251, 97, 108, 155, 233, 45, 12, 112, 156, 31, 195, 121, 60, 67, 153, 74, 109, 160, 170, 235, 5, 55, 241, 107, 64, 63, 227, 219, 76, 111, 199, 102, 116, 148, 29, 163, 181, 253, 1, 111, 114, 11, 1, 127, 108, 70, 71, 217, 49, 90, 219, 31, 192, 51, 148, 169, 212, 6, 170, 186, 94, 112, 147, 45, 13, 236, 11, 86, 147, 135, 254, 59, 116, 238, 220, 20, 91, 235, 251, 202, 159, 243, 90, 27, 187, 87, 61, 158, 161, 76, 153, 1, 84, 237, 149, 224, 38, 123, 126, 225, 72, 56, 57, 118, 32, 140, 118, 117, 68, 67, 194, 192, 104, 209, 199, 121, 140, 219, 53, 249, 190, 63, 54, 253, 194, 82, 118, 79, 122, 60, 67, 153, 42, 250, 80, 171, 126, 123, 9, 110, 126, 247, 21, 64, 255, 112, 22, 14, 30, 186, 27, 2, 254, 90, 187, 222, 142, 113, 13, 174, 197, 51, 148, 169, 178, 31, 100, 118, 189, 224, 38, 131, 225, 127, 207, 130, 177, 205, 220, 118, 92, 116, 29, 198, 209, 226, 25, 202, 84, 106, 3, 85, 93, 47, 184, 201, 108, 105, 94, 180, 60, 247, 231, 49, 107, 195, 176, 104, 253, 117, 190, 252, 121, 107, 241, 74, 128, 178, 48, 200, 235, 241, 12, 101, 42, 181, 129, 170, 174, 23, 220, 100, 55, 206, 78, 4, 212, 171, 79, 13, 198, 242, 125, 51, 233, 122, 251, 3, 247, 162, 71, 0, 228, 245, 120, 134, 50, 149, 218, 64, 85, 215, 11, 110, 50, 123, 39, 183, 247, 115, 180, 118, 156, 31, 179, 21, 192, 122, 215, 180, 26, 131, 249, 177, 18, 240, 125, 28, 227, 25, 202, 84, 106, 3, 85, 93, 47, 184, 249, 221, 247, 0, 124, 193, 228, 173, 246, 2, 16, 6, 218, 4, 84, 0, 136, 180, 52, 189, 2, 96, 70, 134, 57, 209, 250, 229, 188, 141, 219, 185, 124, 107, 199, 208, 153, 217, 97, 110, 152, 28, 203, 253, 245, 244, 120, 134, 50, 149, 218, 64, 85, 215, 11, 110, 226, 38, 32, 222, 197, 215, 123, 207, 183, 242, 125, 28, 91, 161, 191, 222, 123, 190, 215, 248, 99, 20, 158, 161, 76, 165, 54, 80, 213, 245, 130, 155, 248, 59, 0, 123, 47, 247, 43, 128, 252, 249, 124, 225, 188, 149, 245, 209, 34, 0, 208, 250, 165, 191, 105, 124, 153, 22, 207, 80, 166, 82, 27, 168, 234, 122, 193, 205, 127, 100, 15, 192, 140, 143, 99, 123, 21, 240, 231, 124, 225, 25, 202, 84, 106, 3, 85, 93, 47, 184, 105, 252, 14, 192, 47, 203, 253, 114, 221, 90, 204, 218, 48, 44, 90, 127, 173, 213, 191, 211, 67, 107, 223, 2, 248, 107, 241, 12, 101, 42, 181, 129, 170, 174, 23, 220, 100, 182, 33, 151, 223, 168, 67, 153, 81, 215, 219, 31, 40, 171, 199, 51, 148, 169, 212, 6, 170, 186, 94, 112, 211, 216, 3, 240, 239, 229, 214, 247, 231, 209, 218, 10, 192, 250, 249, 235, 243, 125, 127, 30, 109, 145, 30, 207, 80, 166, 82, 27, 168, 234, 122, 193, 205, 127, 244, 119, 0, 191, 165, 240, 12, 101, 42, 181, 129, 170, 174, 23, 220, 100, 187, 118, 238, 8, 99, 35, 125, 225, 169, 149, 185, 112, 106, 117, 62, 12, 15, 244, 132, 19, 203, 179, 225, 248, 177, 217, 48, 61, 54, 24, 254, 103, 239, 238, 80, 27, 28, 8, 167, 79, 44, 135, 231, 207, 157, 14, 243, 211, 99, 225, 185, 51, 39, 195, 177, 249, 169, 48, 49, 50, 24, 186, 14, 109, 10, 123, 247, 255, 49, 234, 209, 162, 76, 143, 99, 27, 135, 30, 173, 215, 163, 95, 246, 254, 102, 0, 85, 123, 37, 184, 201, 96, 176, 217, 169, 209, 240, 252, 179, 39, 99, 173, 29, 95, 136, 70, 60, 247, 244, 241, 176, 52, 59, 30, 13, 56, 61, 62, 26, 206, 63, 187, 22, 78, 63, 181, 28, 219, 147, 43, 11, 225, 244, 201, 229, 176, 56, 59, 17, 77, 188, 158, 30, 227, 235, 233, 203, 222, 191, 232, 67, 173, 250, 237, 37, 184, 137, 43, 128, 193, 190, 195, 97, 170, 62, 219, 206, 79, 215, 194, 236, 228, 104, 56, 54, 55, 17, 230, 166, 106, 97, 116, 168, 55, 206, 208, 131, 71, 123, 194, 242, 194, 76, 221, 116, 43, 245, 153, 119, 58, 76, 214, 134, 195, 177, 133, 233, 80, 27, 26, 136, 51, 188, 233, 99, 24, 228, 244, 56, 151, 215, 227, 28, 10, 250, 178, 247, 47, 251, 65, 102, 215, 11, 110, 98, 0, 160, 48, 211, 218, 241, 189, 244, 205, 204, 168, 225, 218, 246, 198, 177, 45, 253, 139, 250, 184, 110, 102, 113, 79, 60, 206, 255, 189, 123, 237, 167, 54, 80, 213, 245, 130, 155, 172, 54, 220, 95, 127, 223, 158, 249, 117, 214, 29, 137, 166, 234, 238, 220, 87, 159, 141, 71, 195, 137, 250, 249, 229, 249, 137, 250, 236, 60, 16, 106, 195, 71, 67, 127, 79, 119, 28, 175, 13, 29, 141, 203, 115, 140, 195, 216, 208, 195, 204, 189, 71, 247, 133, 61, 251, 254, 248, 47, 122, 140, 153, 30, 199, 22, 6, 24, 47, 186, 191, 153, 27, 109, 209, 177, 191, 127, 106, 3, 85, 93, 47, 184, 201, 240, 190, 141, 122, 118, 109, 37, 44, 213, 77, 8, 147, 245, 30, 58, 16, 207, 29, 95, 154, 14, 51, 19, 67, 97, 116, 176, 55, 44, 206, 212, 194, 216, 112, 95, 28, 159, 153, 24, 9, 103, 79, 175, 198, 130, 145, 77, 191, 88, 55, 37, 2, 96, 61, 61, 174, 159, 30, 31, 106, 232, 139, 238, 239, 43, 111, 126, 148, 191, 127, 106, 3, 85, 93, 47, 184, 201, 176, 171, 190, 52, 55, 30, 77, 5, 131, 194, 96, 135, 14, 236, 175, 31, 31, 141, 239, 229, 67, 253, 71, 194, 66, 253, 221, 188, 86, 127, 31, 63, 114, 176, 51, 142, 247, 245, 116, 133, 185, 95, 207, 121, 125, 109, 168, 39, 236, 174, 7, 192, 122, 122, 4, 64, 239, 145, 93, 133, 122, 187, 127, 43, 243, 91, 235, 239, 159, 218, 64, 85, 215, 11, 110, 226, 30, 128, 55, 153, 149, 157, 179, 243, 69, 227, 104, 253, 146, 62, 223, 226, 61, 63, 191, 47, 96, 99, 214, 183, 191, 213, 234, 239, 231, 219, 252, 120, 106, 3, 85, 93, 47, 184, 201, 38, 71, 135, 235, 239, 233, 211, 97, 237, 196, 177, 48, 85, 27, 137, 187, 236, 139, 179, 147, 97, 108, 104, 32, 154, 108, 97, 102, 44, 156, 62, 177, 24, 254, 247, 220, 90, 88, 94, 152, 10, 231, 207, 60, 21, 206, 156, 90, 142, 203, 120, 140, 155, 222, 76, 237, 245, 232, 247, 246, 237, 11, 171, 75, 35, 133, 122, 140, 183, 186, 191, 153, 220, 140, 222, 234, 254, 169, 13, 84, 117, 189, 224, 38, 91, 89, 156, 141, 63, 176, 57, 127, 118, 45, 60, 115, 106, 53, 172, 46, 226, 235, 182, 229, 186, 241, 39, 163, 193, 86, 23, 167, 195, 74, 189, 240, 253, 252, 133, 179, 167, 194, 51, 39, 143, 197, 22, 75, 119, 140, 175, 167, 135, 193, 151, 230, 70, 90, 234, 177, 2, 104, 165, 247, 179, 60, 170, 213, 253, 83, 27, 168, 234, 122, 193, 77, 54, 50, 208, 23, 166, 39, 70, 235, 239, 235, 119, 103, 223, 153, 9, 124, 23, 95, 11, 253, 61, 135, 163, 241, 134, 250, 14, 215, 205, 86, 139, 27, 124, 216, 169, 127, 118, 109, 181, 62, 99, 79, 198, 243, 24, 47, 210, 219, 106, 0, 213, 223, 187, 183, 73, 143, 115, 166, 199, 113, 171, 251, 155, 241, 173, 90, 221, 63, 181, 129, 170, 174, 23, 220, 52, 246, 0, 188, 217, 238, 165, 111, 239, 244, 190, 29, 28, 221, 30, 58, 187, 155, 223, 245, 237, 248, 192, 193, 77, 225, 224, 225, 186, 118, 207, 198, 216, 207, 255, 189, 123, 237, 167, 54, 80, 213, 245, 130, 155, 236, 236, 169, 165, 240, 244, 137, 249, 48, 62, 124, 52, 26, 106, 24, 187, 246, 51, 181, 88, 171, 139, 83, 245, 153, 121, 168, 62, 131, 143, 134, 158, 131, 127, 137, 227, 211, 181, 254, 112, 124, 105, 234, 238, 87, 124, 99, 3, 193, 244, 102, 240, 190, 222, 199, 195, 220, 244, 96, 152, 26, 63, 216, 208, 219, 24, 10, 250, 213, 197, 201, 250, 223, 239, 105, 210, 183, 123, 255, 212, 6, 170, 186, 94, 112, 147, 157, 127, 102, 53, 92, 60, 191, 22, 13, 135, 153, 117, 124, 180, 63, 254, 192, 102, 124, 164, 47, 254, 48, 7, 70, 67, 225, 235, 60, 140, 47, 207, 143, 135, 231, 207, 172, 134, 211, 199, 231, 194, 202, 194, 100, 240, 122, 24, 124, 116, 184, 171, 165, 30, 227, 208, 159, 127, 102, 165, 80, 223, 206, 253, 83, 27, 168, 234, 122, 193, 77, 182, 80, 159, 93, 81, 19, 117, 195, 97, 134, 237, 239, 57, 24, 38, 107, 3, 97, 126, 106, 52, 28, 61, 210, 21, 143, 103, 38, 134, 195, 145, 238, 187, 191, 1, 152, 28, 237, 171, 27, 114, 50, 12, 30, 61, 20, 223, 197, 189, 30, 6, 135, 126, 162, 126, 77, 145, 30, 227, 208, 47, 207, 15, 23, 234, 219, 185, 127, 106, 3, 85, 93, 47, 184, 105, 185, 7, 144, 175, 162, 113, 28, 195, 212, 40, 255, 158, 159, 63, 135, 182, 213, 184, 253, 189, 162, 191, 239, 171, 104, 28, 199, 169, 13, 84, 117, 189, 224, 166, 241, 127, 6, 178, 194, 127, 170, 107, 189, 202, 95, 159, 175, 34, 141, 175, 34, 141, 175, 34, 141, 175, 34, 141, 175, 34, 141, 175, 252, 245, 102, 32, 214, 18, 220, 100, 255, 247, 242, 82, 52, 194, 147, 219, 255, 171, 169, 118, 108, 122, 36, 86, 190, 111, 231, 160, 193, 127, 211, 175, 149, 62, 95, 173, 244, 40, 211, 231, 175, 241, 231, 172, 111, 5, 13, 238, 93, 86, 95, 100, 10, 166, 18, 220, 196, 255, 51, 16, 102, 70, 111, 22, 212, 225, 142, 45, 97, 170, 107, 79, 163, 255, 96, 103, 103, 216, 118, 242, 100, 108, 209, 183, 25, 213, 235, 243, 127, 3, 181, 249, 177, 135, 98, 219, 249, 224, 131, 225, 228, 182, 109, 177, 69, 223, 107, 81, 56, 151, 191, 7, 10, 207, 128, 103, 177, 62, 10, 247, 49, 61, 76, 108, 250, 252, 61, 80, 123, 134, 166, 194, 150, 39, 15, 55, 250, 40, 175, 47, 107, 132, 170, 235, 5, 55, 25, 102, 80, 51, 208, 246, 45, 221, 225, 221, 139, 127, 143, 237, 114, 79, 103, 184, 118, 122, 49, 12, 207, 30, 12, 23, 174, 28, 15, 27, 70, 70, 194, 200, 237, 219, 177, 197, 181, 102, 32, 211, 175, 103, 126, 212, 200, 134, 13, 225, 54, 254, 70, 189, 69, 31, 26, 251, 27, 118, 127, 127, 15, 220, 19, 247, 198, 51, 224, 89, 252, 179, 153, 30, 247, 246, 122, 127, 143, 115, 199, 175, 132, 161, 131, 179, 97, 241, 229, 107, 161, 115, 122, 57, 236, 239, 222, 18, 110, 255, 253, 98, 108, 189, 62, 181, 1, 83, 235, 5, 55, 141, 21, 0, 76, 209, 189, 103, 42, 60, 61, 119, 51, 182, 147, 245, 153, 247, 226, 236, 112, 216, 219, 245, 68, 232, 29, 219, 31, 77, 217, 125, 227, 70, 83, 0, 228, 13, 104, 53, 186, 231, 177, 176, 214, 183, 181, 81, 232, 195, 148, 55, 186, 187, 155, 2, 0, 122, 11, 16, 156, 243, 247, 192, 61, 113, 111, 60, 3, 158, 197, 63, 155, 233, 125, 0, 225, 156, 191, 71, 207, 254, 177, 176, 251, 137, 174, 48, 124, 230, 98, 216, 51, 56, 25, 6, 167, 246, 132, 151, 111, 206, 197, 214, 235, 83, 27, 48, 181, 94, 112, 19, 255, 199, 32, 120, 31, 198, 108, 93, 20, 0, 189, 181, 253, 225, 248, 115, 147, 209, 148, 123, 47, 95, 142, 45, 174, 133, 6, 90, 175, 183, 186, 58, 183, 59, 252, 227, 230, 68, 248, 219, 229, 129, 240, 215, 115, 135, 99, 8, 192, 148, 151, 247, 238, 141, 109, 43, 189, 191, 7, 238, 137, 123, 23, 5, 64, 43, 189, 191, 199, 234, 228, 115, 225, 200, 254, 90, 97, 0, 120, 125, 106, 3, 166, 214, 11, 110, 26, 223, 2, 192, 20, 88, 94, 195, 96, 104, 119, 254, 105, 67, 124, 255, 222, 214, 177, 49, 206, 198, 120, 47, 135, 49, 209, 154, 129, 124, 225, 156, 85, 209, 10, 0, 239, 229, 48, 38, 218, 86, 122, 127, 15, 220, 19, 247, 198, 51, 224, 89, 252, 179, 181, 210, 251, 123, 96, 5, 176, 101, 99, 71, 220, 3, 216, 240, 196, 206, 184, 244, 135, 249, 209, 122, 125, 106, 3, 166, 214, 11, 110, 226, 30, 128, 45, 229, 173, 181, 242, 99, 249, 113, 27, 243, 215, 248, 113, 43, 152, 204, 142, 109, 28, 231, 188, 214, 235, 242, 199, 190, 239, 199, 109, 44, 127, 141, 63, 46, 42, 27, 55, 93, 106, 3, 166, 214, 11, 110, 154, 126, 7, 96, 203, 105, 107, 81, 102, 20, 91, 110, 251, 49, 24, 201, 142, 81, 254, 26, 187, 46, 127, 206, 206, 91, 249, 191, 225, 175, 177, 251, 250, 49, 223, 22, 149, 215, 175, 87, 94, 147, 218, 128, 169, 245, 130, 155, 166, 175, 1, 215, 43, 108, 156, 89, 161, 111, 70, 50, 83, 21, 93, 227, 43, 63, 102, 58, 251, 27, 69, 215, 248, 202, 143, 65, 131, 103, 183, 175, 1, 139, 174, 241, 149, 31, 51, 125, 106, 3, 166, 214, 11, 110, 226, 15, 129, 204, 64, 121, 163, 248, 218, 188, 123, 75, 232, 89, 25, 136, 45, 250, 121, 3, 226, 28, 222, 245, 177, 1, 136, 214, 107, 81, 187, 55, 239, 10, 43, 61, 11, 177, 69, 31, 26, 251, 27, 166, 207, 223, 195, 215, 99, 79, 142, 134, 221, 199, 174, 198, 22, 125, 104, 112, 111, 175, 207, 223, 195, 87, 254, 217, 76, 159, 218, 128, 169, 245, 130, 155, 150, 63, 4, 66, 97, 179, 172, 251, 214, 173, 216, 238, 234, 219, 27, 94, 184, 243, 90, 108, 205, 64, 88, 162, 123, 3, 98, 195, 15, 187, 255, 104, 111, 117, 119, 199, 29, 121, 212, 212, 230, 205, 161, 111, 87, 79, 184, 243, 194, 135, 177, 53, 61, 180, 246, 122, 129, 115, 254, 30, 248, 65, 16, 238, 61, 214, 177, 20, 94, 232, 191, 30, 182, 246, 175, 133, 137, 171, 255, 136, 109, 43, 189, 191, 7, 126, 16, 132, 103, 248, 203, 82, 71, 88, 184, 222, 223, 244, 108, 94, 159, 218, 128, 169, 245, 130, 155, 166, 31, 2, 249, 130, 233, 241, 149, 220, 166, 233, 233, 104, 70, 152, 114, 230, 210, 226, 191, 4, 128, 215, 195, 92, 248, 234, 15, 45, 12, 56, 189, 105, 83, 172, 157, 247, 223, 31, 77, 121, 105, 230, 66, 83, 0, 96, 249, 159, 15, 0, 187, 7, 238, 139, 251, 239, 219, 216, 21, 250, 254, 60, 30, 141, 63, 240, 226, 223, 154, 2, 32, 127, 127, 127, 15, 220, 23, 225, 243, 120, 215, 198, 176, 111, 252, 207, 77, 207, 230, 245, 169, 13, 152, 90, 47, 184, 105, 250, 29, 64, 83, 77, 77, 69, 227, 195, 136, 232, 195, 148, 88, 158, 163, 69, 223, 191, 255, 155, 30, 230, 178, 239, 253, 49, 235, 194, 120, 48, 224, 99, 29, 127, 136, 166, 196, 242, 28, 109, 43, 189, 191, 135, 5, 64, 223, 182, 137, 112, 226, 192, 133, 104, 252, 195, 103, 255, 26, 219, 86, 122, 127, 15, 11, 128, 189, 19, 219, 194, 240, 133, 3, 77, 207, 230, 245, 169, 13, 152, 90, 47, 184, 105, 250, 29, 64, 190, 238, 223, 185, 243, 159, 253, 250, 123, 121, 52, 127, 189, 69, 223, 116, 94, 143, 247, 107, 24, 12, 45, 2, 192, 102, 95, 20, 222, 203, 97, 76, 180, 173, 244, 254, 30, 241, 222, 245, 16, 122, 252, 15, 29, 113, 5, 128, 119, 127, 152, 31, 109, 43, 189, 191, 7, 86, 29, 120, 245, 64, 248, 224, 254, 254, 217, 188, 62, 181, 1, 83, 235, 5, 55, 77, 191, 3, 176, 119, 106, 59, 46, 42, 27, 55, 157, 85, 126, 188, 85, 217, 184, 215, 250, 115, 254, 218, 124, 249, 113, 175, 181, 243, 126, 188, 168, 252, 184, 233, 82, 27, 48, 181, 94, 112, 147, 125, 247, 221, 119, 217, 91, 111, 189, 21, 110, 222, 188, 25, 126, 248, 225, 135, 12, 231, 62, 254, 248, 99, 251, 80, 197, 254, 235, 175, 191, 30, 46, 215, 151, 227, 214, 127, 237, 181, 215, 194, 155, 111, 190, 217, 232, 171, 66, 102, 70, 172, 90, 9, 110, 178, 159, 126, 250, 41, 126, 120, 111, 220, 184, 17, 251, 40, 235, 127, 254, 249, 231, 177, 15, 179, 127, 240, 193, 7, 225, 231, 159, 127, 142, 253, 23, 95, 124, 49, 188, 255, 254, 251, 141, 235, 85, 10, 0, 81, 77, 226, 135, 247, 237, 183, 223, 14, 215, 174, 93, 107, 244, 97, 110, 204, 242, 8, 7, 244, 17, 0, 88, 5, 216, 10, 225, 210, 165, 75, 225, 141, 55, 222, 104, 92, 175, 138, 213, 22, 101, 141, 40, 35, 139, 50, 196, 15, 239, 173, 91, 183, 2, 94, 3, 126, 249, 229, 151, 236, 199, 31, 127, 140, 1, 128, 80, 176, 241, 15, 63, 252, 48, 206, 248, 182, 2, 120, 239, 189, 247, 194, 187, 239, 190, 219, 24, 87, 197, 106, 11, 5, 128, 72, 73, 246, 245, 215, 95, 199, 119, 122, 44, 235, 209, 71, 97, 63, 0, 161, 128, 99, 152, 30, 43, 128, 143, 62, 250, 40, 96, 191, 0, 33, 241, 201, 39, 159, 132, 119, 222, 121, 167, 17, 8, 170, 88, 109, 161, 0, 16, 41, 137, 31, 94, 124, 128, 96, 114, 132, 193, 247, 223, 127, 31, 251, 126, 5, 128, 49, 204, 248, 8, 0, 187, 222, 7, 134, 42, 86, 91, 148, 53, 112, 89, 189, 224, 38, 126, 120, 241, 1, 130, 193, 191, 249, 230, 155, 216, 199, 18, 255, 246, 237, 219, 141, 113, 188, 239, 163, 240, 122, 128, 62, 94, 7, 240, 77, 193, 103, 159, 125, 22, 251, 170, 88, 109, 161, 0, 16, 41, 201, 176, 211, 127, 245, 234, 213, 0, 211, 251, 25, 30, 175, 1, 232, 219, 138, 0, 223, 2, 96, 12, 253, 43, 87, 174, 196, 61, 3, 244, 85, 141, 106, 139, 178, 6, 46, 171, 23, 220, 196, 15, 47, 118, 248, 253, 174, 62, 190, 17, 192, 59, 190, 245, 17, 14, 175, 190, 250, 106, 163, 143, 21, 0, 246, 8, 190, 252, 242, 203, 216, 87, 197, 106, 11, 5, 128, 72, 73, 220, 212, 195, 7, 8, 59, 253, 232, 163, 96, 248, 59, 119, 238, 52, 250, 216, 36, 68, 72, 96, 211, 239, 171, 175, 190, 138, 63, 20, 194, 42, 192, 86, 12, 170, 88, 109, 161, 0, 16, 41, 137, 95, 251, 97, 185, 111, 75, 122, 204, 234, 48, 59, 54, 254, 208, 71, 225, 3, 134, 111, 1, 112, 140, 16, 192, 143, 132, 236, 91, 1, 187, 70, 213, 30, 10, 0, 145, 146, 248, 225, 197, 6, 32, 102, 117, 219, 4, 196, 242, 222, 255, 50, 16, 75, 126, 223, 199, 126, 0, 94, 19, 108, 83, 80, 21, 171, 45, 20, 0, 34, 37, 113, 70, 199, 114, 222, 94, 1, 176, 201, 7, 131, 195, 244, 232, 163, 240, 149, 32, 254, 45, 192, 183, 223, 126, 27, 199, 113, 45, 66, 195, 126, 25, 168, 138, 213, 22, 10, 0, 145, 146, 248, 225, 181, 95, 2, 90, 223, 125, 168, 226, 43, 2, 142, 177, 47, 128, 62, 2, 227, 165, 151, 94, 138, 63, 21, 198, 254, 1, 206, 169, 98, 181, 69, 89, 3, 151, 213, 11, 110, 226, 140, 142, 119, 126, 204, 242, 102, 104, 204, 238, 254, 135, 64, 88, 13, 188, 242, 202, 43, 177, 255, 197, 23, 95, 196, 223, 5, 224, 149, 64, 191, 4, 108, 170, 182, 80, 0, 136, 148, 196, 15, 175, 253, 244, 23, 179, 61, 126, 13, 136, 87, 2, 188, 227, 99, 147, 15, 255, 32, 200, 126, 9, 136, 107, 63, 253, 244, 211, 12, 97, 128, 80, 176, 127, 44, 164, 138, 213, 22, 10, 0, 145, 146, 198, 114, 95, 197, 89, 130, 27, 5, 0, 121, 9, 110, 252, 134, 95, 91, 72, 95, 109, 189, 224, 70, 1, 64, 174, 23, 220, 40, 0, 200, 245, 130, 27, 5, 0, 185, 94, 112, 163, 0, 32, 215, 11, 110, 20, 0, 228, 122, 193, 141, 2, 128, 92, 47, 184, 81, 0, 144, 235, 5, 55, 10, 0, 114, 189, 224, 70, 1, 64, 174, 23, 220, 40, 0, 200, 245, 130, 27, 5, 0, 185, 94, 112, 163, 0, 32, 215, 11, 110, 20, 0, 228, 122, 193, 77, 35, 0, 84, 156, 37, 184, 81, 0, 144, 151, 224, 70, 175, 0, 228, 122, 193, 141, 2, 128, 92, 47, 184, 81, 0, 144, 235, 5, 55, 10, 0, 114, 189, 224, 70, 1, 64, 174, 23, 220, 40, 0, 200, 245, 130, 27, 5, 0, 185, 94, 112, 163, 0, 32, 215, 11, 110, 20, 0, 228, 122, 193, 141, 2, 128, 92, 47, 184, 81, 0, 144, 235, 5, 55, 10, 0, 114, 189, 224, 70, 1, 64, 174, 23, 220, 40, 0, 200, 245, 130, 155, 70, 0, 168, 56, 75, 112, 163, 0, 32, 47, 193, 141, 94, 1, 200, 245, 130, 27, 5, 0, 185, 94, 112, 163, 0, 32, 215, 11, 110, 20, 0, 228, 122, 193, 141, 2, 128, 92, 47, 184, 81, 0, 144, 235, 5, 55, 10, 0, 114, 189, 224, 70, 1, 64, 174, 23, 220, 40, 0, 200, 245, 130, 27, 5, 0, 185, 94, 112, 163, 0, 32, 215, 11, 110, 20, 0, 228, 122, 193, 141, 2, 128, 92, 47, 184, 81, 0, 144, 235, 5, 55, 217, 175, 173, 16, 130, 16, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 16, 163, 0, 16, 130, 24, 5, 128, 16, 196, 40, 0, 132, 32, 70, 1, 32, 4, 49, 10, 0, 33, 136, 81, 0, 8, 65, 140, 2, 64, 8, 98, 20, 0, 66, 208, 18, 194, 255, 3, 229, 100, 176, 46, 0, 122, 44, 123, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'floors.png', fileData0, true, true);
var fileData1 = [];
fileData1.push.apply(fileData1, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 156, 0, 0, 0, 32, 8, 6, 0, 0, 0, 231, 176, 17, 67, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 195, 0, 0, 14, 195, 1, 199, 111, 168, 100, 0, 0, 0, 24, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 112, 97, 105, 110, 116, 46, 110, 101, 116, 32, 52, 46, 48, 46, 53, 101, 133, 50, 101, 0, 0, 3, 221, 73, 68, 65, 84, 120, 94, 237, 148, 129, 82, 219, 64, 16, 67, 251, 255, 63, 77, 123, 33, 47, 8, 161, 189, 91, 59, 14, 33, 212, 154, 209, 236, 234, 105, 237, 1, 211, 233, 159, 127, 122, 83, 141, 236, 108, 8, 222, 185, 175, 110, 209, 140, 123, 167, 140, 93, 115, 210, 138, 243, 14, 205, 76, 183, 115, 50, 211, 57, 59, 74, 108, 8, 254, 168, 251, 33, 56, 55, 154, 153, 143, 228, 174, 203, 205, 109, 9, 15, 236, 229, 213, 174, 238, 114, 50, 211, 121, 149, 221, 244, 204, 217, 174, 70, 179, 157, 172, 243, 187, 249, 214, 204, 124, 20, 119, 223, 184, 31, 144, 153, 43, 142, 157, 147, 153, 238, 123, 249, 42, 187, 233, 125, 122, 239, 134, 111, 157, 152, 204, 60, 154, 187, 189, 175, 50, 179, 203, 117, 103, 174, 56, 254, 196, 47, 201, 196, 145, 42, 62, 44, 118, 78, 86, 121, 143, 156, 251, 141, 238, 42, 238, 232, 53, 187, 233, 81, 213, 175, 56, 153, 201, 62, 228, 92, 179, 203, 123, 207, 46, 191, 65, 202, 233, 58, 153, 217, 229, 85, 222, 204, 29, 144, 153, 43, 142, 157, 147, 153, 238, 46, 39, 51, 157, 87, 217, 77, 239, 211, 123, 183, 115, 50, 115, 47, 199, 206, 201, 62, 43, 123, 191, 37, 179, 51, 19, 99, 86, 204, 187, 21, 187, 80, 5, 100, 230, 209, 28, 119, 57, 153, 233, 124, 107, 102, 206, 118, 181, 115, 50, 115, 47, 199, 202, 183, 238, 247, 102, 118, 38, 251, 80, 218, 185, 217, 147, 111, 174, 14, 93, 126, 131, 18, 27, 170, 248, 16, 156, 27, 183, 74, 153, 223, 48, 93, 122, 131, 252, 57, 207, 73, 171, 251, 196, 217, 81, 234, 221, 136, 93, 167, 222, 232, 142, 244, 134, 46, 49, 148, 186, 78, 102, 58, 159, 101, 215, 181, 251, 56, 58, 125, 250, 27, 28, 161, 254, 139, 220, 229, 45, 207, 163, 212, 225, 85, 223, 245, 234, 61, 171, 254, 244, 221, 142, 240, 238, 15, 223, 125, 254, 168, 187, 89, 175, 157, 238, 201, 171, 254, 167, 251, 5, 126, 254, 247, 31, 18, 81, 176, 35, 184, 178, 161, 196, 217, 157, 15, 193, 180, 75, 12, 41, 211, 155, 189, 246, 247, 116, 242, 80, 218, 157, 97, 85, 98, 67, 157, 123, 237, 224, 202, 144, 119, 157, 204, 124, 36, 119, 93, 110, 110, 75, 241, 64, 226, 176, 138, 35, 231, 158, 85, 169, 215, 172, 115, 72, 111, 180, 79, 214, 174, 218, 43, 70, 78, 115, 168, 186, 59, 130, 15, 37, 14, 115, 171, 148, 249, 77, 135, 251, 92, 177, 42, 127, 97, 126, 64, 102, 174, 56, 118, 78, 78, 74, 119, 171, 140, 156, 87, 89, 173, 157, 74, 111, 180, 79, 185, 154, 152, 204, 60, 154, 171, 85, 169, 235, 100, 102, 197, 125, 226, 123, 243, 133, 104, 57, 196, 126, 59, 146, 204, 220, 203, 221, 169, 119, 165, 187, 45, 185, 179, 87, 172, 202, 204, 45, 92, 229, 55, 42, 125, 110, 101, 191, 219, 146, 217, 153, 137, 49, 43, 70, 86, 41, 215, 187, 171, 63, 30, 96, 87, 134, 174, 199, 95, 186, 138, 15, 173, 56, 157, 102, 55, 61, 211, 249, 140, 33, 103, 179, 236, 76, 119, 205, 76, 231, 236, 40, 245, 51, 115, 199, 116, 187, 170, 27, 207, 72, 57, 93, 197, 152, 190, 167, 236, 60, 233, 122, 243, 245, 161, 103, 218, 149, 110, 94, 209, 221, 223, 165, 123, 247, 83, 236, 74, 55, 230, 207, 15, 89, 89, 50, 180, 226, 186, 107, 78, 210, 27, 148, 24, 154, 221, 207, 248, 233, 39, 90, 255, 24, 168, 202, 176, 148, 153, 123, 57, 118, 238, 217, 57, 179, 203, 87, 238, 222, 173, 204, 123, 152, 167, 175, 246, 15, 195, 196, 158, 221, 85, 15, 103, 174, 56, 174, 184, 90, 111, 116, 215, 204, 116, 190, 242, 150, 59, 87, 186, 113, 246, 223, 155, 143, 226, 19, 123, 86, 62, 212, 225, 174, 196, 87, 183, 106, 231, 170, 138, 15, 105, 231, 78, 154, 241, 149, 185, 99, 158, 190, 218, 63, 12, 19, 123, 174, 152, 187, 186, 89, 113, 166, 243, 189, 121, 197, 221, 91, 238, 92, 233, 238, 180, 249, 250, 173, 110, 64, 247, 78, 174, 184, 103, 231, 204, 46, 223, 154, 153, 137, 187, 210, 221, 233, 135, 249, 243, 31, 65, 75, 85, 98, 104, 118, 239, 214, 78, 229, 55, 72, 57, 93, 98, 168, 195, 79, 63, 213, 17, 158, 62, 253, 40, 71, 120, 184, 211, 255, 50, 42, 231, 58, 83, 87, 153, 158, 57, 179, 222, 232, 158, 140, 170, 172, 86, 117, 184, 118, 85, 254, 69, 142, 240, 112, 251, 199, 155, 101, 118, 166, 243, 153, 185, 97, 86, 78, 125, 98, 51, 62, 156, 186, 196, 212, 222, 123, 86, 207, 186, 23, 117, 132, 75, 87, 31, 162, 203, 87, 121, 143, 253, 29, 158, 87, 124, 216, 59, 207, 201, 126, 227, 217, 157, 250, 46, 251, 5, 142, 240, 112, 207, 62, 222, 172, 235, 186, 122, 135, 115, 207, 201, 122, 163, 123, 101, 191, 241, 236, 214, 30, 105, 175, 70, 169, 123, 81, 71, 120, 184, 171, 143, 86, 241, 45, 94, 189, 195, 123, 207, 106, 239, 60, 39, 251, 141, 103, 119, 234, 187, 236, 23, 56, 194, 151, 113, 247, 143, 226, 119, 158, 43, 54, 227, 195, 169, 75, 76, 237, 189, 103, 245, 172, 123, 81, 191, 47, 213, 47, 246, 44, 222, 117, 247, 249, 116, 167, 76, 247, 100, 84, 101, 181, 170, 195, 181, 171, 242, 47, 114, 132, 23, 87, 191, 112, 197, 79, 159, 158, 251, 207, 219, 95, 173, 254, 35, 145, 133, 91, 159, 114, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'font.png', fileData1, true, true);
var fileData2 = [];
fileData2.push.apply(fileData2, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 64, 0, 0, 0, 64, 8, 6, 0, 0, 0, 170, 105, 113, 222, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 194, 0, 0, 14, 194, 1, 21, 40, 74, 128, 0, 0, 0, 24, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 112, 97, 105, 110, 116, 46, 110, 101, 116, 32, 52, 46, 48, 46, 53, 101, 133, 50, 101, 0, 0, 3, 82, 73, 68, 65, 84, 120, 94, 229, 154, 9, 142, 219, 48, 12, 69, 211, 27, 244, 8, 1, 122, 132, 94, 160, 71, 203, 205, 83, 211, 22, 227, 31, 230, 105, 241, 18, 91, 147, 252, 226, 65, 226, 23, 41, 75, 156, 44, 131, 98, 46, 131, 238, 95, 14, 154, 155, 200, 137, 114, 59, 0, 205, 77, 92, 175, 215, 23, 239, 227, 26, 240, 47, 252, 160, 111, 183, 219, 253, 26, 60, 205, 143, 113, 71, 160, 89, 37, 202, 26, 48, 105, 94, 139, 249, 26, 119, 4, 154, 69, 76, 118, 225, 26, 38, 173, 209, 61, 58, 2, 205, 44, 57, 197, 151, 191, 202, 235, 226, 94, 157, 128, 102, 150, 53, 242, 186, 184, 87, 39, 160, 89, 196, 68, 47, 249, 136, 201, 242, 111, 86, 243, 107, 168, 145, 61, 58, 2, 205, 42, 81, 126, 97, 149, 231, 218, 197, 29, 221, 99, 45, 186, 95, 132, 242, 43, 160, 89, 133, 190, 6, 85, 182, 78, 117, 123, 80, 18, 229, 87, 64, 179, 107, 210, 77, 167, 209, 117, 25, 222, 99, 54, 132, 220, 6, 208, 236, 154, 146, 40, 191, 2, 154, 93, 227, 239, 119, 213, 225, 159, 1, 71, 65, 23, 45, 137, 242, 105, 95, 1, 205, 183, 99, 7, 139, 228, 242, 70, 165, 247, 248, 35, 206, 104, 206, 159, 198, 220, 190, 2, 154, 111, 39, 94, 36, 119, 208, 218, 133, 107, 234, 191, 1, 191, 167, 97, 109, 3, 110, 149, 254, 244, 223, 128, 164, 181, 13, 168, 169, 219, 6, 24, 126, 185, 210, 33, 31, 13, 72, 99, 173, 33, 115, 254, 252, 153, 65, 251, 10, 104, 30, 134, 137, 124, 39, 94, 184, 185, 1, 73, 221, 55, 96, 252, 71, 126, 1, 187, 20, 93, 180, 225, 178, 4, 154, 135, 97, 34, 191, 68, 73, 148, 95, 1, 205, 195, 88, 115, 232, 39, 253, 77, 99, 18, 229, 87, 64, 243, 48, 214, 28, 186, 36, 202, 175, 128, 230, 102, 252, 61, 169, 80, 222, 154, 67, 211, 222, 14, 229, 87, 64, 115, 19, 118, 16, 146, 30, 80, 115, 180, 246, 4, 208, 220, 68, 173, 1, 113, 61, 214, 31, 12, 154, 155, 240, 11, 166, 225, 73, 212, 28, 218, 227, 64, 208, 220, 196, 120, 201, 244, 155, 88, 139, 104, 143, 3, 65, 115, 19, 175, 47, 241, 52, 25, 100, 107, 84, 179, 5, 219, 51, 66, 121, 25, 208, 220, 132, 29, 128, 180, 240, 96, 205, 196, 231, 125, 111, 3, 254, 76, 195, 233, 13, 48, 252, 16, 38, 141, 223, 193, 163, 1, 73, 135, 55, 192, 30, 72, 216, 154, 41, 230, 191, 3, 123, 158, 201, 159, 187, 0, 52, 23, 225, 15, 127, 210, 240, 45, 96, 107, 227, 84, 114, 9, 111, 88, 9, 170, 139, 180, 60, 11, 64, 115, 17, 118, 192, 241, 225, 242, 183, 1, 42, 170, 113, 198, 90, 163, 162, 92, 19, 74, 162, 124, 0, 205, 69, 120, 3, 162, 40, 55, 98, 181, 90, 239, 83, 177, 30, 57, 84, 175, 10, 225, 75, 110, 6, 52, 23, 145, 107, 128, 139, 106, 156, 90, 173, 171, 212, 0, 31, 93, 234, 55, 128, 230, 34, 252, 39, 20, 177, 53, 87, 172, 81, 44, 87, 53, 184, 105, 54, 201, 247, 34, 76, 105, 128, 145, 107, 2, 104, 238, 134, 138, 214, 13, 151, 76, 71, 105, 76, 117, 70, 73, 148, 15, 160, 185, 27, 123, 137, 246, 54, 124, 109, 26, 199, 225, 201, 111, 0, 205, 83, 89, 112, 248, 49, 55, 39, 202, 7, 208, 60, 5, 21, 173, 19, 37, 81, 62, 128, 230, 41, 152, 232, 3, 212, 68, 113, 196, 69, 107, 5, 208, 60, 5, 149, 253, 185, 237, 168, 244, 255, 10, 49, 142, 181, 250, 77, 82, 250, 214, 0, 208, 60, 21, 147, 143, 46, 138, 149, 143, 108, 192, 18, 62, 174, 1, 36, 187, 88, 9, 151, 205, 105, 223, 12, 104, 118, 129, 94, 202, 166, 26, 151, 244, 145, 13, 200, 105, 200, 124, 201, 251, 168, 6, 172, 133, 246, 203, 128, 230, 55, 129, 230, 55, 129, 230, 55, 129, 230, 55, 129, 230, 174, 168, 104, 189, 133, 88, 171, 138, 94, 46, 206, 128, 230, 72, 67, 113, 19, 186, 143, 207, 227, 24, 231, 145, 184, 166, 177, 206, 91, 226, 0, 154, 187, 162, 162, 53, 154, 71, 226, 154, 198, 113, 110, 202, 197, 192, 28, 168, 60, 206, 249, 174, 214, 216, 70, 157, 199, 49, 206, 35, 113, 77, 99, 157, 183, 196, 129, 57, 240, 196, 189, 70, 71, 99, 159, 199, 49, 206, 35, 113, 77, 99, 157, 183, 196, 129, 57, 80, 121, 156, 27, 93, 165, 58, 71, 165, 158, 174, 197, 121, 68, 69, 177, 122, 185, 56, 195, 171, 217, 80, 52, 226, 121, 62, 254, 80, 230, 192, 165, 30, 225, 170, 121, 253, 115, 185, 255, 7, 1, 231, 126, 77, 10, 148, 63, 30, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'level001.png', fileData2, true, true);
var fileData3 = [];
fileData3.push.apply(fileData3, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 1, 0, 8, 6, 0, 0, 0, 92, 114, 168, 102, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 194, 0, 0, 14, 194, 1, 21, 40, 74, 128, 0, 0, 0, 24, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 112, 97, 105, 110, 116, 46, 110, 101, 116, 32, 52, 46, 48, 46, 53, 101, 133, 50, 101, 0, 0, 90, 157, 73, 68, 65, 84, 120, 94, 237, 189, 7, 120, 28, 213, 245, 255, 125, 103, 251, 174, 170, 101, 185, 247, 174, 94, 173, 222, 221, 193, 149, 98, 3, 198, 152, 152, 0, 161, 215, 152, 14, 54, 224, 94, 177, 141, 43, 198, 148, 56, 64, 18, 66, 72, 8, 129, 144, 66, 199, 198, 189, 74, 178, 250, 54, 117, 105, 119, 71, 197, 29, 189, 223, 51, 91, 180, 43, 141, 11, 73, 126, 255, 228, 101, 239, 121, 158, 207, 115, 103, 206, 220, 59, 115, 103, 116, 206, 185, 231, 222, 25, 73, 172, 254, 245, 169, 28, 63, 167, 163, 163, 131, 227, 167, 200, 26, 4, 199, 191, 144, 51, 12, 142, 127, 32, 107, 16, 28, 255, 66, 206, 48, 56, 254, 129, 172, 65, 252, 39, 104, 122, 80, 167, 105, 126, 166, 127, 146, 248, 104, 196, 44, 148, 83, 192, 32, 160, 148, 171, 219, 21, 170, 7, 70, 212, 172, 234, 51, 187, 244, 110, 22, 83, 223, 71, 169, 146, 171, 199, 249, 207, 32, 103, 24, 28, 255, 64, 214, 32, 254, 93, 224, 188, 106, 48, 85, 220, 222, 103, 159, 184, 86, 87, 89, 254, 120, 175, 210, 147, 247, 15, 219, 33, 110, 233, 51, 64, 174, 126, 87, 208, 118, 52, 248, 8, 24, 197, 141, 17, 71, 202, 83, 217, 84, 108, 95, 117, 16, 16, 159, 141, 80, 160, 126, 79, 160, 144, 59, 126, 53, 208, 245, 196, 23, 244, 67, 81, 230, 131, 112, 241, 237, 62, 87, 117, 46, 212, 165, 123, 31, 222, 188, 176, 255, 237, 40, 231, 131, 209, 226, 178, 30, 90, 185, 186, 255, 43, 200, 25, 6, 199, 63, 144, 53, 8, 241, 217, 72, 165, 248, 235, 94, 3, 15, 61, 195, 210, 171, 118, 49, 157, 92, 29, 57, 236, 171, 35, 5, 113, 122, 108, 79, 113, 71, 255, 231, 96, 248, 223, 139, 175, 68, 183, 163, 180, 131, 86, 96, 20, 159, 24, 61, 93, 174, 157, 55, 39, 31, 23, 200, 121, 31, 42, 185, 183, 103, 11, 202, 179, 226, 162, 160, 243, 40, 191, 179, 190, 52, 108, 164, 92, 253, 174, 136, 91, 147, 2, 235, 238, 27, 120, 43, 218, 44, 3, 247, 131, 193, 224, 170, 50, 15, 55, 168, 47, 52, 77, 30, 144, 128, 242, 19, 211, 189, 131, 142, 137, 155, 251, 61, 220, 116, 231, 128, 16, 185, 186, 222, 136, 175, 134, 146, 243, 143, 3, 7, 129, 8, 26, 193, 239, 193, 45, 226, 47, 243, 231, 127, 52, 59, 44, 202, 56, 183, 223, 21, 3, 89, 209, 3, 81, 148, 1, 81, 191, 147, 193, 85, 7, 15, 241, 217, 40, 65, 28, 103, 8, 17, 215, 13, 155, 93, 153, 23, 116, 39, 218, 206, 19, 119, 24, 50, 81, 6, 200, 213, 119, 35, 103, 24, 28, 255, 160, 155, 49, 212, 220, 107, 16, 74, 214, 133, 199, 193, 104, 62, 7, 101, 101, 55, 247, 92, 137, 50, 176, 107, 61, 57, 170, 239, 101, 90, 235, 194, 132, 197, 98, 126, 96, 27, 218, 144, 227, 94, 4, 54, 241, 94, 21, 5, 130, 134, 198, 123, 195, 110, 146, 107, 231, 13, 234, 105, 141, 239, 104, 54, 82, 123, 241, 149, 36, 106, 255, 131, 248, 102, 180, 17, 229, 56, 185, 250, 222, 160, 142, 70, 124, 101, 192, 93, 40, 75, 197, 133, 74, 27, 74, 10, 34, 135, 43, 158, 15, 153, 214, 176, 172, 135, 70, 174, 141, 28, 104, 163, 59, 117, 111, 255, 197, 40, 237, 7, 159, 100, 109, 85, 147, 134, 188, 143, 237, 222, 114, 117, 189, 65, 157, 62, 224, 3, 112, 222, 180, 166, 207, 69, 113, 5, 163, 231, 96, 6, 85, 160, 14, 188, 3, 46, 27, 200, 196, 167, 123, 43, 196, 141, 154, 24, 199, 162, 248, 93, 39, 238, 28, 189, 15, 245, 31, 53, 174, 99, 151, 117, 96, 55, 168, 75, 1, 104, 126, 233, 35, 204, 132, 242, 52, 112, 128, 147, 165, 207, 4, 76, 23, 223, 140, 185, 100, 224, 145, 51, 12, 142, 127, 208, 205, 24, 196, 103, 71, 106, 97, 52, 59, 49, 90, 147, 243, 17, 228, 188, 247, 152, 110, 10, 184, 98, 10, 140, 122, 189, 192, 187, 224, 66, 211, 211, 145, 63, 160, 252, 225, 248, 189, 61, 40, 3, 32, 67, 36, 39, 152, 33, 215, 206, 27, 212, 81, 129, 205, 128, 218, 119, 20, 62, 25, 220, 33, 62, 153, 69, 1, 96, 152, 92, 125, 111, 80, 103, 200, 241, 249, 134, 173, 40, 107, 1, 245, 251, 162, 184, 107, 208, 197, 134, 37, 125, 78, 98, 59, 94, 174, 141, 28, 168, 75, 125, 200, 6, 7, 0, 57, 113, 197, 161, 229, 134, 201, 114, 117, 189, 65, 61, 26, 185, 39, 128, 163, 128, 174, 127, 246, 147, 233, 129, 231, 197, 135, 70, 158, 19, 215, 102, 57, 196, 103, 6, 239, 134, 110, 168, 92, 91, 55, 226, 180, 94, 65, 168, 243, 24, 168, 255, 102, 102, 208, 249, 163, 247, 178, 6, 113, 103, 191, 251, 176, 127, 197, 0, 38, 62, 219, 135, 178, 167, 73, 255, 156, 195, 154, 197, 7, 6, 73, 207, 31, 156, 1, 107, 75, 127, 62, 208, 32, 215, 134, 144, 51, 12, 142, 127, 208, 205, 24, 96, 44, 6, 176, 3, 156, 47, 189, 35, 154, 2, 0, 141, 228, 59, 236, 247, 142, 10, 234, 90, 183, 43, 168, 71, 14, 112, 55, 104, 171, 120, 182, 71, 7, 202, 139, 226, 252, 17, 148, 254, 211, 72, 252, 5, 136, 148, 107, 231, 77, 229, 19, 225, 52, 138, 238, 17, 159, 204, 232, 104, 126, 96, 32, 157, 131, 140, 248, 45, 160, 150, 171, 239, 13, 234, 132, 137, 139, 66, 151, 160, 172, 6, 237, 21, 15, 8, 23, 29, 191, 55, 208, 61, 148, 139, 191, 140, 44, 144, 107, 35, 135, 184, 52, 64, 64, 27, 122, 14, 203, 1, 5, 0, 26, 189, 175, 152, 189, 16, 226, 11, 161, 97, 141, 119, 14, 127, 83, 220, 49, 128, 28, 239, 66, 249, 211, 61, 47, 160, 164, 103, 240, 43, 64, 153, 213, 101, 167, 0, 56, 174, 109, 94, 62, 234, 225, 19, 75, 7, 181, 236, 91, 192, 126, 168, 88, 197, 168, 253, 39, 96, 176, 92, 253, 174, 152, 118, 168, 198, 162, 46, 5, 64, 122, 118, 29, 226, 150, 190, 244, 236, 127, 81, 187, 76, 39, 200, 213, 39, 228, 12, 131, 227, 31, 116, 51, 6, 24, 139, 193, 180, 61, 249, 94, 148, 238, 180, 181, 20, 204, 172, 184, 189, 215, 213, 46, 130, 165, 128, 19, 128, 12, 247, 130, 248, 92, 204, 153, 3, 115, 194, 105, 46, 76, 163, 218, 21, 157, 184, 46, 67, 160, 183, 7, 183, 136, 11, 7, 88, 237, 119, 6, 82, 240, 57, 43, 174, 30, 243, 41, 202, 94, 114, 245, 189, 65, 29, 26, 1, 35, 196, 21, 3, 62, 169, 217, 48, 72, 114, 64, 64, 169, 240, 142, 189, 179, 89, 152, 92, 155, 75, 113, 244, 214, 48, 61, 218, 109, 173, 123, 150, 181, 239, 201, 102, 52, 162, 39, 202, 213, 235, 10, 234, 133, 128, 55, 192, 57, 112, 22, 80, 63, 40, 136, 188, 222, 240, 140, 46, 92, 174, 141, 55, 168, 71, 193, 39, 178, 46, 39, 224, 75, 148, 148, 69, 208, 84, 102, 225, 231, 215, 176, 171, 90, 4, 69, 221, 222, 224, 67, 64, 247, 126, 177, 126, 225, 192, 163, 226, 122, 195, 101, 131, 135, 156, 97, 112, 252, 131, 110, 198, 32, 222, 221, 155, 12, 48, 172, 249, 81, 195, 68, 148, 215, 131, 28, 112, 213, 11, 129, 168, 171, 21, 111, 29, 241, 184, 184, 111, 83, 179, 248, 130, 52, 122, 145, 241, 239, 17, 55, 7, 167, 200, 213, 151, 131, 206, 1, 38, 137, 203, 71, 253, 21, 101, 139, 184, 126, 164, 73, 188, 187, 239, 44, 185, 186, 93, 65, 125, 10, 2, 35, 197, 231, 251, 173, 66, 249, 149, 248, 209, 152, 18, 148, 115, 193, 37, 71, 64, 57, 80, 159, 230, 211, 179, 63, 191, 182, 199, 94, 148, 119, 128, 171, 90, 67, 160, 235, 128, 71, 0, 77, 123, 206, 22, 62, 26, 226, 48, 94, 103, 56, 133, 237, 219, 196, 59, 135, 92, 213, 130, 94, 211, 35, 76, 253, 253, 34, 77, 114, 233, 207, 130, 95, 64, 187, 159, 131, 43, 102, 95, 110, 80, 87, 241, 197, 172, 254, 185, 181, 43, 135, 20, 209, 245, 129, 52, 245, 18, 239, 9, 187, 228, 66, 168, 156, 97, 112, 252, 3, 89, 131, 248, 119, 129, 193, 245, 5, 219, 64, 77, 197, 154, 97, 180, 8, 182, 177, 108, 85, 116, 95, 185, 186, 151, 226, 208, 157, 81, 161, 104, 71, 11, 113, 198, 198, 59, 162, 15, 163, 204, 151, 171, 119, 41, 80, 95, 33, 110, 31, 74, 211, 137, 105, 224, 170, 22, 209, 188, 17, 151, 49, 114, 228, 64, 241, 254, 33, 201, 226, 43, 161, 63, 234, 53, 30, 218, 13, 7, 95, 3, 202, 62, 154, 11, 127, 201, 22, 29, 191, 143, 5, 98, 251, 170, 131, 80, 195, 163, 129, 52, 157, 210, 136, 15, 37, 252, 168, 192, 69, 160, 29, 125, 115, 241, 186, 227, 165, 144, 38, 148, 245, 96, 81, 195, 98, 33, 88, 174, 46, 33, 103, 24, 28, 255, 64, 214, 32, 254, 93, 96, 112, 10, 241, 150, 1, 3, 81, 210, 123, 240, 123, 192, 8, 210, 201, 213, 189, 20, 210, 57, 94, 203, 25, 32, 62, 59, 242, 118, 113, 89, 224, 20, 113, 241, 160, 31, 237, 196, 255, 45, 234, 230, 135, 146, 243, 70, 88, 158, 98, 244, 42, 242, 1, 240, 163, 166, 31, 255, 46, 184, 30, 173, 95, 220, 44, 174, 206, 250, 27, 74, 154, 74, 204, 3, 151, 124, 147, 35, 103, 24, 28, 255, 64, 214, 32, 254, 19, 192, 224, 104, 4, 213, 28, 158, 207, 116, 180, 45, 87, 231, 74, 184, 206, 161, 20, 215, 142, 254, 81, 239, 241, 255, 87, 16, 215, 36, 41, 44, 75, 6, 168, 197, 37, 227, 255, 165, 251, 255, 87, 113, 61, 55, 122, 155, 64, 223, 17, 208, 154, 76, 15, 203, 253, 236, 146, 1, 88, 206, 48, 56, 254, 129, 172, 65, 112, 252, 11, 57, 195, 224, 248, 7, 178, 6, 241, 239, 208, 244, 240, 0, 159, 5, 195, 85, 76, 212, 173, 102, 162, 114, 19, 19, 175, 122, 20, 220, 204, 68, 133, 249, 241, 161, 66, 211, 83, 131, 198, 52, 63, 49, 228, 30, 219, 179, 3, 243, 237, 47, 94, 249, 11, 186, 255, 21, 172, 75, 6, 253, 63, 29, 241, 229, 104, 122, 186, 159, 170, 241, 169, 62, 242, 153, 211, 194, 48, 159, 254, 201, 25, 6, 199, 63, 96, 45, 181, 167, 89, 113, 137, 145, 85, 87, 87, 123, 232, 176, 181, 122, 182, 203, 78, 30, 97, 102, 71, 29, 171, 58, 116, 196, 163, 43, 254, 230, 43, 169, 172, 180, 214, 73, 229, 153, 51, 54, 169, 108, 172, 56, 37, 149, 229, 39, 204, 172, 193, 94, 203, 62, 96, 142, 128, 77, 204, 209, 195, 242, 104, 152, 218, 252, 72, 15, 129, 142, 185, 169, 173, 53, 121, 182, 221, 180, 213, 53, 179, 53, 10, 115, 240, 219, 172, 125, 192, 27, 172, 169, 239, 78, 86, 27, 241, 171, 248, 245, 1, 226, 210, 96, 165, 99, 113, 95, 165, 201, 234, 106, 99, 19, 125, 218, 29, 250, 236, 184, 207, 190, 155, 141, 8, 58, 84, 94, 188, 40, 178, 31, 58, 90, 88, 71, 203, 57, 159, 227, 197, 251, 26, 124, 246, 75, 202, 43, 165, 210, 142, 7, 67, 229, 70, 86, 173, 164, 114, 21, 59, 169, 234, 232, 112, 182, 237, 184, 208, 194, 218, 78, 28, 144, 182, 107, 78, 159, 145, 74, 111, 78, 237, 59, 196, 90, 154, 69, 182, 69, 16, 13, 155, 88, 107, 239, 205, 172, 69, 247, 107, 77, 155, 178, 110, 209, 96, 161, 163, 195, 249, 156, 206, 117, 156, 149, 202, 127, 126, 245, 123, 86, 222, 84, 194, 78, 55, 117, 222, 79, 123, 99, 7, 51, 23, 149, 72, 219, 244, 3, 114, 235, 175, 68, 133, 177, 84, 42, 75, 202, 44, 221, 142, 121, 211, 213, 0, 56, 254, 141, 172, 145, 120, 115, 161, 190, 131, 217, 78, 150, 176, 138, 194, 195, 210, 254, 167, 39, 246, 179, 211, 205, 23, 217, 25, 219, 37, 140, 179, 210, 238, 217, 182, 158, 177, 74, 23, 113, 239, 123, 111, 123, 115, 74, 60, 42, 149, 77, 103, 59, 88, 235, 105, 167, 51, 159, 247, 170, 251, 237, 158, 66, 182, 255, 207, 197, 236, 76, 91, 139, 180, 111, 63, 83, 207, 10, 15, 27, 217, 153, 234, 10, 86, 97, 178, 179, 170, 99, 78, 135, 33, 58, 172, 206, 118, 53, 205, 206, 160, 70, 215, 60, 80, 231, 60, 191, 155, 182, 166, 11, 146, 190, 236, 104, 179, 143, 254, 88, 241, 65, 214, 36, 158, 97, 167, 42, 156, 129, 198, 178, 111, 47, 234, 57, 157, 179, 181, 193, 25, 236, 26, 46, 113, 15, 68, 121, 101, 247, 160, 230, 205, 145, 111, 138, 125, 246, 79, 90, 125, 143, 19, 159, 191, 255, 23, 118, 224, 216, 73, 207, 126, 209, 241, 19, 82, 249, 221, 111, 143, 121, 116, 132, 247, 179, 108, 172, 105, 98, 199, 78, 21, 250, 28, 179, 158, 114, 222, 115, 99, 173, 51, 48, 184, 41, 57, 89, 46, 29, 231, 112, 8, 31, 227, 216, 83, 242, 157, 207, 190, 229, 112, 167, 241, 116, 92, 112, 142, 90, 68, 213, 55, 206, 17, 208, 141, 67, 172, 96, 150, 139, 78, 7, 33, 234, 196, 42, 159, 227, 206, 139, 181, 123, 246, 45, 7, 107, 157, 219, 133, 190, 142, 105, 47, 107, 100, 165, 135, 156, 129, 134, 168, 61, 127, 105, 103, 171, 109, 110, 96, 245, 166, 114, 207, 254, 183, 123, 156, 231, 106, 181, 35, 91, 105, 44, 101, 98, 135, 51, 0, 136, 21, 206, 224, 208, 222, 225, 59, 218, 183, 148, 57, 251, 251, 229, 97, 103, 59, 83, 93, 103, 255, 191, 250, 83, 231, 115, 56, 106, 113, 6, 36, 186, 135, 162, 234, 163, 172, 182, 206, 225, 57, 70, 52, 34, 104, 185, 143, 187, 117, 135, 42, 26, 88, 71, 171, 111, 118, 240, 229, 247, 206, 224, 80, 106, 115, 221, 123, 23, 28, 141, 245, 158, 237, 243, 181, 21, 62, 199, 220, 116, 116, 56, 207, 121, 254, 66, 247, 204, 131, 56, 177, 127, 15, 179, 27, 79, 51, 163, 209, 202, 78, 252, 99, 191, 207, 177, 218, 139, 109, 82, 233, 254, 193, 115, 56, 4, 43, 175, 113, 176, 19, 85, 78, 35, 169, 63, 230, 76, 225, 37, 67, 185, 232, 155, 46, 95, 142, 189, 7, 58, 3, 194, 183, 95, 159, 96, 101, 53, 13, 172, 224, 216, 181, 154, 89, 69, 183, 36, 253, 188, 238, 103, 179, 80, 78, 1, 131, 128, 178, 244, 235, 111, 124, 218, 18, 29, 93, 28, 157, 234, 129, 17, 211, 142, 220, 49, 59, 229, 203, 130, 152, 135, 11, 39, 168, 188, 143, 119, 229, 132, 88, 203, 90, 90, 59, 29, 252, 252, 197, 139, 82, 185, 119, 127, 53, 59, 125, 81, 62, 136, 156, 46, 41, 97, 38, 164, 226, 117, 123, 125, 131, 144, 27, 99, 177, 85, 86, 79, 20, 150, 118, 102, 14, 21, 117, 22, 214, 220, 122, 142, 125, 246, 213, 231, 62, 117, 138, 171, 202, 88, 155, 43, 99, 241, 198, 110, 59, 203, 42, 77, 206, 76, 192, 124, 166, 51, 40, 118, 197, 212, 209, 216, 77, 103, 179, 119, 79, 239, 75, 15, 29, 146, 202, 138, 138, 14, 214, 220, 80, 201, 254, 254, 183, 63, 48, 107, 67, 103, 38, 210, 116, 186, 201, 179, 77, 200, 25, 1, 199, 127, 241, 49, 14, 111, 74, 76, 190, 163, 80, 85, 145, 111, 42, 249, 221, 23, 133, 172, 240, 91, 215, 90, 64, 107, 19, 171, 41, 44, 97, 167, 76, 167, 80, 175, 132, 28, 88, 13, 166, 206, 237, 120, 114, 223, 196, 242, 159, 85, 78, 254, 238, 250, 210, 153, 95, 222, 176, 99, 142, 248, 232, 128, 58, 243, 25, 118, 6, 23, 246, 62, 87, 233, 241, 206, 209, 143, 130, 1, 218, 142, 6, 31, 1, 227, 221, 29, 79, 29, 153, 254, 93, 218, 84, 108, 171, 204, 141, 34, 107, 233, 168, 103, 135, 204, 78, 231, 172, 56, 219, 233, 16, 141, 200, 48, 126, 112, 157, 247, 174, 11, 247, 42, 80, 191, 39, 80, 184, 143, 23, 214, 250, 174, 27, 184, 41, 42, 233, 188, 54, 81, 117, 210, 185, 214, 65, 215, 27, 95, 52, 123, 40, 202, 124, 16, 126, 83, 203, 211, 210, 185, 202, 15, 157, 96, 86, 155, 51, 221, 118, 216, 156, 129, 160, 116, 255, 119, 152, 183, 59, 51, 5, 212, 165, 123, 31, 62, 179, 112, 246, 237, 40, 231, 131, 209, 83, 75, 231, 107, 155, 107, 170, 240, 188, 202, 164, 58, 110, 58, 46, 56, 251, 91, 91, 106, 100, 23, 42, 157, 35, 52, 97, 107, 116, 102, 9, 29, 29, 190, 206, 75, 28, 59, 213, 185, 22, 115, 250, 7, 223, 0, 114, 194, 236, 251, 51, 42, 42, 61, 206, 196, 242, 206, 169, 1, 65, 89, 132, 156, 33, 112, 252, 19, 246, 215, 47, 138, 217, 73, 243, 9, 246, 183, 173, 251, 89, 225, 30, 167, 67, 221, 33, 222, 165, 188, 206, 242, 228, 192, 164, 79, 102, 166, 103, 238, 189, 71, 71, 186, 227, 71, 156, 35, 92, 211, 73, 103, 29, 163, 177, 51, 253, 38, 40, 197, 191, 173, 244, 62, 225, 165, 218, 187, 123, 222, 104, 121, 244, 57, 24, 254, 247, 11, 172, 143, 182, 163, 180, 131, 86, 96, 156, 103, 185, 109, 186, 119, 27, 57, 210, 254, 49, 141, 156, 247, 161, 137, 95, 79, 109, 65, 121, 118, 202, 169, 91, 206, 163, 252, 238, 198, 35, 119, 140, 244, 174, 119, 224, 243, 127, 178, 154, 227, 190, 109, 171, 43, 142, 176, 251, 236, 207, 6, 206, 58, 54, 235, 86, 180, 89, 6, 238, 7, 131, 129, 180, 152, 103, 195, 232, 235, 174, 123, 218, 214, 233, 60, 181, 149, 206, 123, 178, 91, 157, 1, 13, 245, 133, 251, 75, 110, 76, 64, 249, 201, 204, 3, 51, 143, 221, 96, 126, 240, 225, 57, 69, 215, 133, 20, 27, 157, 83, 131, 170, 14, 231, 98, 161, 155, 170, 150, 58, 76, 49, 218, 216, 180, 202, 123, 201, 249, 199, 129, 131, 64, 4, 141, 224, 247, 224, 150, 23, 207, 61, 57, 63, 235, 173, 220, 168, 27, 246, 79, 235, 150, 205, 116, 56, 106, 124, 246, 231, 124, 51, 135, 50, 32, 234, 119, 50, 208, 74, 117, 206, 159, 246, 169, 179, 191, 164, 156, 125, 243, 157, 179, 191, 238, 169, 193, 237, 230, 5, 194, 130, 218, 169, 33, 11, 58, 30, 159, 61, 119, 255, 164, 59, 209, 118, 222, 148, 170, 251, 51, 81, 6, 208, 241, 6, 199, 105, 159, 31, 62, 135, 35, 25, 78, 145, 185, 142, 89, 191, 108, 130, 66, 100, 249, 7, 38, 11, 147, 191, 185, 51, 14, 70, 243, 57, 40, 155, 250, 221, 164, 149, 40, 3, 169, 94, 37, 70, 231, 214, 142, 238, 11, 93, 149, 152, 187, 127, 142, 57, 120, 250, 190, 241, 218, 249, 71, 231, 47, 94, 80, 122, 77, 27, 218, 144, 227, 94, 4, 182, 188, 194, 137, 20, 8, 26, 174, 57, 62, 245, 38, 170, 95, 91, 90, 193, 202, 78, 200, 167, 191, 168, 167, 205, 223, 255, 200, 70, 106, 255, 80, 199, 179, 212, 254, 135, 5, 150, 103, 140, 40, 199, 217, 108, 22, 214, 97, 238, 96, 142, 90, 11, 171, 40, 238, 124, 83, 225, 213, 86, 115, 163, 233, 190, 187, 80, 150, 230, 151, 207, 176, 161, 164, 32, 114, 120, 226, 222, 155, 167, 93, 115, 124, 190, 230, 179, 247, 63, 99, 95, 35, 83, 241, 110, 83, 178, 119, 63, 179, 123, 173, 79, 124, 251, 249, 183, 116, 30, 221, 181, 95, 207, 88, 140, 210, 62, 232, 163, 107, 219, 238, 63, 60, 251, 125, 108, 247, 110, 107, 117, 215, 217, 195, 172, 85, 206, 244, 222, 253, 32, 105, 27, 117, 250, 128, 15, 192, 249, 169, 7, 238, 188, 152, 89, 116, 51, 61, 7, 51, 168, 2, 117, 224, 29, 224, 9, 100, 133, 7, 26, 216, 177, 147, 206, 233, 211, 231, 223, 58, 23, 249, 174, 179, 204, 85, 76, 168, 188, 51, 102, 65, 249, 93, 187, 230, 124, 121, 195, 62, 212, 127, 52, 99, 239, 60, 201, 129, 59, 218, 93, 211, 130, 102, 103, 240, 109, 183, 251, 174, 71, 160, 46, 5, 160, 249, 209, 159, 79, 50, 161, 60, 13, 28, 224, 100, 254, 55, 55, 76, 191, 183, 227, 37, 21, 245, 243, 244, 153, 31, 60, 125, 230, 112, 124, 12, 136, 88, 112, 230, 110, 45, 140, 102, 39, 70, 107, 114, 62, 130, 156, 247, 158, 73, 251, 198, 121, 210, 233, 75, 129, 122, 189, 192, 187, 224, 194, 188, 226, 219, 127, 64, 249, 195, 184, 127, 76, 165, 12, 128, 12, 145, 156, 96, 134, 187, 238, 145, 239, 14, 118, 107, 127, 232, 112, 5, 157, 67, 5, 54, 3, 106, 223, 49, 238, 139, 27, 59, 158, 235, 88, 72, 1, 96, 152, 187, 94, 199, 57, 103, 186, 92, 92, 209, 153, 133, 148, 138, 22, 106, 59, 36, 231, 239, 5, 91, 81, 214, 2, 234, 247, 197, 155, 171, 23, 94, 156, 126, 252, 246, 147, 216, 142, 119, 215, 37, 236, 14, 231, 43, 57, 226, 72, 85, 37, 230, 220, 157, 211, 18, 212, 165, 62, 100, 131, 3, 128, 156, 184, 34, 231, 179, 219, 38, 55, 253, 189, 115, 238, 127, 162, 168, 251, 218, 1, 234, 209, 200, 61, 1, 28, 5, 116, 253, 179, 233, 187, 211, 206, 47, 104, 156, 127, 238, 209, 214, 167, 28, 179, 43, 231, 237, 134, 110, 168, 241, 188, 200, 206, 136, 206, 108, 164, 222, 117, 93, 107, 99, 7, 171, 180, 253, 192, 238, 52, 93, 23, 132, 58, 143, 129, 250, 156, 15, 50, 207, 39, 253, 117, 66, 195, 188, 142, 103, 238, 195, 190, 198, 251, 90, 196, 145, 34, 223, 197, 214, 27, 26, 111, 163, 236, 105, 82, 223, 221, 99, 155, 111, 107, 191, 85, 122, 254, 224, 12, 88, 59, 253, 219, 105, 134, 122, 209, 40, 107, 4, 28, 255, 69, 50, 156, 139, 174, 247, 211, 164, 128, 177, 24, 192, 14, 112, 254, 142, 125, 115, 41, 0, 208, 72, 190, 227, 103, 165, 115, 131, 188, 141, 205, 155, 3, 85, 206, 145, 8, 245, 200, 1, 238, 6, 109, 147, 246, 222, 212, 129, 242, 226, 47, 42, 231, 82, 250, 79, 35, 241, 23, 32, 178, 107, 91, 55, 127, 183, 58, 23, 32, 167, 124, 63, 155, 70, 209, 61, 79, 180, 62, 210, 49, 171, 112, 22, 157, 131, 140, 248, 45, 160, 174, 40, 235, 124, 141, 102, 109, 238, 204, 68, 106, 219, 156, 41, 48, 234, 132, 77, 53, 222, 186, 4, 101, 53, 104, 79, 255, 102, 210, 197, 73, 167, 22, 210, 61, 148, 207, 175, 188, 173, 224, 155, 131, 206, 5, 51, 55, 205, 45, 157, 219, 222, 76, 107, 94, 32, 160, 13, 61, 135, 229, 128, 2, 0, 141, 222, 55, 137, 103, 46, 248, 212, 179, 214, 118, 95, 168, 155, 110, 153, 23, 54, 191, 232, 166, 55, 111, 52, 62, 66, 142, 119, 97, 210, 119, 179, 47, 160, 164, 103, 240, 43, 64, 153, 149, 103, 10, 112, 250, 116, 61, 171, 59, 235, 76, 237, 139, 142, 195, 57, 155, 11, 233, 30, 180, 183, 156, 186, 251, 225, 233, 95, 222, 209, 210, 255, 15, 89, 63, 164, 127, 55, 151, 218, 127, 2, 6, 23, 237, 253, 134, 153, 78, 248, 102, 96, 38, 215, 43, 208, 38, 215, 207, 48, 103, 223, 221, 99, 81, 151, 2, 32, 61, 187, 142, 155, 219, 30, 167, 103, 255, 139, 130, 195, 183, 10, 182, 179, 173, 221, 12, 128, 227, 223, 176, 142, 26, 179, 143, 65, 193, 88, 12, 119, 28, 125, 234, 94, 148, 238, 180, 181, 20, 204, 188, 102, 207, 100, 5, 53, 240, 174, 235, 198, 209, 228, 52, 190, 170, 182, 54, 106, 159, 2, 78, 0, 50, 220, 11, 119, 218, 127, 113, 102, 226, 167, 227, 105, 46, 76, 163, 154, 218, 187, 93, 71, 153, 115, 238, 123, 182, 252, 36, 171, 55, 59, 157, 233, 134, 163, 185, 244, 246, 224, 150, 235, 43, 110, 178, 78, 44, 156, 72, 193, 231, 236, 29, 109, 143, 124, 138, 178, 151, 245, 152, 137, 157, 23, 157, 125, 56, 121, 112, 143, 84, 218, 27, 156, 175, 251, 218, 59, 126, 160, 107, 211, 8, 24, 49, 175, 227, 193, 79, 174, 59, 122, 159, 228, 128, 128, 82, 225, 29, 163, 255, 144, 18, 118, 232, 107, 231, 66, 157, 189, 163, 243, 85, 220, 161, 114, 231, 194, 153, 237, 188, 239, 188, 126, 220, 223, 198, 233, 209, 110, 107, 230, 161, 89, 237, 217, 31, 38, 209, 136, 158, 216, 46, 150, 177, 139, 53, 13, 236, 68, 137, 111, 32, 249, 190, 180, 51, 19, 65, 189, 16, 240, 6, 56, 7, 206, 2, 234, 7, 5, 145, 215, 11, 142, 94, 31, 126, 182, 227, 2, 251, 178, 188, 156, 181, 152, 59, 167, 29, 85, 182, 42, 118, 168, 180, 136, 125, 247, 79, 41, 0, 80, 240, 137, 156, 119, 108, 210, 151, 40, 41, 139, 160, 169, 204, 194, 240, 183, 135, 75, 41, 188, 187, 13, 113, 178, 188, 243, 77, 69, 91, 135, 115, 29, 3, 117, 123, 131, 15, 1, 221, 251, 197, 89, 199, 230, 28, 189, 182, 230, 174, 193, 116, 172, 252, 208, 23, 248, 161, 95, 236, 102, 4, 28, 255, 133, 29, 248, 126, 63, 19, 247, 59, 87, 167, 219, 140, 135, 216, 141, 213, 215, 145, 1, 134, 141, 63, 49, 125, 34, 202, 235, 65, 14, 144, 22, 2, 189, 169, 59, 137, 249, 120, 71, 231, 71, 63, 110, 80, 87, 251, 216, 133, 159, 63, 254, 105, 199, 55, 205, 233, 167, 174, 39, 35, 36, 227, 223, 115, 109, 249, 61, 41, 251, 203, 172, 236, 92, 151, 175, 231, 126, 104, 232, 92, 0, 251, 242, 228, 65, 214, 254, 237, 65, 233, 28, 96, 210, 130, 246, 7, 255, 138, 178, 229, 86, 243, 131, 166, 27, 202, 102, 206, 242, 110, 71, 148, 238, 61, 194, 202, 62, 219, 203, 170, 236, 29, 172, 222, 209, 192, 78, 29, 43, 163, 182, 20, 4, 70, 222, 88, 119, 251, 42, 148, 95, 221, 117, 110, 77, 9, 202, 185, 192, 231, 75, 68, 162, 184, 78, 254, 205, 0, 129, 250, 52, 159, 158, 61, 225, 253, 220, 189, 40, 239, 0, 221, 82, 112, 162, 245, 76, 3, 251, 199, 113, 231, 74, 123, 221, 73, 233, 13, 8, 61, 191, 71, 0, 77, 123, 206, 22, 124, 62, 211, 49, 249, 251, 252, 83, 216, 190, 237, 238, 115, 243, 165, 5, 189, 174, 52, 88, 157, 25, 148, 189, 227, 60, 107, 109, 63, 195, 210, 142, 78, 81, 103, 124, 60, 39, 185, 224, 235, 241, 47, 160, 221, 207, 129, 39, 251, 234, 112, 5, 192, 75, 129, 186, 138, 169, 31, 76, 204, 189, 225, 216, 93, 69, 116, 125, 32, 77, 189, 166, 150, 77, 85, 22, 90, 78, 117, 51, 0, 142, 127, 35, 25, 77, 73, 153, 239, 124, 246, 80, 163, 111, 106, 107, 191, 0, 7, 19, 157, 35, 100, 161, 165, 148, 53, 85, 183, 50, 241, 236, 15, 158, 227, 45, 63, 116, 46, 200, 209, 73, 97, 112, 125, 193, 54, 80, 115, 253, 190, 123, 104, 17, 108, 227, 220, 253, 247, 247, 181, 202, 124, 249, 118, 41, 110, 250, 251, 141, 161, 104, 71, 11, 113, 198, 251, 79, 221, 126, 24, 101, 254, 183, 95, 117, 159, 119, 159, 44, 220, 195, 106, 15, 22, 179, 146, 239, 246, 177, 51, 214, 14, 214, 238, 10, 40, 168, 175, 88, 208, 241, 12, 77, 39, 166, 129, 128, 253, 95, 125, 235, 105, 83, 126, 246, 188, 103, 155, 248, 246, 208, 65, 214, 84, 98, 103, 223, 255, 241, 11, 214, 84, 95, 198, 246, 20, 159, 96, 233, 229, 55, 147, 35, 7, 206, 171, 185, 37, 249, 250, 246, 7, 101, 29, 215, 77, 75, 133, 141, 117, 156, 119, 126, 123, 64, 160, 221, 112, 240, 53, 160, 236, 163, 185, 223, 95, 39, 47, 74, 252, 108, 66, 32, 182, 61, 65, 168, 198, 236, 76, 253, 79, 149, 118, 249, 12, 27, 207, 143, 202, 241, 71, 166, 211, 116, 74, 243, 112, 243, 47, 132, 198, 6, 103, 134, 117, 228, 228, 23, 82, 121, 254, 204, 89, 38, 254, 224, 92, 132, 60, 126, 212, 249, 165, 96, 81, 105, 37, 51, 149, 84, 178, 35, 159, 23, 211, 245, 233, 155, 139, 215, 167, 20, 205, 109, 66, 89, 15, 22, 101, 31, 185, 49, 248, 34, 218, 181, 86, 203, 27, 2, 199, 63, 145, 140, 167, 174, 188, 141, 21, 25, 109, 236, 64, 173, 239, 215, 114, 222, 152, 77, 245, 204, 98, 181, 176, 74, 215, 239, 4, 28, 249, 218, 249, 197, 222, 209, 35, 71, 88, 35, 12, 139, 182, 155, 75, 61, 105, 168, 226, 14, 203, 236, 129, 40, 233, 61, 248, 61, 96, 4, 233, 232, 216, 217, 51, 157, 35, 254, 190, 191, 151, 179, 226, 195, 206, 54, 29, 54, 27, 107, 187, 208, 121, 61, 170, 255, 68, 199, 178, 1, 183, 53, 222, 113, 251, 228, 146, 121, 83, 110, 174, 251, 121, 64, 77, 85, 231, 231, 176, 71, 45, 118, 182, 103, 191, 115, 33, 241, 196, 94, 231, 87, 111, 39, 77, 190, 211, 153, 210, 226, 147, 172, 120, 175, 51, 197, 175, 175, 238, 60, 86, 122, 210, 204, 206, 137, 205, 108, 207, 129, 239, 217, 223, 190, 116, 174, 43, 156, 198, 195, 168, 46, 49, 51, 107, 161, 239, 8, 219, 120, 186, 146, 117, 156, 233, 212, 157, 242, 250, 24, 231, 232, 254, 163, 172, 194, 181, 138, 79, 124, 226, 250, 66, 242, 218, 35, 147, 201, 121, 35, 98, 247, 78, 163, 87, 145, 15, 128, 176, 210, 61, 206, 53, 142, 175, 63, 113, 58, 44, 209, 84, 237, 156, 58, 52, 158, 113, 102, 0, 167, 59, 206, 177, 195, 7, 142, 225, 122, 206, 0, 229, 254, 253, 3, 55, 103, 127, 56, 195, 218, 196, 206, 172, 139, 126, 128, 7, 14, 59, 88, 221, 158, 206, 111, 54, 14, 127, 250, 29, 61, 59, 90, 191, 184, 249, 177, 179, 79, 253, 13, 37, 77, 37, 230, 129, 192, 186, 230, 102, 159, 31, 62, 135, 195, 206, 92, 236, 124, 55, 126, 240, 171, 47, 157, 219, 237, 157, 115, 100, 75, 163, 115, 197, 253, 184, 197, 194, 140, 39, 76, 72, 155, 187, 127, 221, 230, 70, 172, 42, 148, 78, 74, 219, 48, 56, 26, 65, 53, 145, 31, 103, 233, 104, 219, 93, 167, 178, 162, 198, 233, 108, 174, 125, 162, 212, 92, 229, 233, 144, 91, 103, 190, 112, 202, 125, 14, 229, 207, 154, 31, 81, 86, 87, 56, 251, 84, 120, 162, 130, 89, 108, 157, 217, 7, 241, 213, 193, 50, 118, 198, 230, 236, 231, 103, 38, 223, 207, 153, 221, 212, 148, 248, 126, 36, 35, 199, 254, 227, 213, 236, 216, 177, 175, 61, 251, 109, 231, 218, 89, 85, 97, 231, 39, 194, 133, 198, 111, 216, 39, 199, 14, 178, 150, 115, 78, 199, 61, 117, 190, 145, 149, 21, 57, 183, 47, 158, 246, 125, 79, 127, 242, 96, 37, 123, 168, 227, 41, 197, 204, 195, 11, 212, 207, 117, 60, 35, 52, 214, 55, 178, 63, 127, 228, 124, 111, 239, 198, 102, 246, 13, 184, 21, 174, 245, 12, 162, 248, 104, 57, 51, 35, 99, 42, 173, 62, 202, 78, 85, 124, 199, 234, 78, 93, 186, 255, 226, 249, 206, 159, 33, 225, 122, 110, 244, 54, 129, 190, 35, 160, 53, 153, 30, 9, 123, 39, 72, 1, 216, 253, 156, 57, 28, 130, 117, 52, 117, 58, 116, 209, 65, 215, 247, 243, 14, 175, 223, 78, 107, 119, 142, 66, 149, 45, 78, 7, 187, 232, 112, 142, 164, 39, 76, 190, 191, 72, 67, 124, 126, 204, 57, 23, 62, 223, 232, 92, 169, 62, 104, 71, 221, 166, 78, 163, 254, 172, 216, 247, 151, 97, 136, 38, 75, 231, 183, 255, 98, 77, 247, 57, 249, 193, 163, 251, 124, 246, 15, 29, 234, 60, 71, 27, 110, 192, 189, 93, 86, 94, 204, 254, 242, 155, 15, 165, 237, 142, 211, 118, 204, 167, 109, 236, 248, 151, 206, 99, 149, 133, 78, 39, 253, 242, 80, 231, 87, 113, 245, 245, 157, 111, 62, 168, 172, 176, 20, 73, 229, 201, 253, 157, 159, 67, 187, 41, 254, 176, 243, 151, 115, 78, 24, 157, 245, 91, 126, 112, 6, 134, 83, 71, 58, 191, 185, 55, 21, 255, 141, 21, 127, 255, 119, 105, 219, 209, 222, 153, 113, 236, 253, 186, 211, 121, 233, 122, 85, 182, 206, 99, 109, 117, 54, 214, 116, 230, 210, 107, 17, 110, 206, 118, 180, 177, 146, 74, 223, 190, 181, 120, 109, 19, 29, 8, 72, 222, 251, 222, 56, 170, 79, 33, 240, 242, 12, 128, 227, 139, 239, 239, 137, 115, 56, 46, 228, 140, 133, 243, 211, 67, 146, 107, 162, 42, 89, 118, 156, 49, 52, 51, 182, 106, 96, 86, 84, 153, 154, 116, 105, 113, 149, 186, 204, 196, 202, 65, 116, 44, 35, 186, 60, 56, 35, 170, 44, 20, 101, 175, 140, 81, 69, 186, 164, 200, 34, 213, 216, 200, 83, 66, 78, 138, 81, 57, 62, 206, 202, 38, 36, 89, 251, 100, 37, 152, 102, 101, 198, 153, 238, 203, 140, 171, 26, 36, 234, 25, 219, 210, 239, 113, 33, 45, 218, 120, 107, 90, 148, 241, 173, 180, 152, 202, 113, 25, 137, 21, 193, 233, 177, 85, 195, 50, 99, 42, 35, 115, 163, 139, 123, 101, 198, 149, 41, 179, 227, 45, 44, 43, 161, 82, 51, 33, 186, 50, 36, 63, 174, 82, 157, 159, 96, 84, 208, 181, 243, 99, 42, 180, 216, 206, 207, 79, 52, 206, 156, 28, 95, 22, 36, 246, 100, 108, 74, 106, 53, 43, 72, 50, 206, 200, 75, 168, 82, 83, 187, 41, 137, 213, 66, 86, 108, 149, 58, 61, 186, 170, 119, 102, 116, 85, 120, 122, 164, 177, 79, 106, 132, 185, 79, 78, 180, 105, 96, 86, 180, 113, 4, 157, 39, 35, 182, 74, 81, 16, 101, 186, 39, 63, 214, 56, 128, 246, 115, 99, 170, 2, 179, 18, 45, 180, 201, 178, 163, 43, 132, 188, 136, 18, 105, 59, 35, 174, 82, 42, 211, 98, 43, 85, 25, 209, 101, 35, 51, 163, 75, 211, 82, 227, 78, 134, 145, 46, 39, 185, 84, 159, 30, 83, 50, 58, 61, 230, 212, 208, 212, 232, 226, 225, 169, 209, 69, 41, 233, 9, 37, 218, 156, 56, 244, 29, 100, 198, 89, 84, 153, 177, 166, 62, 121, 49, 206, 243, 146, 100, 197, 153, 3, 113, 254, 252, 140, 152, 146, 251, 50, 163, 202, 122, 228, 68, 27, 195, 50, 163, 203, 102, 103, 196, 149, 141, 200, 140, 45, 15, 118, 85, 147, 36, 46, 234, 51, 150, 157, 80, 169, 203, 142, 55, 185, 52, 78, 201, 26, 91, 137, 243, 150, 8, 174, 93, 31, 25, 31, 227, 91, 151, 36, 113, 240, 65, 33, 113, 76, 81, 44, 136, 78, 141, 44, 11, 3, 211, 178, 98, 140, 217, 217, 177, 166, 8, 16, 156, 61, 166, 144, 101, 143, 57, 41, 235, 236, 114, 200, 25, 11, 231, 167, 135, 172, 192, 233, 85, 249, 253, 246, 7, 78, 26, 114, 34, 56, 183, 207, 94, 201, 41, 175, 86, 242, 111, 182, 178, 137, 105, 213, 147, 178, 111, 183, 74, 251, 121, 113, 166, 187, 166, 196, 86, 179, 113, 17, 214, 33, 89, 49, 149, 243, 73, 151, 153, 80, 28, 32, 29, 244, 18, 56, 141, 0, 66, 146, 251, 28, 116, 238, 199, 87, 206, 11, 159, 113, 138, 145, 179, 231, 198, 88, 22, 77, 74, 52, 78, 204, 79, 54, 141, 145, 14, 94, 66, 210, 18, 171, 244, 201, 8, 92, 104, 163, 75, 139, 53, 141, 114, 169, 89, 118, 172, 177, 219, 245, 46, 39, 169, 73, 85, 225, 174, 77, 118, 109, 66, 53, 139, 27, 235, 116, 184, 137, 9, 213, 26, 105, 195, 75, 102, 68, 212, 177, 113, 209, 86, 134, 128, 160, 67, 64, 208, 34, 32, 24, 80, 14, 71, 31, 16, 160, 44, 247, 185, 170, 121, 36, 61, 245, 64, 72, 196, 136, 15, 100, 159, 105, 86, 74, 17, 238, 219, 164, 66, 48, 144, 130, 176, 91, 232, 25, 16, 151, 147, 193, 25, 102, 215, 150, 83, 50, 146, 171, 134, 82, 89, 16, 109, 81, 231, 196, 90, 148, 146, 18, 210, 213, 209, 47, 133, 156, 177, 112, 126, 122, 200, 10, 70, 204, 126, 25, 49, 149, 25, 174, 93, 140, 114, 38, 33, 33, 170, 48, 44, 59, 162, 84, 118, 68, 34, 73, 24, 94, 201, 114, 83, 77, 211, 39, 36, 91, 30, 27, 159, 80, 253, 77, 218, 88, 243, 186, 140, 116, 235, 112, 56, 193, 199, 211, 227, 106, 149, 147, 34, 107, 134, 231, 68, 153, 158, 162, 186, 153, 99, 141, 131, 38, 198, 85, 119, 51, 106, 218, 191, 102, 76, 249, 140, 137, 177, 198, 153, 249, 241, 230, 205, 20, 0, 72, 198, 39, 89, 54, 77, 142, 174, 208, 77, 74, 180, 222, 36, 41, 46, 33, 24, 233, 60, 78, 159, 26, 97, 249, 69, 118, 188, 89, 114, 88, 232, 103, 228, 69, 150, 13, 198, 136, 239, 113, 132, 75, 9, 245, 33, 45, 174, 98, 38, 28, 90, 200, 142, 46, 157, 156, 150, 84, 60, 41, 53, 246, 196, 35, 233, 105, 69, 189, 11, 210, 43, 114, 38, 36, 89, 122, 76, 76, 112, 6, 55, 146, 105, 17, 181, 174, 45, 10, 98, 150, 153, 217, 113, 230, 53, 227, 99, 170, 165, 253, 220, 104, 211, 29, 185, 177, 198, 213, 73, 145, 251, 164, 235, 162, 63, 225, 5, 217, 230, 129, 180, 29, 49, 234, 35, 69, 106, 130, 51, 243, 240, 150, 252, 49, 213, 186, 130, 24, 107, 120, 110, 90, 69, 126, 86, 106, 201, 184, 172, 172, 195, 174, 35, 151, 150, 81, 169, 102, 33, 63, 201, 138, 188, 203, 41, 200, 70, 250, 142, 29, 93, 122, 179, 107, 23, 25, 142, 41, 58, 55, 162, 98, 208, 228, 145, 149, 87, 253, 255, 17, 229, 140, 133, 243, 211, 195, 71, 114, 83, 170, 25, 82, 228, 1, 185, 169, 53, 44, 51, 209, 116, 123, 122, 66, 213, 12, 210, 167, 199, 85, 205, 200, 25, 122, 44, 232, 166, 254, 167, 88, 114, 180, 124, 16, 160, 17, 124, 236, 88, 211, 156, 107, 162, 106, 194, 115, 99, 205, 127, 74, 137, 48, 57, 146, 35, 170, 90, 49, 13, 48, 165, 199, 154, 111, 197, 241, 33, 174, 170, 44, 61, 190, 42, 185, 32, 193, 20, 234, 218, 245, 145, 113, 73, 166, 119, 198, 37, 84, 55, 166, 68, 87, 74, 163, 253, 132, 113, 150, 129, 227, 198, 86, 85, 230, 39, 152, 255, 132, 105, 128, 39, 40, 185, 101, 50, 166, 6, 215, 36, 213, 4, 101, 68, 87, 198, 167, 71, 27, 175, 119, 169, 89, 110, 172, 41, 35, 47, 198, 252, 125, 118, 164, 121, 219, 248, 56, 203, 95, 199, 197, 91, 62, 205, 137, 174, 156, 131, 251, 19, 48, 45, 112, 213, 234, 46, 152, 14, 12, 73, 139, 173, 74, 204, 137, 46, 189, 29, 211, 153, 32, 210, 101, 198, 155, 131, 211, 198, 20, 77, 75, 143, 47, 191, 59, 51, 243, 100, 47, 169, 162, 75, 242, 99, 172, 158, 209, 28, 247, 104, 200, 138, 55, 207, 200, 142, 179, 120, 116, 57, 145, 229, 75, 48, 101, 248, 93, 86, 188, 69, 157, 157, 96, 13, 204, 73, 180, 164, 147, 62, 45, 238, 184, 207, 84, 128, 36, 55, 197, 218, 51, 47, 213, 56, 46, 45, 227, 112, 20, 237, 39, 14, 56, 152, 128, 169, 64, 156, 116, 16, 82, 48, 170, 66, 24, 55, 162, 194, 181, 231, 148, 156, 36, 103, 48, 202, 136, 172, 236, 153, 52, 170, 104, 84, 122, 188, 41, 1, 211, 128, 29, 169, 81, 21, 209, 49, 67, 143, 204, 73, 143, 51, 190, 129, 160, 116, 23, 213, 153, 144, 90, 42, 235, 236, 114, 200, 25, 11, 231, 167, 135, 143, 100, 37, 89, 99, 65, 93, 102, 82, 213, 175, 179, 147, 43, 11, 178, 146, 171, 126, 149, 149, 92, 57, 25, 243, 251, 236, 172, 232, 42, 231, 188, 58, 193, 236, 73, 79, 227, 135, 85, 96, 164, 53, 10, 217, 9, 38, 45, 156, 36, 23, 199, 222, 152, 144, 100, 62, 152, 157, 96, 92, 152, 17, 91, 81, 152, 22, 107, 182, 166, 197, 152, 86, 167, 39, 25, 43, 83, 99, 74, 28, 112, 142, 73, 24, 97, 133, 204, 184, 202, 249, 179, 98, 107, 88, 78, 106, 173, 34, 35, 162, 156, 97, 14, 239, 9, 42, 56, 87, 88, 110, 146, 169, 40, 55, 161, 106, 193, 144, 136, 99, 134, 172, 36, 211, 163, 57, 73, 230, 139, 249, 73, 21, 191, 148, 142, 59, 211, 225, 64, 87, 201, 38, 37, 86, 171, 166, 39, 215, 168, 243, 50, 171, 89, 242, 8, 235, 181, 153, 49, 150, 2, 210, 147, 204, 140, 180, 172, 190, 102, 180, 169, 38, 51, 213, 26, 88, 144, 104, 30, 57, 46, 222, 52, 47, 107, 172, 85, 153, 31, 109, 98, 57, 177, 190, 41, 179, 91, 178, 226, 76, 67, 83, 35, 78, 205, 203, 74, 172, 220, 150, 25, 99, 26, 130, 32, 40, 164, 143, 172, 102, 25, 177, 38, 109, 90, 84, 241, 182, 113, 17, 69, 90, 87, 85, 100, 74, 86, 4, 26, 139, 167, 239, 249, 113, 85, 247, 229, 70, 153, 127, 151, 159, 104, 94, 147, 145, 104, 10, 165, 126, 164, 33, 147, 200, 140, 42, 251, 117, 86, 92, 229, 109, 84, 103, 98, 86, 245, 196, 107, 174, 55, 169, 178, 18, 141, 145, 180, 159, 152, 236, 204, 22, 72, 242, 82, 45, 215, 160, 141, 180, 54, 66, 114, 67, 92, 109, 96, 250, 200, 19, 79, 142, 203, 172, 166, 105, 141, 162, 32, 162, 50, 108, 98, 124, 231, 72, 79, 146, 149, 224, 188, 126, 194, 192, 239, 135, 198, 142, 58, 113, 34, 37, 186, 124, 205, 248, 49, 85, 218, 204, 232, 202, 119, 243, 226, 44, 91, 145, 201, 56, 16, 0, 222, 151, 42, 67, 228, 156, 93, 14, 57, 99, 225, 252, 244, 240, 17, 50, 188, 236, 120, 227, 142, 164, 81, 71, 66, 50, 19, 170, 150, 230, 38, 152, 214, 102, 37, 154, 246, 102, 37, 27, 191, 207, 142, 40, 11, 164, 58, 153, 113, 102, 101, 90, 146, 201, 51, 194, 229, 223, 98, 101, 25, 5, 21, 65, 112, 178, 155, 49, 186, 157, 200, 142, 171, 58, 151, 155, 100, 185, 25, 231, 154, 153, 157, 104, 178, 166, 199, 85, 46, 73, 139, 47, 159, 155, 156, 124, 234, 235, 180, 132, 138, 135, 200, 192, 49, 165, 120, 112, 70, 156, 51, 117, 166, 0, 144, 29, 85, 174, 146, 182, 99, 203, 239, 65, 240, 184, 54, 59, 205, 50, 48, 43, 201, 252, 77, 65, 170, 105, 98, 94, 162, 57, 44, 47, 209, 146, 76, 125, 203, 64, 240, 152, 94, 80, 61, 119, 82, 138, 37, 94, 106, 12, 129, 94, 72, 26, 93, 212, 23, 153, 198, 100, 140, 192, 153, 121, 113, 230, 219, 198, 71, 25, 95, 166, 250, 5, 177, 166, 247, 178, 98, 76, 141, 89, 81, 198, 245, 153, 49, 149, 161, 131, 194, 191, 112, 181, 242, 21, 140, 216, 44, 37, 190, 88, 157, 26, 123, 74, 159, 26, 85, 198, 210, 35, 75, 54, 32, 253, 222, 2, 39, 90, 154, 48, 186, 248, 246, 228, 209, 101, 79, 164, 71, 87, 188, 158, 17, 85, 190, 196, 213, 196, 71, 144, 114, 75, 78, 152, 23, 95, 117, 115, 42, 28, 62, 37, 170, 120, 35, 28, 126, 95, 102, 130, 121, 126, 102, 172, 37, 60, 39, 218, 156, 156, 29, 99, 92, 72, 117, 50, 34, 77, 186, 241, 89, 150, 183, 241, 140, 34, 104, 63, 34, 175, 115, 26, 52, 97, 108, 197, 224, 177, 113, 135, 30, 74, 24, 113, 120, 101, 222, 208, 98, 41, 211, 200, 142, 56, 149, 149, 50, 234, 228, 83, 201, 35, 14, 189, 155, 60, 250, 120, 210, 53, 209, 230, 128, 105, 49, 213, 210, 245, 156, 207, 196, 172, 25, 23, 97, 212, 165, 14, 63, 54, 111, 236, 152, 226, 219, 166, 140, 170, 68, 127, 140, 3, 242, 99, 205, 187, 115, 99, 203, 52, 105, 209, 21, 95, 38, 39, 84, 254, 101, 124, 172, 165, 128, 218, 200, 57, 187, 28, 114, 198, 194, 249, 233, 33, 73, 110, 130, 89, 113, 125, 86, 133, 52, 95, 206, 74, 174, 184, 47, 45, 182, 252, 254, 140, 216, 170, 25, 121, 241, 166, 251, 114, 19, 205, 111, 101, 37, 154, 15, 100, 38, 84, 60, 149, 17, 103, 76, 71, 0, 208, 36, 102, 24, 89, 74, 142, 153, 165, 99, 36, 77, 139, 52, 74, 231, 72, 77, 54, 223, 151, 29, 91, 121, 67, 65, 138, 233, 72, 94, 166, 165, 245, 134, 41, 53, 235, 48, 231, 93, 55, 46, 217, 124, 60, 47, 214, 210, 143, 140, 213, 45, 216, 14, 64, 118, 32, 45, 82, 101, 68, 149, 176, 180, 168, 18, 29, 109, 231, 141, 53, 255, 54, 47, 197, 100, 203, 138, 53, 105, 82, 99, 205, 3, 10, 146, 172, 139, 210, 227, 45, 158, 17, 119, 92, 178, 101, 197, 181, 105, 230, 68, 4, 166, 110, 233, 51, 73, 82, 124, 133, 62, 33, 190, 66, 53, 53, 218, 242, 78, 78, 76, 213, 228, 73, 9, 150, 223, 164, 69, 154, 254, 153, 58, 198, 252, 122, 110, 164, 233, 227, 169, 81, 150, 27, 168, 94, 65, 164, 239, 20, 128, 250, 150, 22, 91, 162, 76, 139, 43, 147, 70, 215, 180, 81, 85, 121, 216, 223, 128, 128, 210, 47, 35, 193, 56, 50, 98, 244, 222, 164, 244, 232, 178, 207, 19, 71, 31, 223, 153, 156, 108, 242, 44, 10, 146, 140, 139, 182, 10, 217, 177, 22, 41, 59, 66, 6, 176, 12, 163, 237, 208, 172, 24, 203, 147, 25, 137, 198, 186, 244, 152, 10, 83, 86, 188, 241, 48, 2, 201, 254, 164, 232, 74, 105, 125, 34, 59, 201, 146, 147, 151, 82, 245, 66, 110, 146, 53, 129, 246, 163, 115, 156, 207, 101, 202, 208, 26, 125, 238, 216, 19, 210, 118, 116, 98, 137, 58, 55, 186, 242, 254, 156, 24, 147, 48, 110, 164, 51, 229, 207, 68, 6, 146, 58, 236, 228, 162, 107, 250, 57, 215, 69, 168, 207, 89, 113, 86, 150, 23, 229, 204, 100, 220, 207, 55, 45, 113, 175, 161, 32, 161, 244, 193, 188, 132, 138, 247, 115, 227, 171, 214, 227, 30, 126, 7, 30, 68, 251, 129, 56, 223, 8, 57, 103, 151, 67, 206, 88, 56, 63, 61, 36, 161, 215, 89, 179, 115, 203, 165, 0, 144, 18, 97, 22, 50, 98, 204, 67, 96, 52, 125, 18, 71, 154, 123, 166, 69, 153, 67, 96, 92, 42, 160, 128, 142, 24, 48, 100, 84, 145, 212, 142, 4, 65, 64, 141, 44, 97, 20, 230, 184, 125, 105, 255, 161, 121, 117, 249, 169, 241, 37, 173, 57, 201, 101, 101, 153, 137, 150, 39, 242, 199, 154, 237, 211, 51, 204, 239, 92, 155, 86, 162, 200, 196, 20, 35, 61, 222, 44, 45, 78, 225, 60, 82, 70, 65, 18, 158, 224, 124, 29, 55, 49, 178, 42, 15, 233, 242, 72, 218, 206, 136, 58, 37, 228, 196, 27, 71, 101, 167, 152, 239, 78, 73, 128, 147, 193, 192, 199, 37, 85, 189, 66, 199, 48, 221, 144, 28, 149, 116, 153, 81, 102, 109, 202, 232, 242, 56, 218, 78, 139, 52, 79, 70, 255, 19, 167, 199, 84, 111, 158, 28, 103, 249, 228, 218, 196, 234, 137, 233, 145, 150, 239, 178, 98, 205, 185, 121, 177, 198, 228, 233, 49, 86, 105, 4, 207, 142, 53, 73, 25, 199, 165, 36, 117, 76, 233, 203, 105, 209, 37, 147, 210, 98, 75, 21, 233, 113, 37, 143, 96, 132, 87, 165, 68, 20, 189, 157, 50, 234, 212, 26, 87, 21, 89, 201, 143, 183, 92, 147, 27, 99, 126, 59, 37, 170, 240, 147, 180, 196, 170, 182, 252, 52, 203, 81, 4, 144, 103, 51, 227, 45, 225, 212, 191, 184, 209, 69, 185, 153, 137, 198, 45, 17, 163, 63, 22, 240, 188, 134, 83, 155, 148, 100, 167, 227, 78, 30, 82, 235, 243, 102, 32, 43, 214, 56, 117, 74, 172, 165, 127, 70, 76, 149, 144, 155, 107, 165, 123, 213, 100, 15, 63, 245, 143, 252, 104, 227, 248, 156, 120, 139, 193, 85, 205, 35, 99, 19, 142, 246, 201, 77, 60, 150, 156, 27, 111, 42, 65, 192, 109, 202, 141, 173, 28, 152, 23, 85, 62, 21, 83, 157, 137, 5, 99, 138, 148, 120, 6, 61, 242, 99, 77, 155, 228, 156, 93, 14, 57, 99, 225, 252, 244, 144, 149, 236, 148, 106, 100, 5, 166, 57, 96, 100, 98, 166, 145, 141, 141, 43, 187, 49, 115, 108, 249, 110, 204, 225, 165, 5, 169, 148, 140, 206, 41, 0, 25, 38, 244, 241, 100, 224, 36, 25, 9, 150, 30, 25, 201, 198, 214, 156, 196, 178, 15, 49, 63, 189, 62, 59, 217, 120, 110, 66, 114, 229, 185, 241, 113, 85, 143, 82, 157, 152, 40, 147, 244, 74, 142, 182, 221, 109, 188, 37, 55, 185, 82, 137, 180, 127, 228, 196, 56, 211, 168, 137, 99, 141, 197, 57, 137, 230, 23, 242, 146, 172, 241, 57, 73, 150, 140, 252, 84, 243, 139, 84, 39, 45, 209, 42, 189, 163, 119, 75, 226, 168, 194, 224, 241, 113, 213, 131, 166, 37, 214, 42, 166, 36, 85, 179, 235, 35, 173, 133, 83, 226, 173, 243, 115, 98, 45, 233, 185, 113, 150, 127, 230, 198, 153, 31, 200, 143, 170, 122, 100, 70, 114, 181, 148, 118, 95, 73, 210, 162, 203, 86, 165, 69, 159, 138, 72, 139, 44, 124, 33, 37, 251, 228, 48, 210, 101, 37, 212, 56, 211, 238, 88, 139, 34, 61, 182, 42, 12, 125, 247, 204, 253, 187, 222, 71, 234, 136, 138, 128, 228, 168, 83, 245, 121, 17, 198, 70, 100, 87, 101, 217, 137, 213, 125, 51, 34, 203, 19, 50, 99, 75, 247, 101, 197, 25, 13, 84, 31, 1, 160, 143, 171, 58, 166, 62, 206, 81, 60, 110, 56, 158, 245, 176, 34, 233, 188, 120, 166, 10, 140, 218, 138, 172, 216, 147, 209, 137, 163, 247, 189, 151, 16, 89, 60, 27, 237, 164, 117, 133, 174, 146, 19, 99, 12, 202, 142, 51, 189, 149, 159, 80, 58, 14, 247, 186, 40, 47, 222, 242, 33, 178, 175, 126, 5, 169, 230, 153, 153, 49, 166, 158, 121, 163, 79, 106, 17, 112, 35, 243, 227, 204, 83, 229, 156, 93, 14, 57, 99, 225, 252, 244, 144, 21, 24, 153, 62, 43, 209, 18, 149, 159, 100, 138, 165, 253, 244, 56, 99, 80, 86, 162, 113, 7, 140, 242, 113, 218, 143, 136, 58, 46, 65, 226, 109, 144, 48, 50, 41, 64, 20, 36, 84, 210, 130, 96, 80, 122, 134, 69, 95, 144, 101, 201, 153, 63, 179, 230, 253, 220, 104, 115, 219, 132, 132, 242, 59, 51, 99, 43, 39, 97, 132, 138, 155, 25, 221, 185, 82, 78, 146, 153, 189, 151, 101, 38, 91, 51, 179, 18, 173, 203, 198, 141, 181, 196, 230, 36, 152, 178, 114, 18, 43, 63, 204, 75, 46, 175, 78, 73, 48, 239, 25, 27, 109, 41, 70, 250, 124, 96, 66, 154, 117, 86, 110, 170, 213, 179, 18, 79, 215, 207, 142, 170, 214, 100, 70, 154, 122, 184, 84, 108, 102, 156, 245, 163, 107, 147, 172, 153, 57, 113, 150, 57, 5, 241, 150, 231, 93, 106, 73, 224, 84, 61, 98, 134, 29, 245, 76, 43, 228, 36, 49, 226, 228, 237, 169, 209, 21, 143, 37, 71, 149, 168, 198, 142, 41, 97, 169, 145, 229, 174, 35, 112, 210, 200, 194, 176, 244, 216, 202, 190, 114, 142, 232, 150, 212, 209, 37, 115, 50, 99, 43, 170, 179, 19, 140, 197, 233, 9, 165, 247, 166, 143, 172, 8, 203, 138, 171, 42, 26, 159, 97, 25, 135, 96, 208, 3, 207, 105, 116, 70, 140, 201, 179, 152, 151, 155, 96, 17, 210, 34, 75, 3, 50, 134, 125, 223, 43, 105, 180, 145, 101, 38, 96, 110, 159, 104, 81, 140, 79, 40, 25, 148, 58, 250, 200, 139, 121, 195, 138, 38, 197, 13, 59, 234, 121, 27, 224, 45, 217, 8, 30, 215, 14, 47, 215, 231, 197, 84, 220, 134, 62, 73, 153, 13, 245, 173, 32, 213, 50, 24, 211, 145, 137, 89, 209, 230, 224, 41, 57, 213, 81, 185, 241, 150, 223, 141, 139, 179, 140, 148, 115, 118, 57, 228, 140, 133, 243, 211, 163, 155, 228, 196, 155, 174, 203, 78, 170, 122, 9, 70, 164, 158, 153, 89, 161, 67, 74, 57, 152, 244, 72, 99, 213, 8, 0, 81, 99, 179, 157, 95, 235, 117, 21, 212, 15, 0, 227, 201, 248, 72, 34, 6, 28, 100, 241, 195, 79, 178, 152, 33, 199, 104, 161, 170, 79, 222, 88, 107, 107, 94, 82, 101, 89, 102, 92, 229, 83, 249, 113, 166, 33, 51, 99, 77, 158, 17, 148, 36, 51, 185, 68, 200, 140, 51, 77, 201, 78, 178, 46, 157, 158, 91, 163, 164, 105, 65, 110, 134, 101, 120, 90, 146, 249, 241, 228, 24, 243, 27, 25, 113, 150, 197, 57, 9, 86, 169, 47, 93, 5, 215, 244, 121, 191, 63, 33, 209, 170, 3, 97, 19, 226, 77, 89, 227, 34, 171, 74, 144, 5, 72, 95, 2, 146, 80, 221, 212, 168, 138, 110, 247, 144, 29, 131, 81, 57, 214, 76, 243, 121, 207, 177, 168, 209, 7, 89, 244, 232, 67, 66, 122, 76, 165, 180, 70, 113, 181, 146, 25, 83, 117, 79, 65, 178, 249, 155, 236, 152, 202, 29, 233, 81, 229, 2, 206, 251, 100, 118, 156, 113, 95, 74, 116, 197, 61, 41, 17, 229, 55, 196, 247, 57, 232, 211, 223, 212, 49, 102, 150, 60, 164, 80, 145, 53, 120, 207, 224, 132, 97, 135, 60, 31, 27, 229, 37, 30, 75, 203, 27, 94, 154, 150, 53, 166, 124, 90, 212, 176, 67, 62, 31, 7, 121, 75, 90, 124, 145, 34, 35, 190, 104, 36, 238, 77, 122, 59, 66, 66, 37, 2, 141, 14, 153, 192, 224, 130, 120, 211, 111, 39, 140, 173, 94, 140, 253, 121, 114, 206, 46, 135, 156, 177, 112, 126, 122, 116, 147, 201, 99, 171, 70, 22, 36, 154, 38, 146, 163, 32, 24, 196, 100, 197, 155, 238, 203, 140, 53, 39, 187, 14, 179, 152, 196, 98, 215, 150, 175, 184, 13, 47, 43, 206, 164, 156, 149, 99, 89, 51, 46, 201, 188, 37, 55, 193, 40, 141, 180, 72, 119, 225, 88, 166, 244, 180, 168, 138, 75, 26, 49, 73, 78, 162, 81, 55, 119, 146, 243, 237, 64, 78, 142, 121, 116, 110, 170, 165, 219, 183, 2, 177, 137, 213, 151, 157, 191, 147, 92, 147, 100, 213, 95, 63, 182, 122, 100, 126, 156, 53, 44, 47, 206, 124, 223, 248, 120, 203, 3, 55, 165, 212, 201, 6, 174, 174, 146, 25, 107, 148, 250, 152, 16, 121, 44, 49, 105, 100, 241, 2, 73, 121, 5, 25, 27, 99, 100, 25, 113, 102, 79, 191, 114, 99, 141, 66, 202, 232, 226, 172, 177, 3, 142, 43, 50, 98, 77, 122, 100, 29, 179, 50, 162, 42, 10, 50, 163, 140, 253, 92, 85, 100, 37, 123, 232, 62, 93, 76, 124, 241, 232, 152, 184, 146, 228, 248, 248, 178, 177, 164, 203, 136, 174, 200, 203, 138, 53, 141, 138, 26, 121, 194, 243, 117, 98, 87, 241, 114, 122, 197, 148, 220, 106, 105, 109, 129, 36, 35, 241, 192, 176, 113, 9, 21, 159, 229, 199, 155, 15, 142, 79, 183, 74, 63, 11, 57, 103, 151, 67, 206, 88, 56, 63, 61, 124, 36, 53, 206, 55, 173, 77, 143, 54, 75, 35, 46, 70, 14, 5, 140, 235, 178, 206, 139, 185, 191, 34, 49, 221, 162, 154, 146, 103, 189, 246, 214, 185, 53, 49, 215, 21, 152, 223, 192, 232, 115, 197, 47, 239, 46, 37, 121, 9, 86, 221, 53, 73, 181, 210, 212, 64, 218, 207, 176, 228, 34, 40, 44, 78, 74, 234, 76, 255, 229, 100, 92, 124, 181, 42, 47, 222, 26, 85, 16, 111, 205, 167, 253, 217, 41, 53, 83, 231, 166, 214, 102, 78, 79, 174, 190, 108, 255, 221, 130, 96, 39, 149, 9, 241, 39, 195, 163, 34, 191, 27, 147, 29, 229, 251, 76, 200, 217, 220, 14, 231, 45, 228, 124, 153, 113, 230, 110, 83, 11, 60, 187, 5, 160, 219, 162, 157, 156, 36, 140, 68, 250, 63, 240, 176, 20, 168, 226, 71, 30, 239, 143, 115, 10, 209, 35, 142, 235, 211, 162, 43, 135, 103, 196, 153, 164, 143, 146, 46, 39, 57, 9, 22, 253, 184, 100, 227, 29, 249, 9, 230, 89, 180, 143, 204, 64, 153, 31, 111, 28, 154, 151, 100, 161, 236, 64, 202, 184, 228, 156, 93, 14, 57, 99, 225, 252, 244, 184, 172, 164, 70, 74, 142, 127, 73, 163, 247, 22, 58, 158, 146, 130, 185, 107, 178, 121, 64, 118, 146, 57, 41, 63, 190, 82, 122, 85, 23, 155, 237, 59, 215, 191, 156, 208, 57, 102, 229, 91, 216, 212, 156, 26, 105, 63, 39, 217, 20, 159, 147, 106, 190, 85, 58, 150, 105, 190, 3, 72, 107, 18, 151, 147, 108, 250, 132, 23, 231, 41, 136, 175, 150, 210, 246, 27, 198, 118, 126, 170, 123, 53, 146, 221, 207, 121, 237, 148, 36, 171, 42, 49, 209, 249, 237, 195, 213, 200, 200, 136, 114, 150, 26, 219, 253, 11, 195, 204, 24, 211, 166, 244, 81, 149, 158, 12, 234, 74, 146, 26, 105, 98, 241, 35, 140, 210, 130, 96, 218, 232, 66, 159]);
fileData3.push.apply(fileData3, [105, 210, 149, 4, 247, 45, 45, 48, 142, 75, 178, 92, 139, 82, 54, 99, 144, 115, 118, 57, 228, 140, 133, 243, 211, 227, 255, 84, 50, 226, 77, 3, 50, 227, 205, 210, 23, 111, 87, 43, 153, 233, 71, 216, 204, 188, 26, 41, 104, 76, 72, 174, 238, 57, 46, 185, 90, 250, 44, 54, 47, 186, 38, 58, 39, 193, 202, 10, 144, 21, 16, 151, 19, 114, 130, 73, 137, 157, 95, 216, 253, 55, 100, 74, 98, 153, 84, 102, 140, 169, 28, 149, 17, 81, 217, 27, 83, 32, 237, 164, 244, 42, 73, 119, 53, 146, 30, 99, 166, 55, 1, 174, 189, 171, 19, 186, 111, 160, 27, 151, 106, 29, 131, 82, 54, 240, 202, 57, 187, 28, 114, 198, 194, 249, 233, 33, 171, 228, 112, 56, 254, 1, 51, 155, 205, 172, 161, 161, 129, 8, 5, 3, 235, 235, 235, 213, 164, 67, 169, 195, 254, 32, 58, 134, 237, 96, 16, 10, 122, 145, 30, 168, 128, 128, 99, 74, 58, 14, 250, 128, 89, 224, 62, 32, 181, 1, 2, 234, 220, 10, 222, 2, 227, 176, 79, 231, 24, 6, 34, 65, 47, 236, 187, 219, 106, 64, 8, 80, 3, 133, 171, 63, 90, 144, 15, 102, 130, 160, 198, 198, 70, 70, 96, 123, 6, 160, 122, 210, 249, 105, 27, 231, 234, 13, 194, 65, 31, 2, 58, 186, 135, 17, 174, 123, 80, 96, 255, 30, 48, 192, 117, 222, 64, 32, 221, 51, 142, 81, 255, 60, 247, 239, 210, 209, 125, 141, 4, 105, 32, 204, 117, 76, 143, 237, 209, 96, 40, 24, 14, 82, 160, 163, 254, 73, 237, 128, 10, 208, 117, 165, 115, 184, 218, 4, 162, 94, 62, 184, 15, 244, 192, 126, 24, 202, 217, 40, 71, 160, 12, 118, 215, 35, 234, 234, 234, 168, 62, 61, 107, 143, 142, 192, 190, 244, 140, 189, 117, 94, 199, 186, 233, 112, 30, 186, 159, 88, 16, 13, 232, 122, 211, 80, 47, 27, 68, 0, 122, 246, 116, 127, 172, 189, 189, 221, 7, 57, 163, 224, 248, 15, 221, 12, 137, 32, 227, 131, 65, 145, 17, 7, 163, 148, 156, 242, 106, 105, 110, 110, 38, 103, 157, 68, 37, 237, 227, 92, 119, 1, 42, 135, 224, 124, 243, 93, 186, 0, 239, 54, 46, 29, 57, 116, 8, 57, 132, 107, 127, 30, 160, 146, 88, 4, 38, 130, 49, 93, 219, 121, 131, 227, 228, 172, 228, 76, 20, 164, 70, 121, 233, 187, 93, 239, 114, 160, 126, 184, 215, 182, 132, 107, 91, 227, 214, 119, 61, 14, 232, 186, 20, 24, 12, 96, 56, 160, 251, 185, 79, 166, 62, 221, 163, 236, 51, 197, 49, 130, 2, 138, 20, 132, 187, 232, 125, 234, 118, 133, 156, 219, 123, 31, 245, 135, 186, 74, 10, 152, 74, 183, 190, 107, 0, 224, 105, 191, 127, 227, 99, 52, 110, 96, 48, 253, 96, 80, 25, 94, 251, 52, 186, 208, 168, 34, 59, 34, 17, 228, 184, 168, 55, 29, 60, 6, 190, 1, 235, 0, 57, 194, 199, 128, 70, 123, 26, 61, 159, 162, 186, 216, 118, 103, 9, 62, 231, 112, 233, 104, 148, 167, 145, 127, 179, 251, 56, 202, 77, 128, 28, 236, 38, 239, 250, 93, 193, 113, 143, 211, 227, 90, 191, 192, 190, 228, 176, 40, 103, 96, 127, 48, 240, 56, 194, 165, 64, 93, 106, 75, 215, 167, 123, 158, 140, 114, 18, 202, 71, 80, 246, 6, 57, 128, 70, 116, 159, 250, 94, 219, 212, 110, 141, 91, 135, 242, 14, 176, 218, 125, 93, 108, 135, 35, 56, 14, 164, 109, 10, 2, 238, 122, 222, 160, 46, 221, 103, 56, 160, 12, 136, 50, 167, 110, 117, 186, 130, 54, 20, 108, 244, 238, 125, 108, 247, 133, 238, 102, 175, 125, 202, 10, 6, 1, 13, 15, 0, 28, 111, 124, 12, 137, 140, 13, 12, 112, 149, 183, 131, 25, 46, 61, 57, 80, 16, 144, 140, 205, 187, 141, 27, 212, 33, 35, 156, 3, 200, 120, 255, 132, 122, 14, 208, 10, 76, 216, 191, 21, 12, 241, 170, 155, 12, 66, 189, 219, 123, 29, 123, 7, 52, 162, 157, 52, 218, 147, 195, 96, 191, 18, 252, 9, 219, 158, 160, 228, 198, 53, 53, 160, 190, 197, 131, 235, 221, 122, 232, 50, 192, 247, 208, 109, 67, 249, 87, 240, 41, 182, 169, 127, 212, 79, 159, 115, 120, 131, 99, 148, 169, 36, 2, 186, 255, 32, 151, 142, 82, 104, 74, 169, 239, 6, 189, 186, 212, 247, 140, 230, 216, 166, 209, 159, 2, 152, 71, 135, 118, 75, 176, 255, 59, 64, 35, 49, 77, 65, 210, 93, 122, 159, 169, 0, 129, 99, 61, 1, 57, 125, 20, 237, 35, 72, 36, 96, 59, 206, 125, 28, 109, 60, 211, 22, 55, 56, 238, 62, 214, 19, 140, 194, 126, 2, 202, 29, 32, 26, 237, 233, 126, 223, 0, 119, 185, 235, 242, 0, 192, 241, 166, 171, 49, 197, 130, 58, 240, 107, 80, 0, 126, 5, 104, 20, 204, 134, 65, 73, 243, 106, 108, 123, 210, 83, 26, 245, 161, 39, 135, 162, 212, 55, 23, 144, 177, 29, 4, 11, 161, 47, 4, 86, 176, 26, 251, 149, 40, 29, 40, 39, 1, 170, 63, 31, 208, 185, 20, 208, 75, 231, 240, 234, 67, 24, 40, 2, 11, 112, 126, 114, 168, 71, 193, 69, 240, 75, 215, 113, 66, 154, 203, 187, 80, 33, 8, 168, 41, 16, 224, 60, 215, 98, 159, 250, 237, 62, 23, 93, 187, 6, 80, 253, 145, 128, 166, 21, 238, 181, 7, 207, 125, 123, 3, 61, 205, 245, 169, 222, 54, 148, 67, 80, 74, 78, 135, 82, 139, 146, 116, 90, 175, 186, 132, 119, 223, 105, 13, 132, 156, 157, 178, 0, 90, 83, 145, 142, 163, 13, 61, 207, 219, 168, 14, 250, 57, 177, 169, 169, 137, 210, 252, 72, 247, 57, 188, 218, 95, 3, 164, 254, 185, 234, 210, 52, 236, 73, 148, 148, 21, 208, 179, 162, 103, 227, 25, 233, 93, 109, 164, 235, 227, 89, 13, 5, 39, 80, 103, 13, 245, 17, 188, 139, 99, 91, 1, 61, 247, 247, 221, 245, 121, 0, 224, 120, 227, 49, 36, 2, 134, 66, 208, 232, 65, 139, 114, 75, 193, 90, 176, 23, 208, 72, 26, 232, 170, 67, 6, 234, 25, 225, 92, 115, 254, 32, 232, 110, 6, 39, 192, 57, 215, 54, 165, 195, 86, 64, 35, 224, 92, 240, 53, 120, 8, 80, 251, 7, 129, 212, 30, 231, 37, 84, 174, 109, 90, 176, 35, 39, 166, 81, 159, 166, 17, 52, 239, 39, 163, 167, 140, 65, 50, 118, 56, 207, 92, 92, 47, 222, 125, 125, 210, 161, 29, 165, 188, 20, 168, 50, 193, 109, 224, 101, 64, 199, 222, 3, 148, 77, 172, 7, 161, 181, 181, 181, 158, 123, 245, 134, 234, 226, 56, 45, 40, 210, 26, 2, 109, 111, 128, 110, 11, 202, 165, 224, 118, 240, 4, 120, 29, 44, 185, 68, 123, 201, 9, 81, 210, 125, 83, 127, 54, 162, 220, 7, 40, 208, 81, 70, 68, 253, 95, 72, 117, 112, 76, 135, 254, 191, 141, 253, 8, 87, 27, 239, 243, 208, 52, 229, 33, 56, 242, 74, 148, 82, 166, 129, 50, 11, 60, 5, 221, 187, 40, 147, 80, 39, 0, 184, 175, 71, 104, 160, 167, 53, 143, 121, 224, 54, 64, 58, 202, 226, 118, 187, 142, 125, 9, 254, 130, 237, 2, 106, 195, 3, 0, 199, 27, 183, 225, 41, 96, 148, 238, 249, 50, 173, 92, 223, 15, 40, 149, 165, 17, 237, 45, 112, 0, 60, 5, 210, 1, 173, 218, 75, 198, 71, 198, 70, 184, 219, 129, 27, 192, 17, 156, 171, 21, 142, 74, 107, 0, 196, 113, 208, 15, 120, 27, 122, 0, 218, 73, 139, 84, 174, 115, 232, 92, 250, 223, 2, 27, 32, 195, 37, 35, 166, 197, 63, 239, 17, 119, 5, 206, 157, 136, 178, 91, 250, 76, 160, 13, 57, 48, 141, 174, 52, 141, 160, 128, 240, 27, 236, 255, 19, 144, 243, 210, 90, 196, 13, 84, 15, 165, 79, 59, 218, 199, 113, 37, 144, 70, 87, 148, 121, 128, 130, 0, 245, 123, 36, 156, 47, 9, 251, 159, 131, 157, 84, 215, 187, 61, 182, 41, 163, 113, 103, 71, 203, 192, 80, 240, 36, 168, 67, 125, 154, 254, 28, 70, 185, 31, 72, 235, 19, 216, 167, 117, 132, 23, 64, 130, 107, 95, 58, 15, 142, 235, 189, 182, 105, 186, 112, 63, 240, 164, 252, 216, 214, 162, 31, 139, 188, 246, 61, 116, 57, 15, 101, 77, 20, 96, 223, 7, 235, 1, 101, 36, 180, 79, 65, 117, 4, 15, 0, 28, 111, 60, 198, 3, 135, 149, 2, 0, 12, 136, 140, 142, 82, 95, 122, 173, 70, 243, 74, 202, 6, 200, 169, 104, 209, 138, 24, 0, 67, 148, 218, 185, 234, 147, 177, 210, 220, 179, 47, 237, 219, 108, 54, 122, 253, 213, 138, 253, 50, 240, 4, 176, 195, 105, 223, 1, 212, 150, 166, 24, 210, 226, 20, 74, 41, 163, 32, 220, 231, 131, 142, 28, 111, 36, 109, 163, 36, 199, 162, 243, 210, 188, 91, 154, 183, 131, 87, 92, 245, 36, 71, 37, 29, 234, 81, 186, 27, 231, 218, 158, 12, 40, 64, 208, 2, 226, 39, 96, 34, 246, 191, 67, 73, 211, 19, 26, 133, 165, 17, 28, 165, 148, 113, 92, 10, 180, 121, 25, 208, 226, 31, 165, 221, 180, 0, 72, 175, 228, 222, 6, 107, 228, 234, 187, 65, 61, 74, 225, 169, 30, 93, 187, 13, 28, 5, 207, 2, 202, 2, 232, 188, 212, 143, 45, 184, 95, 186, 159, 225, 174, 54, 82, 91, 28, 243, 121, 51, 0, 253, 84, 208, 31, 122, 1, 207, 142, 246, 41, 40, 254, 3, 229, 120, 96, 240, 174, 75, 224, 24, 189, 138, 164, 123, 44, 1, 77, 128, 94, 135, 210, 57, 232, 25, 80, 214, 69, 139, 151, 155, 120, 0, 224, 120, 227, 99, 68, 110, 96, 40, 4, 45, 32, 209, 188, 153, 140, 235, 70, 148, 148, 82, 74, 11, 82, 40, 189, 23, 190, 40, 35, 136, 7, 238, 125, 50, 52, 10, 0, 31, 130, 235, 1, 77, 9, 8, 154, 203, 211, 185, 164, 87, 114, 180, 77, 184, 207, 227, 6, 58, 50, 86, 186, 46, 57, 127, 49, 160, 209, 146, 206, 79, 139, 122, 47, 186, 234, 72, 239, 232, 221, 224, 156, 193, 208, 209, 155, 5, 105, 101, 29, 20, 2, 74, 191, 41, 99, 249, 39, 120, 0, 60, 2, 71, 146, 210, 238, 43, 129, 243, 173, 2, 17, 128, 174, 61, 140, 116, 40, 221, 105, 183, 123, 46, 238, 61, 247, 239, 218, 158, 50, 28, 146, 70, 28, 163, 64, 72, 83, 20, 90, 156, 163, 105, 1, 141, 208, 212, 166, 79, 215, 246, 20, 8, 41, 56, 184, 116, 82, 192, 69, 27, 90, 204, 123, 15, 37, 125, 71, 32, 173, 43, 184, 219, 185, 129, 142, 166, 96, 148, 169, 209, 2, 34, 101, 77, 244, 236, 41, 123, 153, 137, 118, 20, 196, 105, 141, 38, 18, 76, 229, 1, 128, 227, 77, 55, 99, 114, 25, 20, 165, 163, 81, 32, 214, 181, 79, 6, 182, 3, 60, 78, 251, 48, 40, 9, 215, 49, 239, 118, 238, 0, 65, 35, 29, 181, 209, 195, 233, 114, 154, 155, 155, 41, 29, 165, 17, 241, 78, 64, 11, 129, 52, 98, 119, 29, 241, 8, 154, 195, 83, 26, 77, 153, 66, 22, 32, 67, 174, 6, 123, 112, 61, 10, 6, 7, 112, 62, 250, 224, 200, 179, 18, 143, 109, 234, 11, 141, 142, 61, 188, 116, 31, 1, 58, 23, 5, 177, 231, 221, 122, 215, 177, 30, 112, 40, 207, 180, 66, 14, 156, 139, 230, 253, 143, 1, 26, 249, 61, 247, 234, 58, 70, 175, 67, 251, 226, 60, 62, 109, 188, 193, 113, 186, 46, 245, 155, 250, 124, 47, 181, 65, 89, 132, 190, 147, 131, 82, 128, 164, 15, 139, 188, 95, 219, 81, 214, 21, 128, 126, 209, 135, 86, 210, 61, 1, 10, 0, 131, 176, 255, 34, 152, 132, 99, 158, 183, 1, 222, 80, 93, 58, 23, 74, 90, 251, 144, 50, 27, 210, 129, 193, 128, 70, 255, 96, 92, 151, 126, 150, 52, 21, 24, 201, 3, 0, 199, 27, 57, 131, 186, 14, 188, 4, 104, 101, 157, 86, 159, 7, 187, 244, 148, 234, 147, 33, 249, 56, 174, 27, 232, 105, 113, 138, 210, 83, 105, 31, 6, 235, 1, 58, 74, 79, 221, 211, 2, 90, 75, 144, 86, 215, 187, 180, 167, 180, 120, 10, 88, 138, 235, 42, 93, 237, 232, 59, 130, 199, 97, 196, 244, 118, 97, 49, 144, 250, 210, 21, 232, 125, 222, 239, 99, 159, 250, 77, 78, 71, 65, 132, 82, 98, 233, 75, 64, 119, 93, 156, 175, 219, 61, 64, 79, 80, 31, 60, 199, 92, 253, 39, 231, 148, 214, 40, 174, 22, 212, 167, 197, 76, 90, 196, 164, 5, 85, 58, 39, 173, 9, 236, 35, 61, 184, 161, 182, 182, 214, 167, 191, 208, 209, 117, 20, 96, 48, 240, 124, 108, 132, 54, 244, 69, 34, 49, 13, 122, 159, 143, 131, 188, 193, 113, 10, 22, 148, 53, 121, 190, 116, 164, 18, 72, 63, 63, 64, 107, 43, 244, 252, 230, 241, 0, 192, 241, 166, 155, 49, 193, 72, 200, 144, 104, 245, 157, 82, 241, 24, 64, 139, 123, 201, 238, 227, 100, 172, 222, 245, 221, 160, 142, 187, 84, 194, 129, 233, 53, 216, 22, 32, 141, 180, 40, 201, 9, 210, 209, 246, 146, 70, 76, 160, 142, 174, 169, 169, 73, 218, 198, 57, 70, 99, 191, 219, 183, 2, 56, 199, 101, 231, 239, 4, 218, 81, 230, 65, 247, 65, 65, 128, 250, 255, 0, 246, 101, 3, 87, 87, 80, 215, 253, 41, 52, 125, 11, 176, 160, 235, 113, 57, 232, 153, 160, 157, 167, 95, 216, 166, 160, 145, 69, 78, 141, 109, 26, 157, 103, 97, 191, 0, 244, 243, 110, 215, 21, 212, 167, 213, 124, 202, 14, 146, 193, 88, 210, 161, 204, 67, 251, 81, 56, 230, 249, 58, 177, 43, 56, 238, 46, 105, 49, 87, 90, 91, 112, 237, 15, 3, 159, 129, 131, 208, 75, 63, 11, 30, 0, 56, 222, 200, 26, 146, 27, 24, 159, 123, 244, 39, 67, 190, 146, 243, 82, 29, 122, 39, 127, 173, 205, 102, 139, 129, 35, 211, 168, 125, 197, 47, 239, 46, 5, 218, 210, 232, 229, 233, 19, 206, 155, 11, 104, 20, 243, 249, 16, 167, 43, 56, 78, 11, 150, 148, 169, 228, 211, 62, 218, 76, 5, 153, 224, 178, 253, 119, 227, 190, 30, 238, 61, 28, 78, 55, 6, 101, 183, 227, 238, 58, 93, 244, 116, 255, 221, 166, 22, 208, 45, 0, 221, 22, 237, 228, 160, 107, 81, 208, 160, 109, 148, 253, 209, 78, 64, 73, 111, 54, 40, 19, 146, 62, 74, 186, 28, 168, 67, 193, 134, 190, 62, 156, 69, 251, 104, 71, 65, 156, 222, 74, 80, 48, 148, 50, 46, 30, 0, 56, 222, 200, 26, 146, 27, 24, 16, 25, 245, 37, 141, 222, 27, 175, 122, 244, 250, 142, 222, 87, 75, 175, 234, 80, 94, 213, 200, 75, 80, 123, 202, 0, 224, 172, 238, 125, 90, 252, 187, 213, 181, 77, 134, 45, 173, 73, 92, 14, 212, 161, 108, 131, 74, 41, 109, 119, 159, 235, 106, 129, 195, 73, 37, 218, 211, 252, 223, 243, 166, 226, 74, 80, 59, 114, 224, 174, 122, 232, 54, 1, 79, 6, 117, 37, 232, 28, 132, 235, 124, 62, 211, 164, 43, 129, 62, 187, 23, 24, 233, 91, 10, 217, 140, 129, 7, 0, 142, 55, 221, 12, 228, 63, 9, 140, 144, 130, 129, 244, 197, 219, 213, 66, 6, 12, 167, 149, 130, 6, 182, 233, 211, 216, 40, 215, 118, 52, 29, 115, 227, 221, 166, 43, 87, 83, 231, 255, 26, 247, 245, 225, 196, 163, 0, 253, 30, 129, 246, 199, 4, 35, 10, 2, 63, 246, 30, 92, 247, 77, 153, 211, 24, 32, 27, 120, 121, 0, 224, 120, 35, 171, 228, 248, 15, 60, 0, 248, 55, 62, 6, 192, 241, 111, 228, 12, 132, 243, 211, 134, 125, 247, 221, 119, 174, 63, 22, 229, 43, 251, 152, 200, 222, 103, 162, 242, 15, 76, 188, 234, 191, 233, 215, 85, 214, 11, 182, 129, 59, 117, 45, 179, 78, 220, 161, 98, 199, 22, 56, 79, 243, 210, 176, 211, 131, 63, 11, 59, 45, 123, 206, 167, 180, 135, 130, 87, 43, 10, 7, 185, 118, 89, 150, 32, 170, 119, 10, 69, 83, 155, 159, 115, 254, 85, 111, 113, 237, 104, 54, 174, 255, 69, 246, 140, 238, 156, 180, 223, 85, 118, 51, 81, 250, 27, 122, 171, 153, 40, 253, 17, 206, 141, 216, 223, 196, 68, 233, 239, 239, 111, 102, 45, 84, 92, 81, 158, 101, 14, 169, 92, 201, 138, 149, 47, 179, 198, 33, 107, 88, 67, 255, 87, 217, 213, 255, 113, 211, 77, 172, 173, 223, 38, 118, 38, 116, 19, 107, 15, 223, 168, 182, 100, 108, 81, 159, 19, 86, 132, 159, 14, 216, 38, 136, 151, 253, 95, 4, 110, 217, 32, 136, 82, 185, 147, 181, 9, 31, 176, 139, 210, 117, 215, 107, 241, 131, 186, 74, 217, 161, 104, 145, 254, 58, 113, 243, 51, 253, 5, 160, 0, 236, 104, 244, 249, 110, 207, 187, 180, 180, 84, 66, 206, 40, 56, 254, 131, 79, 0, 128, 3, 185, 182, 24, 123, 67, 225, 232, 73, 229, 86, 93, 115, 136, 164, 128, 20, 122, 29, 247, 150, 229, 172, 141, 221, 32, 180, 104, 159, 23, 90, 251, 190, 198, 218, 146, 55, 179, 182, 59, 238, 96, 23, 116, 112, 62, 246, 150, 166, 237, 213, 221, 250, 214, 87, 63, 210, 180, 61, 243, 166, 94, 188, 9, 206, 25, 188, 188, 255, 233, 248, 63, 14, 62, 107, 176, 142, 56, 47, 181, 95, 143, 122, 27, 13, 237, 234, 183, 152, 111, 96, 216, 28, 232, 24, 189, 54, 180, 118, 188, 107, 87, 146, 135, 84, 162, 112, 155, 225, 76, 55, 131, 254, 35, 2, 213, 50, 151, 227, 175, 81, 55, 73, 255, 130, 123, 141, 210, 22, 140, 62, 72, 247, 241, 42, 19, 175, 248, 231, 196, 73, 30, 96, 98, 224, 50, 86, 39, 5, 161, 245, 66, 243, 220, 151, 244, 181, 127, 88, 208, 175, 112, 204, 248, 225, 7, 131, 158, 99, 23, 186, 253, 145, 206, 191, 163, 239, 116, 159, 110, 121, 133, 137, 115, 168, 92, 195, 218, 122, 172, 10, 174, 73, 164, 237, 101, 172, 37, 124, 73, 88, 77, 12, 109, 187, 229, 65, 118, 86, 246, 15, 126, 110, 211, 182, 171, 55, 224, 124, 219, 7, 92, 20, 118, 40, 206, 132, 252, 154, 157, 11, 248, 144, 117, 92, 85, 223, 73, 214, 6, 29, 147, 254, 231, 162, 183, 172, 214, 217, 164, 127, 219, 70, 242, 196, 48, 231, 223, 37, 36, 231, 183, 254, 243, 111, 178, 70, 193, 241, 31, 152, 248, 214, 175, 36, 131, 32, 163, 115, 203, 43, 138, 166, 107, 86, 133, 54, 74, 163, 207, 146, 176, 234, 145, 155, 212, 141, 179, 87, 7, 52, 12, 95, 22, 94, 31, 244, 150, 87, 61, 183, 44, 103, 231, 61, 255, 204, 130, 228, 109, 161, 37, 239, 73, 221, 217, 69, 180, 253, 176, 162, 129, 253, 76, 89, 171, 249, 21, 115, 12, 218, 173, 108, 189, 103, 151, 182, 229, 193, 245, 61, 29, 115, 54, 133, 183, 246, 67, 0, 144, 156, 0, 35, 53, 219, 168, 111, 243, 252, 233, 236, 95, 41, 26, 30, 216, 174, 110, 220, 176, 91, 223, 180, 112, 163, 161, 77, 170, 179, 59, 208, 250, 224, 7, 138, 166, 187, 22, 10, 226, 176, 85, 131, 126, 80, 175, 26, 226, 28, 21, 255, 140, 182, 8, 92, 218, 87, 153, 163, 7, 157, 103, 147, 202, 22, 189, 70, 95, 243, 210, 23, 216, 126, 69, 83, 255, 232, 155, 174, 145, 127, 27, 19, 135, 194, 81, 101, 157, 174, 171, 172, 100, 246, 137, 219, 84, 13, 55, 110, 65, 6, 244, 179, 190, 197, 119, 111, 83, 54, 109, 89, 169, 104, 142, 125, 202, 80, 149, 191, 133, 249, 142, 198, 56, 47, 5, 128, 62, 184, 246, 232, 245, 172, 237, 231, 120, 142, 79, 144, 254, 21, 214, 150, 176, 89, 215, 42, 5, 162, 117, 76, 12, 89, 197, 26, 103, 211, 182, 91, 150, 179, 22, 79, 96, 245, 126, 246, 175, 179, 86, 205, 26, 101, 235, 168, 151, 153, 120, 251, 22, 101, 139, 207, 127, 3, 250, 64, 104, 235, 150, 137, 204, 101, 167, 216, 51, 74, 135, 102, 139, 214, 168, 191, 77, 104, 26, 180, 56, 248, 240, 236, 151, 52, 149, 61, 55, 4, 21, 253, 124, 189, 198, 120, 215, 43, 130, 189, 224, 173, 112, 147, 231, 47, 4, 111, 208, 54, 73, 193, 132, 2, 192, 137, 106, 139, 172, 81, 112, 252, 135, 110, 83, 128, 117, 234, 134, 204, 229, 1, 141, 107, 182, 41, 76, 121, 47, 41, 155, 11, 214, 49, 187, 114, 13, 179, 11, 11, 130, 106, 217, 26, 93, 83, 95, 185, 44, 96, 157, 112, 222, 243, 183, 250, 87, 98, 36, 222, 174, 16, 63, 94, 47, 180, 74, 255, 199, 239, 67, 38, 170, 95, 209, 136, 215, 237, 84, 181, 124, 181, 129, 181, 220, 186, 6, 163, 244, 139, 24, 141, 95, 232, 50, 181, 216, 16, 96, 79, 88, 173, 177, 44, 216, 37, 212, 255, 122, 141, 208, 244, 216, 58, 214, 234, 58, 130, 180, 60, 164, 112, 228, 54, 125, 227, 11, 174, 93, 31, 217, 197, 206, 179, 205, 202, 166, 17, 79, 234, 235, 164, 63, 225, 189, 81, 16, 215, 45, 97, 149, 67, 87, 179, 198, 39, 118, 177, 106, 233, 95, 153, 145, 236, 84, 58, 250, 108, 83, 52, 77, 64, 38, 16, 176, 19, 129, 224, 55, 50, 247, 225, 45, 75, 213, 214, 235, 158, 50, 84, 207, 94, 169, 108, 29, 254, 18, 171, 127, 142, 116, 47, 178, 178, 240, 153, 131, 142, 249, 140, 228, 36, 155, 153, 40, 253, 255, 4, 239, 76, 0, 247, 154, 179, 150, 217, 63, 88, 205, 90, 2, 112, 207, 125, 151, 168, 106, 247, 44, 83, 139, 15, 47, 209, 181, 79, 95, 203, 90, 50, 214, 176, 22, 207, 148, 224, 118, 180, 219, 96, 104, 15, 196, 121, 60, 207, 4, 217, 144, 225, 25, 102, 147, 254, 145, 234, 54, 60, 139, 167, 89, 75, 250, 70, 214, 146, 242, 91, 100, 4, 222, 215, 113, 203, 154, 176, 111, 66, 54, 50, 135, 20, 68, 87, 8, 117, 15, 111, 81, 217, 114, 221, 163, 189, 183, 108, 208, 216, 66, 14, 161, 253, 233, 253, 245, 236, 143, 38, 121, 163, 224, 248, 15, 172, 121, 215, 83, 46, 211, 112, 202, 186, 190, 77, 75, 86, 5, 52, 88, 87, 244, 110, 122, 98, 213, 128, 186, 7, 159, 212, 138, 158, 20, 124, 141, 190, 46, 161, 107, 0, 120, 89, 117, 46, 96, 35, 59, 235, 249, 111, 52, 191, 81, 136, 211, 49, 247, 255, 242, 101, 69, 155, 246, 37, 118, 38, 242, 121, 214, 114, 252, 25, 38, 222, 5, 163, 149, 254, 61, 118, 87, 65, 202, 204, 86, 11, 205, 210, 200, 252, 156, 96, 55, 172, 20, 26, 34, 151, 106, 11, 225, 84, 237, 236, 105, 221, 105, 197, 107, 24, 17, 23, 5, 149, 47, 221, 200, 42, 38, 83, 157, 152, 17, 190, 35, 48, 201, 107, 72, 167, 17, 60, 30, 223, 168, 178, 79, 132, 115, 125, 249, 26, 107, 250, 228, 77, 214, 212, 176, 89, 41, 78, 123, 85, 213, 114, 215, 38, 141, 125, 206, 162, 33, 77, 158, 209, 127, 125, 111, 27, 219, 33, 147, 13, 44, 101, 173, 35, 54, 10, 141, 19, 55, 40, 235, 98, 214, 192, 233, 182, 34, 96, 109, 96, 173, 211, 94, 98, 205, 27, 183, 50, 155, 84, 255, 121, 125, 245, 124, 169, 178, 75, 224, 180, 225, 111, 43, 90, 103, 33, 3, 232, 183, 88, 217, 56, 224, 149, 94, 199, 36, 39, 222, 14, 103, 126, 157, 53, 191, 182, 65, 101, 63, 188, 73, 213, 244, 217, 75, 204, 122, 110, 55, 179, 95, 39, 53, 146, 145, 27, 89, 53, 91, 203, 196, 105, 207, 176, 86, 233, 127, 28, 182, 75, 207, 165, 238, 201, 173, 134, 118, 221, 26, 230, 88, 139, 108, 36, 106, 19, 250, 242, 38, 107, 143, 167, 99, 151, 147, 29, 204, 246, 244, 171, 42, 187, 110, 72, 216, 15, 46, 13, 158, 81, 192, 89, 245, 6, 253, 233, 161, 219, 53, 98, 244, 70, 93, 147, 208, 81, 178, 139, 175, 1, 112, 24, 59, 183, 247, 99, 164, 224, 198, 224, 53, 108, 143, 100, 40, 239, 104, 218, 6, 237, 86, 180, 167, 111, 96, 117, 24, 197, 44, 154, 205, 58, 155, 199, 104, 95, 212, 57, 226, 23, 247, 169, 30, 186, 214, 53, 210, 220, 171, 63, 135, 81, 239, 98, 191, 167, 217, 153, 59, 22, 41, 28, 203, 54, 41, 197, 87, 222, 83, 183, 28, 89, 167, 170, 219, 245, 75, 245, 89, 97, 45, 107, 186, 115, 9, 179, 111, 124, 206, 203, 96, 183, 179, 54, 159, 145, 127, 5, 166, 8, 47, 177, 11, 210, 246, 203, 26, 99, 175, 37, 170, 154, 135, 166, 10, 167, 49, 2, 151, 163, 125, 243, 100, 140, 158, 239, 172, 99, 13, 223, 190, 206, 218, 11, 222, 102, 45, 99, 16, 72, 250, 99, 68, 84, 172, 236, 121, 193, 231, 60, 239, 176, 66, 229, 122, 214, 254, 216, 171, 172, 237, 217, 55, 217, 217, 7, 222, 96, 162, 105, 147, 162, 245, 240, 58, 165, 205, 184, 86, 101, 111, 196, 232, 56, 196, 85, 149, 173, 237, 97, 239, 253, 118, 23, 39, 122, 142, 181, 5, 222, 141, 108, 133, 182, 215, 104, 234, 158, 221, 133, 160, 182, 82, 127, 158, 45, 97, 173, 75, 144, 177, 252, 118, 57, 107, 148, 210, 249, 107, 135, 29, 140, 196, 72, 44, 253, 203, 50, 92, 67, 26, 245, 223, 83, 58, 2, 214, 177, 182, 79, 118, 42, 27, 119, 189, 105, 104, 222, 180, 137, 181, 177, 55, 194, 206, 134, 188, 46, 180, 196, 190, 16, 32, 54, 60, 17, 36, 54, 174, 103, 13, 231, 54, 104, 27, 30, 166, 118, 151, 146, 237, 172, 90, 120, 140, 97, 218, 195, 196, 225, 228, 228, 79, 49, 199, 47, 49, 141, 72, 94, 201, 106, 165, 108, 138, 100, 51, 107, 211, 188, 6, 188, 179, 128, 221, 170, 34, 197, 34, 85, 69, 193, 78, 214, 52, 23, 83, 158, 135, 118, 177, 150, 175, 127, 223, 167, 213, 51, 45, 195, 116, 228, 225, 215, 153, 40, 254, 10, 207, 228, 237, 128, 22, 233, 191, 18, 243, 69, 64, 14, 33, 77, 1, 54, 50, 179, 244, 95, 124, 72, 150, 178, 150, 65, 171, 152, 35, 249, 113, 214, 196, 94, 101, 118, 205, 46, 133, 35, 222, 117, 136, 189, 28, 208, 124, 235, 210, 176, 154, 160, 245, 204, 33, 205, 41, 17, 0, 132, 213, 66, 91, 208, 223, 242, 155, 217, 199, 105, 205, 108, 147, 174, 238, 166, 245, 202, 150, 51, 175, 134, 56, 62, 90, 203, 218, 244, 112, 138, 155, 182, 232, 170, 191, 135, 195, 246, 221, 204, 90, 3, 87, 40, 197, 119, 215, 235, 91, 223, 219, 164, 116, 60, 36, 157, 176, 139, 44, 83, 52, 174, 127, 145, 53, 60, 125, 47, 179, 178, 157, 204, 118, 211, 235, 130, 120, 243, 122, 85, 203, 224, 229, 161, 29, 232, 139, 109, 249, 70, 67, 245, 71, 111, 40, 196, 164, 183, 213, 173, 125, 151, 13, 235, 158, 9, 184, 101, 9, 59, 71, 171, 255, 211, 182, 51, 199, 35, 47, 234, 44, 111, 172, 81, 59, 138, 190, 97, 162, 39, 0, 44, 237, 105, 239, 189, 62, 200, 238, 179, 110, 241, 60, 238, 227, 46, 38, 6, 191, 200, 106, 198, 191, 170, 176, 253, 115, 61, 19, 179, 159, 98, 205, 97, 143, 49, 199, 184, 197, 204, 158, 176, 140, 217, 54, 109, 84, 52, 222, 184, 90, 217, 116, 243, 18, 230, 92, 187, 240, 150, 141, 42, 219, 195, 24, 165, 231, 109, 82, 55, 31, 69, 169, 216, 162, 110, 79, 223, 166, 180, 205, 92, 172, 118, 236, 90, 198, 154, 35, 31, 209, 59, 126, 3, 118, 184, 170, 227, 153, 215, 75, 193, 230, 65, 86, 140, 224, 83, 41, 233, 72, 54, 177, 10, 96, 123, 254, 53, 100, 80, 207, 178, 154, 148, 205, 234, 214, 130, 85, 172, 254, 47, 184, 159, 110, 255, 160, 244, 54, 86, 194, 214, 177, 230, 240, 101, 106, 203, 245, 120, 86, 1, 139, 3, 107, 67, 215, 132, 154, 51, 183, 170, 155, 183, 110, 213, 181, 38, 110, 13, 110, 82, 126, 140, 64, 241, 10, 115, 60, 179, 129, 137, 79, 238, 20, 196, 94, 219, 21, 45, 25, 212, 150, 156, 255, 235, 207, 222, 147, 53, 10, 142, 255, 32, 5, 128, 213, 204, 185, 14, 176, 130, 137, 218, 165, 10, 251, 193, 21, 218, 134, 61, 175, 134, 214, 246, 89, 195, 108, 186, 245, 236, 244, 152, 85, 76, 236, 181, 66, 219, 244, 208, 82, 109, 131, 244, 95, 126, 150, 51, 187, 10, 142, 209, 205, 9, 104, 84, 90, 171, 22, 171, 23, 49, 219, 190, 87, 216, 185, 228, 221, 202, 182, 83, 27, 84, 77, 101, 187, 213, 142, 181, 152, 147, 63, 180, 73, 211, 114, 20, 215, 16, 54, 40, 28, 51, 80, 215, 231, 127, 252, 147, 188, 196, 170, 3, 159, 117, 57, 195, 175, 89, 219, 47, 126, 173, 109, 220, 187, 89, 219, 248, 207, 221, 138, 198, 235, 214, 177, 214, 169, 27, 117, 141, 159, 173, 9, 59, 211, 237, 186, 93, 229, 115, 4, 175, 79, 153, 35, 15, 198, 62, 112, 173, 186, 241, 215, 91, 20, 173, 117, 191, 101, 142, 8, 215, 97, 89, 89, 17, 120, 154, 45, 23, 106, 67, 145, 102, 235, 49, 2, 43, 119, 96, 20, 95, 193, 234, 250, 46, 85, 53, 165, 111, 19, 236, 253, 158, 103, 205, 170, 117, 204, 49, 115, 33, 115, 12, 88, 214, 101, 33, 144, 228, 55, 204, 170, 68, 176, 124, 117, 137, 186, 125, 221, 106, 220, 227, 10, 109, 107, 216, 115, 154, 246, 235, 145, 65, 60, 185, 146, 53, 106, 151, 178, 70, 97, 57, 115, 120, 254, 63, 225, 50, 102, 22, 86, 51, 231, 127, 56, 218, 193, 138, 16, 176, 42, 85, 75, 93, 163, 250, 38, 214, 252, 248, 14, 214, 62, 101, 45, 179, 25, 182, 8, 226, 196, 21, 172, 241, 175, 143, 176, 163, 221, 254, 213, 215, 18, 214, 192, 94, 87, 150, 171, 183, 43, 173, 145, 43, 180, 198, 59, 126, 25, 118, 92, 191, 73, 221, 244, 204, 107, 74, 113, 59, 130, 238, 115, 155, 149, 150, 209, 47, 225, 156, 52, 231, 119, 203, 38, 65, 148, 254, 211, 18, 207, 0, 56, 4, 219, 109, 47, 149, 12, 131, 100, 57, 2, 192, 18, 133, 237, 253, 229, 186, 134, 45, 43, 67, 79, 75, 255, 201, 246, 9, 118, 90, 179, 73, 239, 120, 98, 121, 96, 147, 233, 101, 109, 211, 13, 75, 53, 162, 231, 255, 240, 119, 21, 204, 231, 67, 94, 85, 136, 231, 150, 48, 91, 241, 141, 236, 124, 194, 86, 85, 187, 125, 189, 82, 44, 253, 141, 193, 62, 122, 51, 107, 81, 45, 103, 77, 203, 224, 4, 111, 98, 116, 189, 19, 251, 62, 35, 176, 183, 252, 85, 211, 34, 236, 96, 45, 139, 118, 6, 138, 37, 171, 4, 219, 154, 183, 148, 245, 31, 110, 165, 224, 194, 90, 166, 99, 206, 253, 248, 154, 160, 179, 174, 154, 228, 4, 167, 149, 175, 179, 154, 104, 215, 174, 36, 111, 51, 123, 232, 123, 76, 140, 219, 202, 90, 85, 175, 42, 207, 6, 190, 201, 196, 244, 215, 153, 61, 241, 53, 69, 231, 156, 184, 171, 60, 207, 78, 75, 229, 98, 60, 131, 151, 89, 195, 68, 56, 142, 98, 45, 59, 163, 92, 18, 80, 179, 117, 157, 182, 118, 207, 18, 118, 209, 103, 202, 113, 41, 89, 136, 126, 62, 167, 105, 123, 121, 21, 107, 249, 219, 26, 117, 203, 172, 101, 1, 13, 15, 45, 87, 182, 236, 94, 141, 233, 11, 70, 225, 112, 239, 212, 221, 91, 118, 224, 122, 75, 152, 49, 242, 97, 118, 40, 228, 21, 102, 139, 64, 16, 26, 9, 232, 13, 193, 220, 199, 153, 173, 244, 86, 86, 159, 227, 170, 42, 43, 235, 89, 203, 208, 13, 66, 227, 203, 184, 231, 152, 213, 65, 71, 175, 93, 21, 124, 120, 232, 118, 193, 54, 30, 217, 136, 176, 69, 176, 247, 222, 166, 176, 73, 223, 67, 108, 209, 214, 13, 165, 55, 57, 60, 0, 112, 8, 246, 219, 63, 255, 70, 50, 160, 43, 201, 171, 66, 179, 226, 131, 240, 79, 21, 27, 131, 109, 186, 229, 193, 103, 52, 15, 184, 62, 152, 241, 22, 50, 238, 141, 204, 182, 237, 85, 214, 244, 218, 31, 18, 108, 202, 87, 148, 246, 239, 158, 103, 77, 169, 112, 248, 5, 64, 50, 224, 77, 172, 69, 253, 110, 151, 17, 244, 126, 85, 165, 240, 60, 43, 119, 237, 97, 14, 174, 42, 15, 132, 67, 108, 125, 85, 231, 120, 97, 163, 202, 242, 231, 117, 202, 194, 243, 155, 5, 241, 6, 58, 246, 26, 107, 233, 251, 42, 107, 77, 92, 193, 126, 144, 94, 137, 189, 206, 170, 12, 191, 102, 229, 5, 180, 237, 45, 212, 151, 75, 57, 155, 156, 188, 204, 156, 65, 101, 5, 179, 231, 99, 228, 125, 24, 163, 235, 60, 218, 127, 81, 219, 172, 91, 169, 175, 91, 124, 95, 168, 197, 176, 130, 29, 71, 63, 43, 125, 222, 201, 239, 84, 22, 178, 215, 130, 78, 25, 150, 121, 93, 11, 65, 100, 214, 171, 66, 203, 95, 150, 171, 90, 194, 126, 165, 110, 88, 254, 166, 224, 168, 89, 44, 180, 23, 192, 161, 199, 194, 161, 7, 186, 170, 117, 147, 199, 88, 245, 237, 15, 178, 67, 158, 247, 248, 27, 48, 61, 88, 207, 106, 230, 222, 203, 154, 78, 60, 201, 170, 223, 89, 203, 26, 111, 198, 61, 93, 246, 191, 35, 211, 61, 175, 83, 90, 191, 125, 69, 101, 217, 191, 81, 16, 123, 224, 57, 186, 142, 56, 101, 171, 186, 124, 212, 22, 141, 89, 39, 57, 255, 215, 101, 178, 70, 193, 241, 31, 46, 249, 37, 160, 183, 172, 101, 142, 208, 197, 218, 150, 27, 86, 105, 91, 187, 253, 139, 234, 215, 130, 29, 62, 142, 70, 219, 244, 94, 155, 202, 63, 38, 54, 235, 42, 149, 137, 12, 169, 237, 214, 231, 153, 163, 97, 49, 107, 94, 190, 136, 137, 189, 93, 85, 37, 25, 207, 46, 176, 167, 213, 21, 194, 243, 186, 66, 207, 123, 113, 146, 13, 172, 205, 240, 38, 107, 211, 194, 128, 213, 235, 152, 24, 179, 78, 16, 61, 255, 97, 247, 13, 214, 130, 185, 111, 155, 148, 78, 191, 196, 206, 179, 197, 170, 139, 210, 232, 70, 130, 128, 208, 127, 23, 179, 191, 243, 58, 107, 252, 205, 171, 204, 118, 27, 233, 22, 246, 56, 29, 255, 112, 192, 185, 91, 158, 14, 111, 115, 126, 82, 120, 9, 185, 7, 129, 105, 5, 115, 140, 88, 203, 10, 145, 89, 216, 23, 239, 212, 182, 43, 87, 178, 147, 108, 11, 59, 45, 77, 59, 238, 102, 214, 254, 247, 51, 199, 237, 200, 38, 124, 166, 33, 175, 41, 74, 133, 87, 2, 107, 18, 31, 24, 247, 131, 164, 127, 60, 248, 2, 123, 89, 217, 174, 93, 164, 108, 87, 237, 210, 88, 102, 44, 55, 136, 5, 200, 142, 4, 122, 227, 129, 103, 35, 59, 133, 65, 246, 197, 110, 97, 141, 191, 184, 159, 237, 51, 224, 121, 99, 122, 208, 188, 125, 21, 171, 123, 232, 101, 232, 49, 98, 11, 11, 217, 137, 225, 155, 152, 109, 5, 158, 107, 183, 169, 147, 91, 48, 218, 7, 210, 115, 95, 46, 152, 7, 109, 100, 13, 7, 182, 176, 22, 221, 171, 66, 163, 176, 149, 53, 27, 118, 176, 214, 172, 149, 172, 109, 204, 58, 244, 253, 123, 131, 213, 53, 250, 215, 119, 51, 8, 142, 127, 193, 246, 31, 127, 139, 221, 10, 39, 250, 57, 59, 167, 165, 249, 34, 201, 123, 66, 107, 232, 78, 161, 165, 96, 14, 187, 40, 237, 191, 32, 96, 222, 174, 109, 154, 191, 49, 184, 169, 219, 232, 229, 237, 252, 222, 178, 89, 101, 125, 105, 157, 210, 114, 231, 126, 225, 89, 229, 159, 217, 63, 48, 114, 218, 158, 223, 197, 26, 223, 131, 243, 72, 78, 185, 189, 75, 22, 176, 80, 89, 165, 220, 169, 236, 252, 175, 191, 47, 171, 44, 125, 23, 177, 166, 41, 219, 153, 168, 223, 206, 26, 3, 222, 96, 205, 72, 245, 27, 149, 239, 179, 118, 87, 13, 121, 121, 157, 213, 14, 254, 35, 19, 95, 253, 2, 163, 237, 107, 76, 92, 250, 5, 107, 100, 79, 245, 110, 213, 62, 17, 218, 62, 240, 5, 93, 75, 228, 99, 26, 71, 183, 197, 52, 111, 89, 193, 90, 195, 94, 100, 45, 73, 111, 179, 214, 95, 108, 99, 167, 251, 253, 78, 177, 203, 227, 176, 43, 216, 17, 237, 35, 76, 204, 94, 205, 26, 61, 115, 121, 183, 108, 29, 120, 80, 179, 92, 103, 155, 253, 130, 166, 213, 147, 33, 108, 213, 86, 79, 221, 164, 108, 254, 199, 19, 129, 231, 134, 108, 16, 106, 46, 57, 229, 113, 203, 66, 86, 29, 185, 144, 29, 209, 204, 97, 205, 61, 215, 48, 219, 173, 47, 48, 219, 93, 8, 126, 174, 163, 151, 23, 250, 57, 108, 103, 173, 171, 223, 98, 173, 210, 34, 223, 39, 204, 214, 155, 166, 77, 219, 153, 35, 11, 207, 48, 110, 7, 59, 189, 127, 11, 107, 91, 128, 12, 77, 186, 159, 131, 111, 29, 100, 214, 247, 46, 202, 26, 5, 199, 127, 96, 37, 71, 204, 108, 1, 210, 223, 185, 8, 2, 110, 217, 200, 28, 49, 219, 85, 230, 41, 43, 49, 111, 165, 125, 90, 243, 127, 80, 117, 229, 111, 233, 87, 98, 116, 122, 157, 29, 131, 179, 139, 194, 182, 192, 134, 175, 87, 43, 27, 63, 121, 191, 159, 99, 198, 111, 89, 141, 246, 132, 242, 54, 97, 59, 179, 103, 191, 206, 90, 198, 147, 177, 82, 34, 43, 246, 119, 53, 132, 236, 80, 212, 40, 62, 215, 172, 80, 30, 210, 222, 172, 177, 232, 71, 25, 86, 179, 38, 154, 7, 127, 189, 129, 217, 102, 28, 86, 47, 208, 253, 69, 253, 59, 213, 78, 38, 14, 127, 87, 249, 237, 37, 29, 73, 84, 41, 5, 192, 118, 179, 246, 144, 215, 88, 107, 242, 22, 197, 217, 160, 102, 109, 136, 224, 189, 126, 126, 199, 101, 28, 234, 79, 202, 237, 172, 86, 219, 95, 168, 211, 132, 169, 68, 141, 66, 114, 228, 26, 109, 95, 193, 174, 211, 10, 229, 218, 72, 97, 183, 226, 45, 140, 178, 181, 218, 223, 179, 38, 169, 190, 91, 232, 83, 102, 146, 93, 26, 99, 208, 75, 66, 219, 130, 109, 170, 127, 132, 189, 197, 106, 21, 235, 85, 142, 79, 159, 55, 156, 57, 241, 203, 176, 11, 227, 151, 42, 107, 123, 31, 86, 76, 146, 234, 93, 74, 48, 210, 43, 41, 75, 120, 148, 213, 133, 60, 199, 74, 38, 61, 204, 234, 165, 87, 118, 87, 43, 91, 152, 227, 238, 55, 152, 61, 213, 181, 203, 254, 162, 122, 91, 179, 153, 53, 245, 222, 198, 26, 250, 238, 100, 109, 59, 54, 179, 150, 41, 174, 67, 124, 13, 128, 35, 193, 190, 220, 250, 133, 203, 36, 156, 242, 0, 59, 205, 48, 2, 170, 214, 10, 205, 193, 143, 179, 118, 105, 180, 112, 132, 40, 175, 248, 45, 186, 45, 40, 148, 190, 197, 31, 250, 161, 242, 79, 97, 162, 54, 72, 253, 186, 193, 158, 177, 89, 217, 244, 194, 38, 165, 253, 166, 173, 172, 90, 241, 165, 114, 131, 30, 142, 40, 125, 173, 231, 45, 228, 156, 244, 235, 58, 54, 131, 214, 176, 93, 97, 19, 254, 160, 108, 11, 56, 160, 185, 107, 144, 221, 32, 232, 55, 179, 246, 149, 127, 86, 252, 53, 166, 73, 223, 75, 107, 11, 30, 160, 60, 101, 152, 18, 88, 17, 152, 227, 249, 100, 152, 68, 84, 57, 187, 38, 26, 148, 66, 163, 126, 136, 32, 6, 42, 232, 156, 194, 110, 225, 168, 238, 77, 214, 4, 71, 102, 186, 61, 194, 62, 70, 153, 128, 243, 215, 130, 46, 47, 52, 106, 174, 99, 53, 10, 155, 54, 64, 122, 215, 79, 223, 11, 24, 181, 145, 236, 132, 102, 60, 91, 131, 169, 193, 97, 221, 76, 65, 236, 237, 155, 197, 227, 188, 194, 134, 192, 3, 138, 23, 251, 180, 11, 79, 168, 207, 142, 45, 209, 38, 73, 211, 156, 173, 172, 82, 81, 111, 8, 10, 250, 50, 248, 118, 221, 43, 130, 56, 106, 131, 242, 120, 72, 179, 86, 33, 155, 129, 136, 152, 92, 209, 104, 47, 6, 211, 171, 88, 145, 174, 171, 20, 181, 10, 207, 194, 227, 149, 50, 1, 49, 164, 63, 125, 150, 220, 107, 175, 230, 105, 233, 25, 139, 1, 61, 149, 71, 245, 183, 234, 94, 85, 90, 50, 183, 234, 247, 27, 222, 85, 238, 237, 183, 136, 181, 15, 221, 193, 234, 164, 251, 106, 105, 173, 231, 1, 128, 227, 92, 3, 112, 184, 102, 149, 142, 32, 230, 249, 214, 220, 161, 87, 232, 29, 122, 85, 47, 71, 128, 202, 227, 180, 14, 161, 159, 4, 137, 40, 140, 102, 162, 98, 8, 12, 79, 175, 18, 3, 244, 218, 230, 160, 48, 195, 42, 104, 86, 176, 26, 93, 163, 62, 60, 193, 110, 208, 37, 219, 13, 218, 104, 135, 158, 69, 54, 235, 117, 73, 197, 154, 107, 112, 46, 54, 64, 12, 100, 146, 247, 96, 132, 133, 129, 51, 45, 12, 94, 137, 108, 64, 33, 26, 152, 110, 167, 162, 158, 189, 173, 108, 101, 133, 154, 57, 3, 197, 0, 166, 222, 163, 157, 45, 216, 131, 148, 81, 171, 132, 250, 116, 204, 127, 7, 58, 2, 123, 34, 24, 105, 124, 188, 79, 212, 43, 209, 86, 169, 23, 3, 148, 250, 239, 133, 47, 165, 128, 242, 29, 107, 144, 82, 226, 247, 152, 77, 133, 107, 244, 106, 86, 246, 144, 162, 4, 5, 0, 32, 27, 204, 236, 42, 189, 202, 166, 209, 73, 14, 135, 12, 136, 217, 244, 250, 94, 14, 157, 106, 128, 195, 160, 234, 97, 215, 106, 123, 54, 107, 245, 250, 15, 149, 184, 187, 128, 161, 90, 49, 196, 153, 132, 160, 207, 206, 123, 193, 19, 114, 232, 5, 253, 103, 1, 143, 133, 127, 164, 95, 26, 229, 48, 48, 233, 77, 137, 221, 192, 70, 217, 180, 66, 124, 141, 46, 44, 5, 115, 255, 193, 112, 98, 77, 141, 54, 44, 20, 58, 105, 33, 207, 170, 48, 176, 90, 149, 90, 114, 126, 49, 4, 207, 64, 167, 160, 231, 225, 60, 167, 78, 45, 136, 202, 192, 222, 184, 55, 38, 170, 53, 61, 15, 40, 165, 153, 211, 37, 229, 91, 237, 98, 225, 45, 161, 216, 224, 208, 104, 3, 104, 223, 161, 209, 5, 188, 46, 88, 227, 222, 100, 173, 219, 183, 41, 234, 19, 11, 117, 51, 122, 61, 203, 218, 71, 109, 83, 20, 122, 222, 226, 240, 0, 192, 97, 123, 27, 77, 20, 0, 4, 71, 32, 11, 112, 4, 10, 225, 14, 131, 98, 136, 67, 167, 28, 238, 208, 170, 124, 22, 204, 36, 231, 215, 192, 41, 2, 180, 210, 182, 40, 120, 229, 239, 144, 13, 112, 154, 173, 24, 101, 239, 135, 227, 61, 135, 209, 107, 51, 107, 208, 158, 84, 206, 83, 216, 116, 154, 62, 112, 230, 28, 56, 197, 207, 17, 0, 198, 138, 58, 65, 114, 50, 135, 78, 17, 86, 175, 10, 147, 182, 225, 64, 106, 56, 129, 170, 201, 16, 220, 187, 94, 223, 107, 152, 35, 80, 17, 5, 231, 82, 162, 141, 214, 17, 204, 50, 119, 9, 181, 129, 111, 9, 205, 146, 97, 139, 61, 224, 40, 52, 125, 240, 90, 74, 20, 131, 20, 2, 28, 91, 11, 7, 138, 193, 249, 211, 177, 45, 125, 216, 68, 231, 192, 181, 39, 219, 116, 129, 158, 57, 59, 142, 41, 129, 134, 156, 78, 218, 87, 246, 7, 131, 192, 0, 220, 159, 42, 192, 110, 80, 247, 108, 54, 24, 122, 217, 53, 250, 32, 9, 189, 42, 196, 17, 28, 168, 178, 235, 181, 234, 70, 109, 80, 224, 159, 148, 171, 20, 14, 173, 90, 135, 243, 210, 185, 20, 192, 233, 176, 180, 31, 192, 250, 226, 154, 3, 92, 215, 64, 16, 17, 10, 236, 58, 118, 143, 93, 207, 230, 190, 172, 112, 254, 178, 19, 45, 6, 218, 116, 130, 244, 251, 4, 168, 235, 12, 30, 129, 168, 175, 85, 14, 22, 53, 106, 207, 239, 25, 136, 90, 85, 79, 81, 163, 123, 64, 84, 235, 30, 18, 85, 1, 145, 14, 181, 46, 2, 199, 67, 197, 16, 4, 188, 104, 28, 87, 75, 3, 185, 36, 162, 70, 133, 105, 78, 144, 238, 19, 213, 175, 52, 54, 149, 170, 191, 77, 165, 99, 118, 181, 162, 215, 58, 161, 98, 232, 6, 214, 82, 80, 162, 201, 208, 90, 180, 17, 131, 16, 132, 2, 183, 224, 231, 82, 29, 58, 80, 122, 30, 213, 213, 213, 178, 70, 193, 241, 31, 216, 145, 35, 71, 36, 35, 234, 42, 226, 88, 4, 133, 112, 214, 199, 17, 239, 52, 240, 43, 137, 168, 233, 143, 17, 171, 243, 91, 27, 26, 129, 23, 193, 216, 159, 240, 74, 93, 49, 58, 235, 69, 181, 16, 39, 134, 178, 0, 204, 255, 125, 126, 179, 13, 35, 181, 0, 7, 234, 1, 135, 24, 35, 6, 8, 41, 98, 144, 242, 26, 81, 175, 249, 25, 28, 105, 162, 85, 155, 40, 252, 1, 231, 113, 244, 232, 61, 64, 84, 13, 239, 246, 27, 113, 36, 98, 56, 80, 169, 212, 98, 95, 165, 167, 191, 184, 94, 16, 57, 226, 143, 21, 81, 171, 15, 18, 181, 66, 130, 168, 9, 246, 121, 51, 113, 57, 17, 165, 213, 18, 167, 224, 186, 189, 112, 63, 249, 40, 135, 32, 3, 26, 120, 138, 5, 11, 38, 101, 176, 182, 4, 165, 171, 138, 172, 136, 202, 206, 91, 67, 91, 41, 136, 92, 141, 136, 66, 28, 136, 71, 64, 113, 118, 2, 211, 129, 254, 98, 112, 223, 64, 49, 160, 159, 94, 236, 101, 8, 70, 176, 84, 136, 163, 125, 159, 55, 9, 15, 0, 156, 75, 6, 0, 140, 194, 233, 142, 30, 186, 64, 71, 128, 46, 94, 76, 199, 62, 70, 92, 113, 132, 235, 96, 23, 193, 116, 64, 33, 170, 145, 210, 247, 52, 140, 23, 21, 65, 17, 162, 33, 244, 9, 49, 72, 216, 133, 17, 110, 171, 24, 40, 220, 234, 170, 70, 163, 221, 211, 162, 194, 185, 184, 134, 17, 216, 243, 249, 49, 25, 58, 240, 89, 89, 23, 217, 109, 78, 125, 56, 123, 20, 237, 74, 17, 52, 238, 165, 52, 217, 117, 216, 71, 196, 129, 2, 130, 143, 70, 43, 6, 169, 198, 136, 195, 92, 35, 114, 36, 80, 169, 50, 224, 136, 20, 68, 98, 208, 151, 206, 33, 83, 70, 68, 133, 231, 247, 153, 208, 78, 155, 39, 134, 40, 70, 58, 12, 154, 71, 29, 90, 109, 15, 169, 31, 106, 229, 40, 49, 36, 120, 16, 230, 255, 221, 254, 176, 7, 250, 167, 65, 157, 161, 64, 74, 175, 113, 45, 202, 48, 222, 16, 245, 10, 233, 154, 141, 26, 117, 150, 168, 23, 86, 219, 117, 202, 155, 236, 90, 65, 154, 112, 33, 253, 87, 136, 172, 243, 165, 10, 230, 251, 78, 167, 239, 201, 164, 76, 1, 83, 129, 32, 81, 173, 150, 242, 28, 249, 95, 163, 114, 10, 218, 224, 249, 75, 127, 118, 192, 35, 162, 214, 144, 231, 218, 196, 241, 144, 52, 100, 77, 125, 196, 62, 206, 139, 209, 189, 184, 133, 7, 0, 14, 59, 82, 255, 177, 100, 12, 112, 28, 5, 166, 2, 61, 145, 166, 199, 97, 254, 127, 27, 210, 253, 209, 48, 46, 181, 67, 163, 158, 235, 208, 234, 199, 35, 237, 239, 246, 41, 170, 91, 224, 212, 58, 113, 0, 165, 167, 42, 164, 171, 61, 55, 137, 58, 109, 165, 168, 97, 121, 146, 227, 104, 20, 15, 161, 188, 77, 26, 225, 131, 21, 187, 157, 245, 181, 2, 28, 42, 86, 196, 36, 3, 245, 124, 140, 82, 236, 199, 84, 34, 11, 112, 58, 241, 96, 164, 245, 61, 216, 95, 17, 68, 78, 96, 20, 147, 125, 255, 13, 189, 32, 134, 98, 228, 215, 169, 167, 137, 225, 74, 167, 179, 26, 132, 133, 112, 194, 21, 112, 204, 143, 69, 149, 240, 51, 201, 73, 2, 216, 4, 87, 19, 186, 70, 55, 193, 52, 160, 51, 115, 96, 90, 131, 35, 72, 249, 184, 216, 95, 175, 116, 168, 195, 226, 237, 122, 69, 129, 221, 208, 211, 185, 184, 134, 244, 90, 52, 168, 61, 163, 41, 206, 171, 32, 92, 219, 157, 142, 23, 196, 178, 236, 1, 138, 195, 77, 90, 85, 10, 230, 252, 201, 14, 131, 112, 212, 161, 99, 187, 144, 17, 172, 69, 31, 213, 13, 26, 149, 207, 43, 85, 81, 29, 2, 167, 23, 134, 34, 245, 191, 1, 169, 255, 35, 162, 58, 112, 171, 168, 8, 251, 135, 168, 213, 62, 134, 64, 240, 0, 210, 126, 41, 64, 194, 145, 125, 4, 211, 30, 244, 87, 250, 61, 37, 73, 144, 185, 68, 217, 85, 170, 153, 180, 237, 208, 40, 34, 17, 120, 164, 223, 162, 196, 243, 72, 163, 210, 91, 120, 0, 224, 120, 50, 0, 140, 180, 158, 47, 204, 196, 224, 30, 74, 204, 55, 151, 193, 152, 222, 16, 53, 194, 183, 162, 218, 119, 225, 205, 45, 162, 66, 3, 135, 16, 52, 98, 176, 42, 2, 14, 78, 115, 241, 87, 224, 108, 61, 192, 48, 56, 254, 199, 104, 59, 2, 35, 27, 82, 105, 165, 25, 35, 248, 27, 112, 200, 207, 92, 77, 105, 116, 238, 133, 122, 210, 106, 26, 28, 71, 35, 134, 41, 6, 99, 132, 207, 71, 157, 71, 145, 61, 172, 20, 3, 148, 171, 224, 40, 111, 136, 97, 24, 193, 13, 194, 90, 4, 138, 97, 82, 67, 47, 145, 156, 189, 63, 11, 22, 67, 53, 5, 8, 0, 111, 98, 46, 188, 14, 215, 219, 5, 189, 244, 203, 70, 174, 245, 130, 247, 113, 222, 13, 40, 55, 73, 141, 32, 112, 206, 238, 163, 184, 107, 61, 194, 45, 14, 131, 250, 70, 177, 155, 203, 56, 197, 214, 19, 199, 245, 58, 41, 8, 224, 90, 158, 240, 133, 251, 184, 201, 181, 41, 9, 142, 61, 97, 55, 40, 171, 29, 6, 150, 131, 99, 35, 224, 224, 183, 224, 254, 164, 121, 126, 179, 86, 232, 219, 164, 85, 248, 190, 209, 208, 233, 84, 112, 254, 149, 120, 238, 131, 241, 12, 122, 137, 6, 221, 65, 244, 253, 102, 81, 103, 248, 173, 56, 148, 33, 140, 249, 138, 20, 216, 212, 161, 152, 42, 68, 209, 180, 101, 48, 230, 254, 19, 154, 213, 250, 7, 113, 45, 165, 77, 171, 138, 182, 107, 149, 139, 93, 85, 169, 174, 20, 20, 188, 133, 7, 0, 14, 123, 179, 108, 131, 100, 12, 48, 214, 129, 24, 157, 110, 193, 232, 191, 210, 161, 87, 127, 136, 244, 85, 250, 165, 17, 140, 62, 119, 193, 32, 61, 111, 2, 72, 68, 22, 34, 0, 231, 72, 46, 244, 209, 137, 195, 244, 122, 177, 167, 98, 24, 70, 153, 175, 112, 30, 231, 72, 165, 199, 92, 94, 171, 40, 194, 72, 15, 3, 102, 233, 8, 34, 183, 65, 215, 237, 75, 66, 111, 193, 113, 9, 105, 91, 1, 103, 209, 42, 74, 208, 143, 239, 17, 0, 190, 129, 227, 120, 28, 205, 45, 168, 75, 139, 112, 106, 32, 136, 58, 97, 166, 168, 102, 207, 73, 186, 64, 48, 128, 77, 128, 243, 196, 67, 23, 132, 224, 147, 40, 10, 138, 48, 81, 133, 62, 134, 178, 151, 16, 0, 34, 168, 141, 235, 52, 206, 235, 106, 157, 139, 147, 110, 113, 232, 132, 235, 237, 33, 194, 8, 135, 46, 120, 170, 67, 167, 253, 165, 168, 234, 231, 243, 9, 46, 158, 139, 179, 212, 59, 83, 118, 18, 56, 248, 66, 215, 38, 142, 107, 251, 136, 122, 229, 243, 142, 32, 118, 4, 253, 249, 29, 245, 203, 117, 200, 35, 152, 14, 168, 112, 143, 62, 115, 115, 177, 167, 126, 148, 168, 14, 190, 145, 182, 29, 161, 236, 23, 162, 65, 217, 236, 8, 102, 158, 119, 251, 114, 98, 211, 171, 122, 54, 27, 180, 158, 47, 37, 17, 236, 116, 104, 243, 53, 250, 211, 95, 20, 156, 203, 24, 120, 22, 139, 17, 76, 125, 250, 192, 3, 0, 71, 202, 0, 188, 141, 83, 26, 201, 7, 49, 233, 239, 232, 145, 96, 52, 201, 132, 3, 251, 188, 17, 16, 89, 48, 230, 175, 193, 52, 138, 43, 193, 112, 140, 66, 55, 137, 90, 229, 13, 56, 79, 150, 171, 10, 57, 148, 10, 251, 107, 196, 16, 253, 23, 52, 39, 118, 169, 47, 43, 212, 15, 56, 203, 106, 24, 234, 4, 244, 163, 7, 50, 138, 23, 36, 157, 123, 165, 93, 17, 24, 132, 105, 70, 231, 136, 235, 21, 18, 224, 212, 209, 112, 118, 233, 143, 151, 96, 180, 188, 15, 6, 127, 63, 230, 211, 187, 145, 238, 123, 254, 20, 151, 168, 12, 196, 104, 41, 100, 139, 204, 107, 181, 205, 37, 162, 210, 16, 138, 123, 240, 154, 6, 244, 102, 152, 250, 76, 115, 232, 52, 215, 224, 254, 163, 28, 218, 160, 39, 93, 135, 124, 4, 125, 240, 76, 141, 144, 158, 175, 166, 62, 33, 213, 127, 20, 193, 180, 30, 129, 171, 6, 153, 76, 33, 64, 64, 117, 213, 209, 10, 90, 156, 207, 103, 61, 2, 253, 212, 32, 3, 27, 76, 207, 222, 174, 26, 222, 95, 12, 80, 61, 139, 41, 153, 26, 65, 104, 62, 166, 98, 31, 58, 52, 186, 201, 56, 103, 0, 246, 93, 45, 164, 235, 122, 196, 166, 213, 36, 138, 195, 59, 3, 154, 61, 64, 77, 111, 94, 222, 194, 117, 102, 160, 31, 187, 112, 222, 183, 240, 60, 110, 65, 240, 187, 78, 12, 70, 96, 70, 32, 22, 123, 235, 121, 0, 224, 184, 2, 64, 72, 103, 122, 9, 99, 73, 0, 79, 139, 74, 204, 197, 123, 192, 152, 7, 210, 235, 53, 164, 161, 94, 6, 231, 22, 164, 249, 2, 82, 243, 40, 28, 235, 116, 156, 148, 81, 227, 197, 254, 225, 111, 131, 117, 98, 160, 254, 86, 113, 72, 216, 1, 113, 160, 225, 73, 24, 184, 20, 100, 96, 168, 106, 49, 72, 229, 243, 14, 81, 84, 247, 20, 224, 188, 35, 113, 77, 186, 22, 189, 2, 252, 26, 101, 56, 250, 53, 77, 12, 84, 79, 115, 85, 195, 200, 166, 120, 17, 231, 217, 140, 236, 195, 147, 194, 139, 35, 1, 45, 248, 133, 51, 4, 34, 33, 29, 237, 116, 24, 253, 127, 14, 231, 83, 136, 65, 154, 33, 98, 79, 76, 99, 6, 50, 153, 89, 191, 175, 72, 171, 232, 106, 245, 68, 220, 187, 239, 226, 164, 78, 161, 178, 169, 131, 83, 176, 77, 153, 134, 82, 84, 135, 221, 234, 208, 25, 34, 224, 88, 238, 111, 11, 148, 200, 62, 50, 208, 231, 120, 244, 247, 19, 236, 235, 208, 135, 191, 99, 46, 95, 129, 116, 254, 176, 168, 86, 124, 229, 80, 5, 14, 108, 114, 190, 250, 167, 87, 141, 200, 176, 20, 127, 70, 221, 206, 53, 9, 10, 26, 65, 65, 113, 118, 85, 159, 192, 134, 208, 32, 141, 35, 80, 249, 148, 35, 72, 152, 99, 215, 234, 163, 28, 161, 234, 84, 76, 177, 230, 137, 90, 221, 125, 200, 68, 22, 66, 47, 125, 234, 75, 109, 220, 98, 215, 170, 242, 189, 247, 165, 243, 5, 40, 111, 117, 132, 8, 143, 217, 84, 170, 223, 218, 212, 170, 22, 232, 60, 247, 229, 22, 30, 0, 56, 206, 0, 208, 31, 198, 29, 202, 198, 98, 206, 190, 202, 161, 83, 222, 4, 3, 125, 12, 70, 172, 132, 243, 7, 32, 13, 77, 130, 113, 223, 14, 3, 26, 9, 124, 150, 160, 40, 109, 70, 189, 33, 62, 198, 23, 162, 251, 78, 236, 33, 96, 36, 68, 250, 31, 170, 88, 35, 246, 233, 181, 86, 28, 213, 215, 44, 134, 40, 78, 65, 247, 174, 168, 211, 188, 39, 134, 168, 147, 92, 213, 37, 17, 3, 133, 177, 232, 195, 53, 56, 46, 253, 133, 82, 234, 7, 174, 89, 34, 6, 42, 211, 224, 72, 147, 48, 191, 119, 174, 96, 107, 53, 6, 177, 167, 114, 146, 168, 54, 248, 204, 157, 73, 48, 178, 197, 163, 93, 95, 177, 151, 48, 75, 140, 64, 54, 16, 200, 226, 224, 204, 244, 58, 142, 70, 189, 181, 56, 159, 236, 7, 64, 36, 212, 127, 233, 21, 162, 90, 57, 215, 161, 83, 188, 217, 172, 232, 35, 101, 60, 146, 62, 64, 80, 138, 195, 132, 80, 199, 16, 133, 206, 166, 10, 15, 119, 104, 13, 47, 59, 52, 90, 101, 115, 239, 206, 215, 106, 200, 76, 2, 196, 64, 197, 120, 212, 87, 226, 58, 122, 148, 1, 120, 46, 17, 224, 97, 92, 63, 167, 81, 163, 142, 108, 208, 4, 14, 17, 149, 61, 152, 67, 165, 93, 98, 15, 16, 222, 69, 198, 226, 9, 108, 36, 98, 151, 25, 130, 93, 37, 160, 79, 189, 85, 98, 136, 144, 37, 26, 20, 215, 137, 74, 173, 20, 244, 28, 97, 76, 10, 0, 222, 210, 32, 4, 165, 216, 117, 202, 251, 144, 246, 231, 209, 90, 3, 233, 196, 160, 208, 1, 120, 254, 217, 162, 62, 240, 126, 28, 171, 71, 159, 2, 165, 251, 9, 100, 115, 208, 199, 62, 162, 58, 80, 224, 1, 128, 195, 246, 125, 229, 124, 79, 15, 163, 136, 130, 193, 74, 127, 209, 214, 97, 96, 52, 95, 23, 224, 56, 161, 24, 169, 156, 6, 69, 198, 131, 209, 141, 182, 47, 39, 162, 94, 117, 92, 84, 133, 255, 92, 212, 27, 78, 160, 254, 163, 56, 231, 40, 49, 110, 232, 26, 177, 135, 246, 172, 40, 24, 90, 224, 196, 235, 93, 85, 61, 130, 58, 225, 48, 204, 28, 24, 250, 223, 69, 157, 78, 160, 69, 58, 204, 95, 31, 17, 251, 209, 2, 34, 156, 62, 68, 24, 222, 117, 254, 218, 85, 208, 215, 153, 72, 253, 5, 164, 211, 171, 144, 17, 4, 34, 3, 184, 95, 12, 18, 18, 112, 46, 250, 190, 96, 49, 238, 67, 186, 183, 75, 137, 40, 132, 81, 63, 122, 99, 100, 255, 163, 67, 19, 248, 177, 67, 173, 149, 2, 70, 211, 96, 60, 15, 157, 230, 67, 187, 78, 247, 80, 147, 48, 48, 196, 161, 83, 95, 35, 53, 144, 17, 122]);
fileData3.push.apply(fileData3, [62, 8, 164, 71, 29, 225, 72, 255, 67, 165, 44, 38, 24, 65, 50, 200, 153, 190, 59, 23, 30, 69, 181, 254, 89, 60, 235, 207, 17, 24, 46, 59, 45, 18, 133, 49, 8, 120, 106, 250, 58, 83, 109, 15, 237, 57, 216, 161, 9, 93, 36, 134, 170, 70, 224, 254, 102, 208, 207, 66, 170, 67, 63, 147, 158, 76, 101, 15, 80, 230, 219, 148, 234, 57, 14, 149, 114, 37, 116, 135, 37, 189, 78, 185, 8, 193, 83, 67, 129, 17, 65, 205, 132, 231, 48, 93, 106, 19, 128, 64, 30, 192, 194, 16, 92, 121, 6, 192, 97, 236, 207, 159, 254, 77, 50, 38, 18, 140, 160, 201, 24, 5, 105, 245, 255, 15, 48, 94, 13, 74, 164, 230, 87, 53, 125, 247, 8, 70, 204, 92, 56, 249, 167, 162, 70, 253, 1, 12, 125, 142, 100, 140, 26, 165, 82, 12, 211, 78, 135, 19, 46, 132, 99, 200, 6, 17, 164, 255, 67, 145, 74, 207, 69, 38, 208, 11, 193, 64, 35, 170, 3, 6, 225, 28, 65, 112, 124, 1, 35, 153, 94, 236, 139, 96, 228, 249, 151, 33, 78, 113, 59, 2, 137, 24, 162, 162, 197, 70, 5, 230, 248, 47, 136, 121, 152, 231, 106, 84, 145, 184, 254, 175, 49, 141, 89, 13, 39, 232, 135, 249, 249, 187, 112, 150, 110, 115, 255, 174, 226, 208, 169, 238, 22, 117, 170, 195, 162, 166, 151, 103, 218, 96, 55, 4, 164, 219, 13, 193, 215, 74, 219, 154, 208, 235, 29, 154, 222, 125, 17, 36, 101, 31, 12, 250, 164, 197, 125, 78, 198, 125, 222, 37, 125, 161, 24, 162, 146, 94, 221, 65, 79, 25, 212, 0, 81, 165, 159, 42, 42, 67, 239, 20, 187, 36, 36, 77, 200, 105, 154, 245, 6, 159, 15, 143, 144, 238, 43, 29, 6, 220, 7, 61, 67, 165, 1, 65, 78, 49, 22, 247, 216, 109, 33, 213, 166, 54, 232, 29, 6, 69, 50, 213, 115, 232, 132, 63, 225, 190, 213, 14, 189, 176, 19, 101, 146, 67, 43, 252, 17, 193, 199, 129, 231, 112, 0, 142, 47, 61, 65, 4, 90, 105, 13, 135, 7, 0, 142, 115, 10, 16, 42, 45, 180, 73, 130, 50, 88, 90, 81, 247, 114, 174, 127, 69, 68, 33, 24, 243, 114, 164, 177, 100, 188, 63, 226, 92, 112, 22, 53, 230, 187, 15, 136, 225, 170, 95, 193, 224, 165, 247, 234, 210, 60, 63, 24, 25, 74, 80, 151, 41, 136, 215, 121, 197, 94, 44, 8, 153, 194, 115, 152, 179, 127, 128, 64, 113, 167, 75, 77, 175, 2, 199, 136, 253, 216, 110, 113, 0, 123, 217, 165, 186, 172, 216, 53, 186, 235, 48, 98, 190, 230, 208, 132, 251, 172, 250, 219, 122, 96, 36, 14, 96, 74, 187, 38, 72, 233, 253, 65, 148, 235, 254, 244, 120, 102, 228, 156, 15, 96, 251, 9, 148, 157, 139, 168, 138, 80, 202, 44, 162, 161, 55, 131, 89, 46, 117, 55, 161, 60, 204, 166, 25, 120, 175, 200, 66, 61, 247, 232, 8, 21, 38, 138, 218, 160, 211, 142, 96, 213, 29, 46, 213, 37, 197, 17, 40, 76, 112, 244, 100, 131, 224, 248, 180, 14, 129, 44, 78, 241, 13, 130, 193, 211, 118, 141, 166, 23, 2, 201, 88, 60, 187, 239, 17, 0, 62, 67, 95, 60, 79, 141, 7, 0, 142, 51, 0, 208, 72, 31, 238, 251, 37, 222, 213, 10, 25, 27, 225, 218, 86, 194, 192, 98, 80, 74, 233, 250, 19, 67, 95, 35, 199, 213, 32, 141, 127, 25, 60, 69, 250, 204, 248, 10, 10, 56, 58, 56, 101, 231, 146, 182, 75, 164, 111, 242, 85, 66, 136, 168, 76, 102, 246, 32, 141, 230, 219, 176, 20, 69, 246, 152, 18, 33, 103, 76, 41, 77, 11, 110, 198, 200, 250, 79, 49, 80, 229, 243, 231, 191, 188, 69, 186, 86, 56, 219, 37, 14, 99, 210, 104, 253, 99, 133, 238, 195, 174, 209, 102, 218, 213, 129, 47, 216, 245, 122, 207, 243, 200, 142, 179, 208, 49, 10, 146, 151, 127, 141, 169, 209, 42, 144, 90, 79, 66, 122, 255, 194, 177, 176, 81, 206, 54, 58, 105, 26, 84, 15, 93, 27, 246, 125, 22, 35, 69, 181, 103, 45, 83, 146, 38, 67, 191, 1, 14, 33, 212, 147, 165, 216, 216, 24, 230, 8, 86, 76, 197, 188, 95, 250, 91, 140, 248, 57, 73, 122, 57, 161, 107, 57, 66, 216, 147, 200, 158, 202, 177, 77, 95, 38, 146, 142, 222, 196, 208, 239, 73, 40, 241, 108, 30, 70, 63, 254, 8, 30, 64, 95, 36, 225, 1, 128, 195, 106, 203, 202, 156, 214, 112, 25, 129, 209, 168, 193, 149, 231, 255, 35, 70, 164, 138, 105, 177, 59, 169, 254, 196, 88, 139, 122, 206, 232, 207, 149, 244, 141, 60, 82, 225, 30, 72, 71, 131, 201, 40, 115, 226, 170, 216, 151, 253, 50, 52, 127, 25, 122, 109, 247, 0, 96, 80, 132, 96, 148, 74, 64, 221, 213, 98, 160, 48, 3, 78, 223, 247, 218, 184, 227, 66, 126, 92, 213, 208, 178, 208, 254, 241, 98, 47, 229, 68, 81, 19, 24, 33, 26, 212, 161, 56, 214, 77, 226, 227, 16, 92, 122, 49, 13, 149, 110, 126, 172, 60, 220, 231, 109, 150, 62, 198, 194, 50, 99, 156, 100, 68, 91, 20, 153, 209, 150, 75, 123, 30, 68, 84, 5, 210, 51, 242, 252, 222, 1, 182, 31, 158, 25, 185, 71, 145, 21, 139, 254, 56, 23, 3, 31, 4, 63, 199, 125, 93, 113, 10, 66, 95, 70, 218, 212, 125, 135, 53, 235, 194, 125, 22, 58, 29, 90, 69, 16, 70, 116, 105, 33, 239, 82, 66, 199, 28, 1, 210, 39, 201, 125, 113, 61, 100, 114, 206, 121, 70, 189, 65, 175, 197, 244, 103, 20, 158, 237, 58, 28, 187, 29, 1, 160, 47, 74, 190, 8, 200, 65, 6, 80, 217, 253, 111, 251, 145, 140, 27, 116, 132, 141, 31, 120, 196, 249, 234, 142, 230, 181, 94, 175, 250, 228, 4, 199, 49, 178, 135, 244, 23, 131, 6, 6, 78, 72, 182, 170, 39, 70, 151, 5, 125, 17, 158, 69, 163, 15, 203, 141, 170, 10, 200, 141, 170, 232, 145, 29, 85, 25, 150, 21, 93, 17, 148, 25, 87, 162, 202, 137, 43, 145, 218, 101, 199, 91, 88, 86, 156, 89, 0, 180, 202, 175, 16, 131, 133, 80, 56, 202, 88, 64, 163, 89, 110, 94, 188, 177, 111, 94, 124, 101, 96, 126, 188, 113, 176, 168, 9, 150, 254, 68, 57, 12, 219, 71, 82, 226, 43, 89, 18, 101, 22, 212, 135, 1, 76, 153, 18, 107, 148, 250, 221, 216, 71, 163, 72, 141, 173, 242, 244, 59, 59, 214, 232, 218, 234, 46, 105, 145, 22, 150, 58, 194, 204, 82, 227, 140, 138, 212, 24, 19, 75, 139, 49, 169, 224, 248, 44, 35, 194, 162, 164, 145, 183, 66, 59, 84, 245, 77, 88, 46, 219, 26, 241, 152, 171, 133, 175, 164, 199, 89, 104, 180, 151, 220, 19, 37, 253, 34, 208, 216, 204, 88, 115, 72, 102, 140, 41, 120, 90, 212, 62, 197, 244, 216, 191, 75, 245, 82, 146, 156, 255, 127, 161, 171, 100, 197, 155, 36, 232, 109, 64, 179, 65, 165, 105, 214, 25, 122, 101, 99, 223, 45, 56, 223, 101, 23, 65, 221, 114, 67, 204, 223, 133, 99, 161, 163, 233, 111, 47, 204, 194, 243, 88, 70, 163, 253, 29, 35, 255, 44, 124, 223, 35, 89, 97, 55, 8, 244, 11, 70, 148, 165, 209, 235, 91, 158, 1, 112, 156, 83, 128, 75, 73, 254, 208, 19, 170, 172, 209, 197, 62, 171, 85, 9, 145, 133, 174, 45, 167, 140, 143, 179, 178, 220, 84, 147, 228, 100, 228, 128, 5, 73, 230, 224, 252, 4, 211, 136, 146, 192, 65, 52, 226, 167, 1, 33, 39, 218, 24, 147, 23, 83, 25, 62, 126, 76, 81, 112, 78, 84, 69, 100, 86, 76, 165, 244, 78, 58, 51, 169, 130, 101, 198, 159, 18, 178, 98, 77, 138, 130, 152, 10, 85, 94, 76, 69, 96, 126, 76, 229, 128, 252, 88, 99, 191, 188, 88, 227, 0, 239, 142, 22, 196, 155, 250, 255, 185, 223, 117, 189, 239, 25, 243, 135, 94, 55, 198, 126, 175, 155, 154, 112, 92, 186, 102, 90, 162, 239, 191, 191, 162, 111, 2, 82, 163, 141, 122, 177, 63, 140, 60, 144, 5, 221, 28, 243, 169, 50, 59, 186, 50, 24, 244, 184, 92, 0, 32, 73, 31, 109, 17, 82, 227, 42, 2, 128, 144, 26, 95, 161, 203, 140, 46, 25, 144, 25, 93, 26, 32, 42, 181, 234, 75, 253, 34, 148, 91, 16, 192, 244, 75, 7, 47, 165, 87, 128, 244, 29, 192, 96, 144, 138, 251, 238, 235, 125, 15, 110, 114, 210, 202, 100, 51, 129, 156, 24, 179, 144, 55, 198, 34, 228, 197, 152, 21, 57, 41, 229, 1, 89, 41, 165, 87, 156, 150, 37, 140, 53, 179, 140, 36, 139, 107, 207, 41, 249, 81, 39, 117, 14, 189, 16, 133, 169, 214, 167, 8, 164, 153, 89, 81, 85, 170, 156, 200, 170, 110, 215, 228, 1, 128, 35, 171, 228, 252, 247, 200, 73, 169, 80, 103, 165, 150, 252, 184, 87, 47, 93, 100, 236, 152, 146, 176, 95, 12, 125, 147, 94, 73, 78, 199, 84, 169, 219, 255, 50, 244, 22, 185, 62, 112, 252, 7, 89, 37, 231, 191, 71, 253, 235, 83, 255, 79, 201, 142, 169, 82, 101, 143, 41, 114, 185, 63, 255, 249, 251, 59, 178, 74, 206, 127, 15, 57, 167, 253, 79, 210, 85, 228, 250, 192, 241, 31, 100, 149, 156, 255, 30, 114, 78, 251, 159, 164, 171, 200, 245, 129, 227, 63, 200, 42, 57, 255, 61, 228, 156, 246, 63, 73, 206, 152, 34, 159, 69, 93, 185, 62, 112, 252, 7, 89, 37, 231, 191, 135, 156, 211, 254, 39, 201, 26, 115, 82, 57, 46, 174, 212, 243, 106, 84, 174, 15, 28, 255, 65, 86, 201, 225, 112, 252, 3, 89, 37, 177, 120, 241, 98, 20, 157, 229, 191, 202, 191, 218, 190, 235, 245, 175, 246, 60, 168, 167, 144, 211, 115, 56, 156, 238, 200, 42, 221, 252, 171, 206, 75, 80, 219, 174, 116, 173, 115, 181, 252, 59, 109, 57, 28, 206, 165, 145, 85, 18, 110, 167, 251, 119, 157, 239, 63, 213, 254, 95, 233, 15, 234, 250, 100, 3, 216, 87, 122, 239, 115, 56, 254, 142, 172, 178, 171, 147, 253, 24, 167, 235, 202, 127, 178, 45, 237, 255, 216, 243, 161, 190, 2, 104, 129, 32, 119, 156, 195, 241, 103, 100, 149, 255, 43, 252, 43, 14, 207, 225, 112, 174, 30, 89, 37, 135, 195, 241, 15, 100, 149, 28, 14, 199, 63, 144, 85, 114, 56, 28, 255, 64, 86, 201, 225, 112, 252, 3, 89, 37, 135, 195, 241, 15, 100, 149, 28, 14, 199, 63, 144, 85, 114, 56, 28, 255, 64, 86, 201, 225, 112, 252, 3, 89, 37, 135, 195, 241, 15, 100, 149, 132, 251, 43, 188, 255, 196, 151, 120, 252, 107, 62, 14, 231, 127, 19, 89, 101, 87, 135, 253, 87, 28, 248, 63, 113, 14, 14, 135, 243, 127, 139, 172, 242, 223, 69, 206, 217, 121, 0, 224, 112, 254, 247, 144, 85, 254, 187, 240, 0, 192, 225, 252, 255, 3, 89, 37, 209, 213, 97, 127, 140, 3, 255, 59, 109, 57, 28, 206, 255, 59, 100, 149, 110, 200, 113, 221, 116, 61, 118, 37, 184, 211, 115, 56, 255, 251, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 127, 32, 171, 228, 112, 56, 254, 129, 172, 146, 195, 225, 248, 7, 178, 74, 14, 135, 227, 31, 200, 42, 57, 28, 142, 63, 208, 193, 254, 63, 38, 182, 194, 109, 9, 219, 237, 126, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'particles.png', fileData3, true, true);
var fileData4 = [];
fileData4.push.apply(fileData4, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 1, 0, 8, 6, 0, 0, 0, 92, 114, 168, 102, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 193, 0, 0, 14, 193, 1, 184, 145, 107, 237, 0, 0, 0, 24, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 112, 97, 105, 110, 116, 46, 110, 101, 116, 32, 52, 46, 48, 46, 53, 101, 133, 50, 101, 0, 0, 40, 98, 73, 68, 65, 84, 120, 94, 237, 157, 7, 120, 22, 85, 186, 199, 63, 21, 2, 9, 33, 5, 2, 161, 55, 233, 77, 164, 186, 34, 40, 8, 72, 147, 34, 88, 80, 119, 93, 215, 187, 123, 215, 130, 186, 138, 122, 183, 120, 215, 93, 93, 11, 86, 80, 154, 34, 16, 72, 32, 16, 8, 189, 136, 130, 186, 96, 217, 103, 173, 187, 172, 139, 101, 189, 74, 75, 72, 239, 9, 45, 239, 61, 255, 147, 239, 124, 78, 134, 19, 242, 5, 41, 73, 230, 127, 158, 231, 151, 153, 121, 207, 123, 206, 204, 151, 204, 255, 157, 247, 156, 153, 111, 226, 19, 17, 159, 179, 196, 181, 202, 153, 178, 177, 78, 202, 237, 11, 219, 166, 172, 125, 181, 65, 222, 154, 121, 209, 5, 239, 205, 111, 150, 243, 238, 242, 43, 63, 248, 114, 217, 207, 226, 239, 134, 127, 101, 196, 135, 22, 63, 183, 190, 65, 254, 23, 111, 132, 23, 101, 36, 68, 23, 189, 31, 23, 89, 244, 213, 250, 176, 252, 151, 108, 190, 54, 150, 221, 18, 191, 120, 119, 155, 180, 101, 139, 47, 123, 183, 100, 105, 207, 143, 50, 19, 123, 127, 244, 249, 194, 33, 219, 119, 184, 253, 84, 105, 229, 182, 17, 66, 130, 167, 236, 135, 42, 27, 67, 211, 155, 174, 11, 75, 159, 179, 34, 58, 115, 207, 198, 176, 195, 249, 155, 234, 101, 201, 202, 176, 116, 89, 93, 47, 181, 52, 249, 162, 195, 133, 73, 145, 123, 138, 227, 59, 189, 255, 221, 238, 246, 169, 191, 154, 121, 235, 107, 163, 117, 35, 127, 49, 157, 173, 172, 155, 191, 99, 101, 253, 130, 146, 132, 134, 121, 39, 86, 181, 44, 56, 177, 190, 89, 129, 36, 181, 46, 146, 164, 200, 130, 19, 201, 209, 217, 71, 146, 194, 51, 15, 196, 181, 204, 126, 217, 248, 187, 121, 37, 186, 228, 174, 21, 29, 190, 62, 176, 162, 193, 158, 146, 228, 6, 7, 142, 109, 174, 147, 114, 98, 75, 253, 180, 163, 91, 27, 100, 72, 98, 196, 119, 39, 226, 35, 255, 239, 31, 91, 59, 125, 62, 223, 214, 150, 16, 82, 117, 244, 143, 141, 117, 142, 14, 88, 31, 90, 184, 49, 57, 50, 59, 55, 57, 42, 87, 54, 54, 203, 150, 164, 152, 60, 73, 138, 46, 150, 213, 17, 69, 178, 33, 38, 91, 5, 131, 175, 37, 41, 236, 224, 137, 109, 205, 191, 47, 124, 121, 228, 134, 175, 23, 142, 94, 215, 198, 175, 127, 221, 199, 242, 186, 185, 47, 172, 14, 201, 42, 73, 8, 203, 144, 197, 97, 153, 178, 181, 81, 158, 172, 8, 79, 147, 196, 102, 185, 146, 212, 34, 83, 214, 170, 254, 214, 53, 206, 146, 13, 97, 135, 51, 214, 132, 167, 252, 193, 121, 16, 96, 126, 100, 193, 115, 113, 225, 217, 95, 173, 191, 240, 144, 218, 207, 87, 178, 46, 252, 176, 236, 12, 77, 145, 183, 65, 248, 65, 217, 22, 146, 42, 107, 235, 165, 203, 218, 240, 140, 148, 55, 27, 166, 36, 186, 219, 19, 66, 170, 142, 254, 49, 39, 182, 96, 122, 92, 163, 130, 226, 53, 49, 185, 165, 107, 99, 115, 100, 125, 108, 129, 172, 105, 156, 39, 27, 35, 179, 101, 123, 100, 174, 108, 106, 144, 43, 91, 67, 114, 100, 123, 216, 97, 217, 28, 146, 114, 44, 169, 233, 247, 197, 139, 175, 218, 246, 134, 95, 255, 190, 36, 95, 97, 254, 162, 6, 105, 165, 9, 145, 7, 36, 174, 81, 154, 44, 138, 72, 147, 4, 181, 92, 214, 40, 83, 226, 194, 212, 122, 120, 134, 172, 139, 201, 151, 13, 45, 115, 37, 185, 97, 118, 233, 186, 208, 140, 212, 151, 90, 101, 205, 52, 7, 49, 179, 71, 202, 51, 203, 66, 51, 255, 149, 20, 154, 38, 235, 162, 10, 100, 99, 180, 218, 239, 5, 199, 228, 205, 186, 153, 242, 142, 98, 251, 69, 89, 178, 173, 94, 182, 188, 23, 181, 79, 214, 52, 204, 150, 13, 225, 25, 7, 222, 10, 77, 121, 204, 180, 39, 132, 156, 30, 190, 183, 235, 21, 254, 118, 75, 131, 146, 172, 164, 214, 197, 178, 74, 93, 173, 151, 71, 100, 200, 210, 122, 25, 178, 160, 110, 142, 188, 16, 146, 37, 115, 66, 243, 101, 189, 202, 2, 118, 212, 207, 149, 183, 67, 210, 100, 71, 216, 33, 121, 163, 65, 154, 172, 110, 247, 101, 218, 194, 81, 91, 126, 131, 0, 176, 180, 225, 225, 162, 215, 27, 239, 147, 229, 49, 7, 100, 115, 211, 84, 217, 164, 2, 199, 198, 6, 5, 178, 94, 137, 54, 190, 78, 170, 204, 173, 251, 181, 44, 15, 57, 38, 27, 154, 229, 200, 170, 70, 197, 42, 155, 72, 147, 133, 225, 185, 239, 154, 131, 216, 80, 63, 237, 111, 235, 66, 85, 150, 17, 93, 34, 155, 35, 10, 101, 93, 68, 142, 162, 72, 182, 52, 200, 145, 93, 17, 153, 178, 238, 162, 84, 73, 86, 199, 179, 61, 44, 91, 222, 137, 72, 145, 149, 141, 114, 229, 227, 6, 41, 251, 157, 31, 132, 16, 82, 117, 124, 219, 66, 243, 15, 108, 110, 86, 88, 156, 20, 147, 37, 203, 163, 179, 100, 113, 253, 20, 89, 84, 231, 123, 89, 28, 114, 88, 226, 235, 23, 201, 170, 250, 249, 138, 92, 217, 214, 32, 75, 118, 226, 138, 92, 63, 77, 182, 41, 150, 55, 252, 86, 22, 198, 124, 118, 207, 154, 168, 172, 164, 101, 141, 15, 157, 88, 25, 149, 38, 91, 26, 229, 200, 123, 245, 143, 203, 219, 245, 142, 202, 230, 122, 69, 178, 187, 225, 9, 117, 229, 62, 166, 251, 154, 173, 130, 201, 74, 117, 245, 94, 175, 4, 158, 20, 150, 37, 241, 97, 153, 251, 94, 137, 46, 158, 17, 31, 155, 53, 107, 99, 248, 225, 220, 213, 141, 179, 101, 93, 211, 92, 73, 84, 62, 207, 213, 85, 199, 18, 86, 32, 171, 67, 115, 149, 224, 115, 100, 71, 228, 33, 89, 18, 146, 33, 43, 194, 242, 101, 91, 120, 186, 218, 71, 186, 124, 20, 118, 184, 232, 95, 161, 7, 103, 219, 62, 20, 33, 36, 56, 124, 43, 66, 139, 10, 19, 90, 230, 151, 110, 138, 206, 145, 132, 198, 25, 146, 168, 196, 189, 61, 164, 68, 214, 133, 29, 149, 228, 166, 199, 100, 77, 212, 81, 37, 192, 124, 217, 209, 48, 75, 54, 214, 57, 44, 91, 234, 228, 200, 155, 245, 83, 101, 181, 18, 228, 186, 150, 95, 110, 92, 29, 149, 94, 152, 160, 210, 255, 21, 177, 25, 178, 33, 178, 68, 222, 175, 115, 68, 84, 80, 145, 100, 53, 116, 120, 61, 42, 75, 150, 68, 23, 72, 82, 196, 17, 89, 24, 82, 32, 175, 43, 65, 111, 142, 82, 52, 41, 148, 228, 58, 251, 74, 226, 123, 124, 251, 201, 170, 134, 153, 155, 215, 68, 101, 203, 214, 14, 74, 240, 81, 197, 50, 47, 36, 87, 249, 230, 201, 170, 134, 71, 84, 31, 71, 100, 83, 147, 124, 217, 213, 242, 128, 108, 105, 246, 189, 188, 22, 154, 35, 175, 42, 222, 80, 1, 96, 87, 195, 84, 249, 32, 246, 187, 181, 182, 15, 69, 8, 9, 14, 95, 66, 104, 209, 209, 21, 161, 153, 165, 175, 135, 103, 169, 49, 123, 138, 18, 111, 177, 188, 221, 224, 168, 204, 138, 80, 217, 64, 151, 84, 153, 217, 167, 68, 54, 197, 228, 201, 251, 77, 14, 72, 98, 72, 170, 108, 8, 81, 130, 140, 60, 168, 174, 206, 74, 180, 209, 41, 159, 198, 71, 30, 120, 59, 190, 97, 90, 233, 218, 168, 60, 73, 12, 59, 34, 75, 149, 152, 159, 107, 81, 32, 113, 141, 142, 200, 226, 22, 249, 178, 168, 107, 166, 172, 105, 116, 84, 214, 168, 44, 98, 69, 132, 74, 241, 85, 102, 176, 58, 252, 123, 89, 85, 103, 175, 44, 31, 248, 238, 183, 235, 34, 50, 255, 149, 28, 149, 87, 154, 220, 52, 91, 18, 66, 51, 101, 118, 157, 61, 146, 84, 191, 64, 214, 52, 57, 34, 175, 118, 205, 149, 217, 151, 148, 200, 250, 46, 121, 178, 185, 117, 166, 44, 139, 206, 151, 87, 35, 210, 100, 83, 227, 92, 249, 48, 52, 167, 244, 195, 168, 244, 191, 219, 62, 20, 33, 36, 56, 124, 107, 66, 242, 243, 49, 115, 191, 40, 74, 93, 209, 163, 213, 24, 95, 165, 240, 155, 234, 229, 202, 154, 216, 108, 89, 216, 188, 68, 102, 247, 63, 34, 27, 59, 228, 202, 223, 59, 124, 37, 11, 46, 202, 146, 245, 42, 53, 223, 29, 113, 80, 137, 57, 79, 222, 12, 77, 217, 19, 223, 228, 255, 190, 217, 25, 169, 174, 232, 205, 242, 85, 208, 40, 148, 89, 205, 50, 101, 110, 195, 18, 89, 219, 244, 184, 204, 239, 125, 68, 94, 80, 1, 100, 99, 147, 34, 89, 27, 150, 43, 91, 195, 115, 100, 167, 186, 194, 191, 161, 246, 183, 58, 236, 224, 137, 77, 109, 190, 220, 190, 42, 188, 240, 235, 53, 145, 5, 165, 43, 155, 168, 108, 161, 190, 26, 118, 212, 73, 85, 87, 248, 99, 242, 23, 149, 113, 44, 106, 149, 35, 175, 117, 62, 34, 91, 123, 21, 200, 155, 237, 242, 100, 125, 76, 145, 44, 11, 75, 147, 228, 24, 213, 71, 76, 70, 233, 206, 168, 172, 61, 182, 15, 69, 8, 9, 14, 223, 138, 186, 57, 251, 87, 135, 166, 73, 98, 204, 65, 217, 214, 56, 83, 118, 135, 28, 147, 173, 42, 133, 159, 211, 244, 136, 172, 142, 60, 33, 91, 123, 20, 203, 91, 221, 50, 148, 160, 51, 117, 10, 158, 168, 68, 188, 187, 97, 138, 36, 54, 202, 41, 217, 25, 122, 232, 211, 87, 194, 191, 223, 179, 49, 42, 243, 196, 210, 102, 121, 178, 40, 38, 83, 230, 71, 101, 234, 201, 188, 109, 237, 85, 230, 208, 51, 87, 54, 181, 206, 145, 119, 26, 167, 203, 78, 37, 232, 183, 27, 100, 200, 206, 186, 233, 42, 0, 28, 208, 119, 19, 150, 95, 249, 78, 193, 156, 216, 130, 181, 43, 155, 23, 75, 98, 235, 92, 137, 143, 206, 150, 68, 117, 44, 111, 55, 56, 34, 235, 195, 243, 100, 69, 211, 60, 89, 89, 255, 132, 10, 46, 199, 37, 57, 90, 101, 20, 97, 233, 42, 0, 100, 201, 210, 214, 133, 178, 173, 121, 186, 236, 104, 146, 246, 158, 237, 67, 17, 66, 130, 195, 151, 80, 39, 255, 238, 69, 225, 135, 101, 97, 204, 247, 178, 41, 58, 75, 222, 85, 105, 252, 250, 240, 66, 121, 33, 54, 79, 141, 225, 213, 24, 92, 93, 201, 183, 196, 150, 72, 66, 35, 53, 134, 143, 204, 148, 85, 234, 234, 189, 171, 126, 154, 236, 169, 155, 94, 248, 207, 240, 3, 159, 197, 215, 75, 155, 189, 42, 34, 163, 116, 117, 203, 92, 137, 107, 145, 45, 75, 194, 211, 37, 94, 137, 29, 109, 54, 180, 202, 149, 143, 187, 252, 91, 118, 52, 222, 39, 201, 117, 83, 100, 139, 47, 67, 118, 171, 182, 111, 134, 29, 148, 228, 240, 244, 130, 185, 195, 182, 36, 239, 172, 87, 180, 99, 83, 227, 146, 163, 171, 27, 101, 201, 154, 232, 76, 89, 30, 157, 174, 50, 139, 227, 242, 70, 72, 129, 44, 143, 42, 148, 231, 155, 21, 202, 108, 181, 239, 5, 106, 136, 178, 36, 60, 77, 150, 171, 76, 97, 89, 183, 20, 217, 218, 34, 51, 127, 67, 155, 239, 254, 101, 251, 80, 132, 144, 224, 240, 173, 246, 21, 61, 155, 16, 150, 118, 60, 62, 234, 144, 36, 197, 100, 200, 198, 168, 34, 53, 150, 47, 146, 5, 42, 27, 152, 165, 174, 232, 139, 26, 224, 94, 126, 134, 44, 109, 144, 174, 4, 153, 41, 219, 149, 16, 255, 218, 224, 176, 252, 45, 242, 224, 222, 47, 66, 15, 254, 26, 157, 44, 139, 74, 63, 186, 45, 54, 77, 165, 235, 42, 64, 68, 230, 202, 171, 117, 83, 101, 69, 163, 60, 61, 102, 159, 23, 146, 45, 75, 21, 107, 235, 230, 200, 150, 144, 124, 217, 174, 2, 192, 86, 117, 37, 95, 211, 241, 139, 35, 230, 32, 54, 68, 230, 103, 46, 111, 157, 47, 137, 17, 57, 178, 40, 34, 85, 54, 71, 230, 200, 95, 235, 29, 151, 79, 47, 44, 150, 101, 81, 185, 250, 88, 22, 52, 206, 144, 184, 166, 106, 88, 210, 41, 71, 146, 91, 164, 201, 230, 152, 180, 47, 77, 123, 66, 200, 233, 161, 203, 146, 250, 185, 27, 151, 70, 167, 30, 139, 143, 78, 43, 93, 19, 149, 35, 113, 17, 37, 50, 79, 9, 120, 145, 186, 226, 199, 169, 43, 250, 242, 134, 217, 234, 202, 172, 132, 167, 82, 242, 157, 209, 185, 165, 31, 70, 165, 20, 124, 16, 251, 221, 116, 211, 201, 162, 86, 223, 254, 115, 67, 76, 74, 233, 242, 78, 41, 165, 43, 84, 42, 159, 168, 2, 197, 146, 134, 233, 178, 36, 34, 67, 5, 144, 60, 217, 168, 134, 13, 59, 84, 63, 187, 34, 246, 203, 198, 144, 20, 73, 136, 254, 234, 216, 194, 17, 91, 223, 55, 237, 227, 67, 139, 95, 75, 8, 207, 63, 30, 31, 154, 161, 178, 142, 76, 89, 215, 36, 85, 118, 68, 230, 201, 91, 13, 75, 36, 57, 236, 152, 188, 16, 118, 66, 150, 168, 125, 199, 183, 82, 125, 169, 32, 176, 54, 38, 245, 248, 146, 142, 255, 202, 53, 237, 9, 33, 167, 135, 46, 139, 235, 23, 180, 90, 31, 157, 245, 239, 101, 17, 169, 71, 49, 163, 191, 181, 73, 174, 172, 80, 99, 250, 101, 29, 212, 48, 160, 67, 182, 196, 117, 78, 147, 196, 118, 72, 235, 51, 84, 58, 159, 145, 251, 65, 68, 118, 220, 39, 13, 242, 123, 57, 59, 218, 28, 123, 248, 217, 55, 154, 101, 229, 108, 108, 153, 33, 235, 155, 230, 200, 134, 216, 98, 217, 166, 198, 243, 91, 195, 210, 100, 119, 196, 33, 217, 164, 130, 65, 18, 30, 246, 9, 75, 75, 95, 22, 243, 197, 19, 206, 182, 96, 101, 253, 162, 247, 86, 214, 207, 62, 178, 178, 65, 154, 196, 169, 225, 72, 124, 116, 138, 36, 55, 81, 193, 160, 177, 10, 40, 141, 179, 101, 71, 211, 2, 73, 142, 86, 199, 209, 48, 227, 196, 162, 136, 244, 127, 184, 219, 19, 66, 170, 78, 160, 108, 143, 202, 31, 181, 56, 106, 255, 61, 43, 163, 246, 127, 191, 61, 50, 175, 48, 41, 234, 112, 233, 230, 70, 57, 130, 212, 126, 173, 98, 107, 243, 172, 188, 237, 45, 14, 22, 239, 136, 200, 93, 176, 35, 188, 32, 22, 109, 220, 157, 173, 107, 251, 159, 212, 119, 26, 103, 28, 218, 17, 147, 94, 242, 183, 208, 172, 19, 24, 42, 252, 189, 94, 186, 108, 142, 200, 62, 154, 220, 48, 51, 109, 107, 195, 195, 123, 223, 104, 245, 77, 156, 187, 157, 33, 161, 110, 222, 231, 171, 234, 230, 124, 243, 106, 68, 74, 233, 146, 70, 251, 101, 69, 84, 106, 105, 66, 120, 186, 34, 237, 196, 150, 240, 156, 226, 69, 13, 15, 166, 39, 132, 164, 173, 178, 181, 37, 132, 84, 157, 147, 12, 75, 218, 255, 227, 161, 217, 141, 191, 222, 187, 52, 36, 245, 232, 226, 240, 140, 99, 113, 49, 169, 71, 86, 180, 251, 178, 228, 237, 198, 249, 191, 88, 215, 238, 63, 127, 209, 209, 194, 95, 220, 109, 13, 239, 69, 228, 60, 249, 183, 70, 41, 127, 255, 160, 241, 190, 157, 159, 55, 56, 244, 249, 199, 225, 7, 255, 249, 86, 104, 202, 73, 87, 253, 138, 88, 229, 43, 252, 110, 89, 88, 198, 158, 37, 145, 25, 153, 107, 162, 51, 138, 23, 69, 238, 95, 189, 180, 221, 158, 120, 155, 47, 33, 228, 244, 9, 172, 28, 59, 118, 76, 131, 245, 163, 71, 143, 6, 236, 160, 164, 164, 196, 87, 90, 90, 234, 59, 113, 226, 68, 192, 118, 252, 248, 241, 128, 63, 33, 164, 102, 162, 127, 64, 224, 88, 66, 212, 166, 194, 38, 110, 83, 159, 151, 151, 119, 82, 29, 33, 164, 230, 81, 238, 170, 142, 43, 127, 243, 1, 247, 75, 235, 159, 204, 144, 70, 189, 239, 20, 8, 190, 184, 184, 88, 95, 253, 193, 228, 161, 61, 229, 198, 17, 125, 229, 250, 225, 125, 148, 123, 249, 128, 65, 8, 169, 121, 4, 86, 98, 251, 221, 43, 77, 46, 189, 71, 58, 15, 127, 84, 218, 93, 241, 136, 52, 237, 59, 93, 198, 60, 240, 145, 12, 253, 239, 119, 5, 217, 192, 13, 87, 95, 42, 192, 55, 191, 141, 220, 124, 205, 0, 121, 106, 250, 20, 113, 6, 15, 66, 72, 205, 67, 255, 136, 233, 124, 173, 196, 118, 155, 36, 205, 186, 79, 150, 70, 29, 199, 105, 241, 183, 29, 252, 176, 92, 125, 207, 251, 50, 236, 174, 221, 50, 98, 250, 7, 242, 232, 29, 99, 116, 32, 240, 109, 106, 171, 151, 99, 7, 117, 82, 77, 237, 157, 18, 66, 106, 6, 250, 71, 251, 126, 55, 171, 69, 153, 1, 129, 160, 121, 143, 235, 116, 64, 232, 116, 237, 82, 233, 49, 37, 81, 186, 78, 74, 144, 35, 71, 142, 148, 53, 248, 172, 157, 246, 157, 54, 170, 191, 20, 21, 21, 5, 58, 34, 132, 212, 60, 244, 28, 0, 174, 232, 102, 230, 191, 85, 239, 235, 165, 69, 207, 41, 210, 246, 210, 155, 116, 22, 0, 90, 93, 246, 160, 190, 234, 155, 49, 255, 99, 191, 26, 47, 183, 142, 25, 164, 231, 8, 156, 157, 17, 66, 106, 22, 129, 59, 0, 230, 10, 223, 174, 239, 52, 105, 211, 231, 70, 105, 217, 107, 170, 180, 28, 244, 128, 158, 16, 196, 156, 128, 169, 7, 152, 3, 192, 18, 19, 131, 198, 70, 8, 169, 121, 232, 31, 184, 186, 27, 3, 132, 143, 33, 192, 13, 19, 199, 200, 209, 143, 214, 200, 177, 143, 147, 245, 58, 50, 5, 92, 241, 49, 17, 104, 238, 2, 16, 66, 106, 54, 190, 252, 252, 124, 189, 98, 210, 121, 76, 4, 54, 233, 50, 65, 228, 223, 219, 68, 93, 225, 53, 242, 197, 86, 85, 85, 118, 155, 240, 143, 191, 28, 167, 215, 9, 33, 53, 31, 253, 195, 136, 31, 153, 64, 97, 97, 161, 15, 99, 254, 67, 135, 14, 41, 147, 232, 0, 240, 237, 183, 223, 98, 85, 167, 254, 79, 223, 59, 85, 175, 3, 14, 1, 8, 169, 217, 232, 31, 102, 124, 31, 16, 244, 231, 27, 164, 219, 228, 229, 162, 178, 3, 181, 41, 122, 253, 196, 167, 235, 4, 118, 51, 103, 224, 156, 20, 36, 132, 212, 76, 244, 147, 126, 102, 67, 7, 0, 37, 114, 253, 80, 16, 134, 1, 170, 64, 252, 184, 21, 8, 177, 155, 177, 63, 2, 134, 185, 123, 128, 109, 66, 72, 205, 36, 16, 0, 156, 98, 198, 16, 32, 188, 205, 72, 45, 254, 86, 35, 22, 152, 96, 224, 195, 99, 192, 124, 250, 143, 144, 218, 67, 96, 5, 169, 61, 174, 242, 184, 245, 135, 239, 3, 224, 225, 160, 238, 215, 173, 208, 65, 160, 227, 120, 124, 133, 95, 124, 119, 76, 26, 42, 57, 57, 57, 229, 58, 32, 132, 212, 92, 180, 232, 205, 216, 191, 89, 255, 251, 244, 67, 63, 237, 135, 252, 143, 190, 247, 143, 135, 130, 240, 92, 64, 207, 169, 43, 5, 153, 194, 45, 163, 7, 6, 110, 7, 98, 178, 144, 115, 0, 132, 212, 108, 2, 43, 24, 2, 152, 97, 0, 223, 7, 64, 136, 55, 208, 63, 248, 62, 0, 66, 188, 201, 73, 239, 3, 184, 191, 119, 115, 153, 209, 183, 181, 220, 217, 165, 209, 73, 239, 3, 112, 54, 4, 28, 2, 16, 82, 179, 9, 172, 220, 219, 51, 86, 238, 233, 222, 68, 30, 29, 220, 89, 30, 25, 208, 78, 166, 247, 104, 42, 31, 221, 53, 70, 222, 189, 109, 168, 254, 34, 144, 179, 145, 129, 119, 4, 8, 169, 217, 232, 31, 215, 118, 136, 145, 73, 157, 98, 101, 114, 231, 102, 50, 174, 93, 35, 45, 254, 135, 251, 183, 149, 247, 255, 235, 106, 217, 253, 139, 97, 242, 193, 47, 71, 40, 55, 123, 7, 132, 144, 154, 139, 254, 113, 243, 37, 237, 213, 162, 204, 128, 64, 112, 93, 151, 230, 58, 32, 44, 29, 209, 73, 18, 199, 246, 144, 132, 107, 186, 6, 234, 157, 240, 125, 0, 132, 212, 108, 244, 143, 125, 251, 246, 169, 69, 153, 225, 250, 238, 173, 100, 74, 215, 22, 114, 83, 175, 182, 58, 11, 0, 15, 94, 218, 170, 220, 251, 0, 8, 33, 181, 131, 147, 12, 211, 122, 183, 147, 27, 123, 182, 145, 169, 221, 90, 202, 3, 125, 90, 234, 9, 65, 204, 9, 56, 223, 7, 64, 8, 169, 29, 232, 31, 206, 73, 62, 8, 31, 67, 128, 138, 222, 7, 96, 252, 8, 33, 53, 159, 147, 222, 7, 128, 137, 192, 9, 23, 55, 209, 239, 3, 192, 208, 64, 15, 15, 28, 239, 3, 192, 146, 16, 82, 59, 208, 63, 140, 248, 145, 9, 224, 17, 95, 140, 249, 63, 254, 248, 99, 217, 191, 127, 191, 14, 0, 239, 191, 143, 127, 228, 123, 114, 99, 219, 179, 1, 132, 144, 154, 131, 254, 97, 123, 31, 0, 68, 191, 119, 239, 94, 29, 4, 16, 12, 244, 251, 0, 84, 29, 223, 7, 64, 72, 237, 193, 250, 62, 0, 60, 20, 132, 97, 0, 196, 255, 225, 135, 31, 234, 91, 129, 38, 0, 0, 190, 15, 128, 144, 218, 129, 245, 125, 0, 24, 2, 140, 108, 17, 174, 197, 143, 32, 160, 231, 4, 252, 117, 124, 250, 143, 144, 218, 67, 96, 197, 188, 15, 0, 183, 254, 240, 125, 0, 60, 28, 180, 98, 76, 119, 29, 0, 226, 174, 238, 168, 92, 202, 252, 248, 62, 0, 66, 106, 15, 90, 244, 102, 236, 127, 95, 175, 102, 250, 161, 159, 255, 25, 216, 94, 223, 251, 199, 67, 65, 120, 46, 96, 229, 184, 158, 250, 125, 0, 240, 49, 183, 3, 249, 62, 0, 66, 106, 62, 86, 35, 33, 196, 27, 232, 31, 251, 190, 152, 175, 22, 118, 7, 27, 21, 249, 99, 30, 1, 25, 2, 50, 10, 128, 231, 6, 204, 220, 2, 178, 5, 78, 28, 18, 82, 189, 208, 98, 46, 72, 223, 41, 193, 6, 129, 83, 249, 67, 228, 230, 101, 33, 184, 83, 96, 251, 178, 16, 130, 2, 134, 15, 110, 59, 33, 228, 220, 227, 251, 100, 215, 76, 45, 104, 44, 43, 11, 2, 168, 119, 250, 187, 235, 113, 117, 127, 174, 67, 7, 121, 186, 77, 27, 153, 217, 174, 236, 191, 8, 131, 103, 219, 183, 215, 219, 168, 51, 54, 219, 221, 4, 231, 45, 73, 96, 158, 57, 112, 7, 146, 192, 243, 10, 132, 144, 31, 133, 14, 0, 217, 251, 150, 4, 132, 13, 145, 27, 140, 147, 217, 54, 194, 55, 254, 166, 30, 64, 148, 16, 249, 130, 142, 29, 53, 11, 187, 116, 145, 103, 218, 182, 213, 194, 127, 187, 87, 47, 121, 167, 119, 111, 121, 171, 123, 119, 109, 131, 191, 91, 212, 185, 185, 185, 229, 182, 65, 223, 201, 115, 101, 224, 77, 203, 100, 216, 207, 19, 100, 200, 173, 101, 111, 38, 6, 252, 98, 18, 33, 103, 134, 147, 2, 128, 19, 167, 240, 13, 21, 5, 128, 39, 91, 181, 146, 121, 234, 10, 255, 106, 167, 78, 178, 73, 9, 125, 115, 143, 30, 90, 248, 239, 94, 114, 137, 124, 51, 96, 128, 124, 217, 183, 175, 124, 221, 191, 191, 236, 80, 118, 100, 4, 238, 185, 0, 136, 58, 59, 59, 91, 103, 6, 253, 167, 204, 215, 194, 239, 53, 126, 150, 244, 24, 251, 162, 12, 188, 113, 177, 12, 190, 53, 94, 127, 35, 17, 89, 2, 223, 67, 64, 200, 153, 161, 92, 0, 192, 18, 34, 79, 140, 123, 188, 156, 232, 177, 253, 212, 159, 238, 148, 5, 179, 31, 209, 126, 8, 10, 238, 0, 128, 43, 253, 92, 37, 236, 173, 74, 244, 192, 136, 31, 203, 157, 61, 123, 234, 245, 111, 7, 13, 210, 153, 192, 243, 23, 95, 172, 223, 55, 232, 108, 111, 128, 192, 251, 93, 191, 68, 6, 223, 188, 88, 176, 196, 149, 31, 1, 160, 235, 200, 63, 75, 219, 1, 191, 194, 255, 42, 180, 182, 35, 132, 84, 157, 147, 2, 0, 196, 142, 165, 9, 6, 16, 61, 214, 205, 178, 162, 0, 240, 84, 235, 214, 242, 90, 231, 206, 129, 12, 192, 4, 1, 19, 8, 222, 236, 214, 77, 103, 0, 216, 118, 206, 5, 24, 204, 29, 132, 203, 167, 45, 146, 81, 191, 222, 40, 253, 174, 155, 39, 221, 70, 63, 175, 179, 128, 110, 163, 30, 215, 180, 27, 248, 223, 39, 181, 35, 132, 156, 62, 39, 5, 0, 167, 216, 205, 210, 128, 44, 160, 162, 0, 0, 48, 190, 199, 248, 31, 233, 255, 22, 117, 213, 199, 18, 226, 71, 6, 0, 225, 35, 253, 55, 115, 0, 238, 73, 64, 92, 217, 145, 21, 116, 24, 246, 164, 180, 25, 242, 103, 25, 48, 117, 129, 92, 58, 105, 142, 92, 54, 45, 78, 122, 140, 254, 139, 92, 121, 235, 2, 233, 58, 244, 62, 221, 54, 53, 53, 181, 92, 91, 66, 200, 233, 81, 46, 0, 64, 216, 54, 209, 155, 165, 17, 190, 45, 0, 224, 246, 30, 198, 232, 200, 0, 48, 23, 0, 241, 111, 232, 218, 85, 11, 255, 175, 125, 250, 4, 198, 254, 240, 133, 208, 43, 26, 2, 92, 113, 203, 18, 185, 120, 248, 83, 50, 240, 250, 87, 165, 207, 196, 87, 100, 240, 77, 115, 116, 0, 232, 126, 205, 19, 210, 170, 239, 29, 202, 133, 239, 37, 32, 228, 76, 113, 82, 0, 0, 70, 236, 78, 225, 27, 42, 10, 0, 16, 52, 174, 234, 24, 10, 32, 8, 108, 84, 41, 63, 178, 0, 44, 33, 126, 100, 2, 230, 234, 95, 25, 151, 76, 120, 89, 198, 222, 153, 172, 211, 255, 75, 39, 60, 43, 3, 174, 123, 81, 122, 143, 123, 90, 26, 119, 187, 89, 85, 151, 255, 226, 18, 33, 228, 244, 209, 1, 224, 173, 13, 255, 171, 5, 237, 12, 2, 54, 140, 143, 241, 119, 119, 134, 217, 121, 4, 2, 76, 8, 34, 11, 192, 112, 0, 243, 1, 152, 248, 67, 96, 64, 128, 112, 167, 254, 78, 140, 176, 47, 187, 113, 161, 22, 63, 174, 250, 29, 46, 187, 83, 154, 246, 252, 169, 190, 250, 119, 188, 252, 238, 10, 39, 15, 9, 33, 85, 199, 7, 49, 47, 154, 115, 167, 22, 53, 12, 70, 228, 192, 45, 124, 212, 187, 253, 221, 152, 91, 116, 8, 2, 152, 20, 196, 16, 0, 235, 102, 246, 222, 8, 216, 29, 8, 220, 247, 246, 7, 142, 127, 84, 154, 245, 190, 77, 139, 31, 65, 160, 69, 159, 219, 41, 126, 66, 206, 48, 250, 71, 69, 98, 118, 10, 223, 137, 205, 31, 247, 240, 177, 196, 211, 123, 230, 43, 195, 230, 65, 32, 243, 144, 15, 68, 111, 174, 242, 238, 219, 121, 176, 59, 83, 123, 231, 183, 15, 177, 238, 28, 247, 243, 86, 32, 33, 103, 6, 187, 81, 21, 155, 173, 58, 22, 247, 113, 18, 66, 130, 7, 5, 15, 237, 91, 43, 171, 59, 40, 54, 59, 33, 36, 56, 116, 218, 237, 28, 91, 35, 229, 70, 138, 109, 190, 136, 51, 108, 217, 110, 105, 247, 139, 71, 196, 164, 224, 238, 84, 157, 16, 82, 115, 9, 172, 152, 175, 241, 58, 131, 1, 196, 63, 38, 233, 35, 105, 122, 211, 116, 29, 4, 156, 245, 38, 64, 16, 66, 106, 46, 1, 65, 95, 63, 188, 143, 220, 56, 162, 175, 76, 30, 218, 83, 207, 216, 3, 136, 223, 100, 0, 8, 2, 206, 134, 224, 84, 183, 244, 8, 33, 213, 31, 45, 226, 167, 166, 79, 145, 155, 175, 25, 32, 243, 163, 125, 114, 195, 213, 151, 106, 140, 248, 157, 25, 64, 163, 33, 227, 84, 27, 123, 71, 132, 144, 154, 135, 254, 49, 118, 80, 39, 253, 245, 220, 77, 81, 62, 189, 124, 244, 142, 49, 50, 98, 249, 7, 90, 252, 87, 39, 188, 47, 109, 111, 127, 88, 7, 1, 6, 0, 66, 106, 23, 250, 193, 157, 105, 163, 250, 171, 117, 241, 125, 22, 9, 91, 217, 67, 57, 93, 159, 76, 144, 30, 207, 36, 74, 167, 199, 151, 74, 236, 240, 73, 210, 124, 196, 117, 122, 137, 122, 66, 72, 237, 64, 207, 1, 220, 58, 102, 144, 60, 246, 171, 241, 106, 187, 108, 146, 15, 89, 64, 171, 159, 61, 168, 175, 252, 154, 177, 55, 73, 139, 145, 83, 164, 213, 53, 215, 107, 31, 192, 59, 1, 132, 212, 124, 2, 79, 213, 97, 14, 192, 24, 145, 1, 96, 204, 223, 250, 182, 25, 210, 242, 167, 15, 72, 203, 81, 83, 165, 205, 152, 27, 165, 221, 184, 105, 218, 199, 253, 216, 46, 33, 164, 102, 18, 88, 193, 93, 0, 76, 254, 33, 3, 192, 196, 32, 134, 3, 199, 62, 78, 214, 96, 29, 67, 0, 4, 2, 227, 207, 12, 128, 144, 154, 79, 185, 141, 63, 254, 114, 220, 15, 15, 252, 40, 225, 227, 95, 131, 3, 172, 55, 185, 106, 130, 52, 187, 122, 178, 170, 250, 225, 89, 128, 252, 252, 252, 114, 237, 9, 33, 53, 139, 114, 95, 172, 121, 250, 222, 169, 250, 118, 32, 214, 241, 239, 193, 33, 126, 243, 239, 193, 49, 39, 128, 247, 249, 155, 43, 191, 9, 2, 132, 144, 154, 75, 96, 210, 15, 27, 250, 233, 190, 207, 55, 232, 127, 5, 14, 209, 67, 252, 123, 247, 238, 21, 4, 3, 100, 1, 240, 49, 1, 131, 243, 0, 132, 212, 124, 180, 248, 49, 230, 55, 130, 198, 92, 0, 130, 2, 254, 53, 184, 249, 247, 224, 88, 198, 78, 187, 87, 7, 1, 103, 198, 224, 254, 71, 30, 132, 144, 154, 69, 185, 13, 4, 2, 60, 14, 140, 117, 35, 126, 100, 0, 24, 10, 96, 8, 96, 252, 76, 198, 192, 0, 64, 72, 205, 166, 220, 6, 94, 228, 113, 199, 164, 161, 106, 85, 124, 29, 255, 28, 23, 152, 4, 68, 16, 48, 129, 0, 217, 1, 191, 8, 68, 72, 237, 64, 207, 1, 152, 255, 245, 143, 12, 224, 150, 209, 3, 5, 87, 246, 158, 51, 87, 6, 68, 111, 130, 128, 89, 154, 225, 1, 218, 216, 58, 37, 132, 212, 12, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 172, 70, 66, 136, 55, 176, 26, 9, 33, 222, 192, 106, 36, 132, 120, 3, 171, 145, 16, 226, 13, 124, 115, 231, 206, 21, 39, 75, 151, 46, 213, 152, 109, 119, 3, 55, 206, 182, 160, 166, 181, 39, 196, 203, 104, 1, 125, 178, 107, 166, 149, 96, 4, 228, 108, 63, 53, 235, 90, 25, 190, 103, 212, 105, 183, 127, 232, 254, 189, 129, 245, 211, 105, 47, 197, 223, 105, 170, 210, 158, 16, 47, 83, 94, 64, 119, 41, 155, 162, 42, 2, 50, 237, 33, 252, 161, 239, 249, 164, 249, 174, 9, 50, 248, 189, 178, 32, 80, 149, 246, 224, 178, 94, 95, 151, 11, 2, 85, 105, 239, 20, 190, 89, 15, 166, 61, 33, 94, 230, 7, 1, 249, 197, 127, 186, 1, 96, 230, 134, 97, 50, 242, 31, 195, 165, 201, 103, 35, 2, 89, 64, 85, 218, 131, 31, 19, 0, 128, 51, 8, 236, 251, 230, 3, 6, 0, 66, 42, 193, 55, 99, 198, 140, 50, 241, 64, 252, 23, 43, 254, 166, 240, 7, 1, 212, 185, 27, 184, 49, 237, 71, 201, 100, 25, 249, 233, 112, 249, 117, 254, 3, 58, 16, 84, 181, 61, 196, 111, 48, 65, 32, 216, 246, 16, 59, 252, 157, 192, 22, 76, 123, 66, 188, 76, 249, 0, 0, 241, 159, 102, 0, 0, 191, 235, 234, 147, 69, 253, 127, 200, 32, 170, 210, 222, 136, 127, 69, 252, 222, 42, 7, 0, 248, 58, 131, 128, 89, 15, 166, 61, 33, 94, 70, 11, 72, 139, 223, 21, 0, 64, 85, 4, 8, 126, 76, 0, 0, 206, 171, 255, 233, 180, 135, 240, 157, 129, 32, 152, 246, 132, 120, 25, 45, 160, 83, 225, 110, 224, 198, 214, 198, 137, 219, 223, 141, 173, 141, 19, 183, 191, 27, 91, 27, 39, 110, 127, 82, 125, 25, 59, 118, 236, 121, 197, 20, 219, 177, 213, 86, 172, 70, 66, 206, 7, 54, 81, 186, 217, 62, 231, 17, 1, 182, 186, 31, 139, 41, 182, 99, 171, 173, 88, 141, 132, 156, 15, 108, 162, 116, 242, 202, 99, 247, 73, 209, 238, 215, 68, 190, 123, 239, 172, 4, 1, 83, 108, 199, 86, 91, 177, 26, 9, 57, 31, 216, 68, 233, 196, 25, 0, 206, 70, 16, 48, 197, 118, 108, 181, 21, 171, 145, 144, 243, 129, 77, 148, 78, 24, 0, 206, 60, 86, 35, 33, 231, 3, 155, 40, 157, 156, 139, 0, 96, 59, 174, 218, 140, 213, 72, 200, 249, 192, 8, 17, 66, 135, 184, 221, 2, 103, 0, 56, 243, 88, 141, 132, 156, 15, 32, 66, 35, 242, 99, 255, 92, 111, 21, 185, 51, 8, 48, 0, 252, 120, 172, 70, 66, 206, 7, 16, 161, 17, 120, 69, 65, 128, 1, 224, 204, 226, 147, 143, 47, 151, 114, 124, 243, 135, 50, 204, 182, 165, 81, 57, 156, 109, 65, 77, 107, 79, 170, 13, 70, 136, 167, 10, 2, 206, 0, 0, 176, 109, 218, 57, 219, 195, 191, 42, 1, 194, 118, 60, 94, 64, 11, 200, 60, 58, 235, 38, 40, 1, 57, 218, 187, 223, 7, 80, 213, 246, 206, 199, 128, 79, 167, 189, 251, 125, 0, 65, 181, 39, 213, 6, 8, 23, 24, 97, 59, 131, 64, 69, 1, 192, 45, 114, 83, 111, 203, 30, 108, 251, 244, 58, 229, 5, 228, 255, 14, 64, 149, 4, 228, 111, 111, 123, 31, 64, 85, 218, 3, 247, 119, 1, 170, 210, 222, 246, 62, 128, 160, 218, 147, 106, 131, 83, 244, 21, 5, 1, 167, 184, 221, 2, 119, 139, 223, 89, 111, 219, 31, 113, 4, 0, 35, 254, 211, 13, 0, 182, 247, 1, 84, 165, 61, 248, 49, 1, 192, 13, 190, 20, 20, 84, 123, 82, 45, 184, 99, 202, 149, 229, 68, 12, 220, 65, 0, 98, 118, 138, 219, 41, 112, 211, 214, 86, 239, 222, 23, 249, 1, 223, 39, 139, 154, 105, 193, 104, 241, 187, 222, 7, 128, 58, 119, 3, 55, 166, 189, 237, 125, 0, 85, 105, 111, 190, 14, 92, 46, 8, 4, 217, 222, 249, 13, 64, 131, 182, 5, 209, 158, 84, 15, 156, 1, 192, 41, 122, 224, 180, 57, 197, 237, 20, 185, 173, 158, 87, 255, 202, 41, 31, 0, 92, 239, 3, 8, 86, 128, 70, 116, 238, 175, 3, 87, 165, 189, 17, 191, 243, 125, 0, 85, 105, 239, 12, 2, 129, 245, 32, 218, 147, 115, 199, 169, 102, 217, 221, 25, 128, 51, 8, 152, 117, 247, 213, 221, 96, 171, 119, 102, 6, 182, 253, 145, 50, 180, 128, 180, 248, 93, 1, 64, 7, 129, 42, 8, 16, 252, 152, 0, 0, 202, 93, 253, 79, 163, 61, 132, 95, 46, 27, 8, 162, 61, 57, 119, 4, 19, 0, 220, 65, 224, 116, 196, 15, 24, 0, 130, 163, 76, 64, 167, 192, 221, 192, 141, 173, 141, 19, 183, 191, 27, 91, 27, 39, 110, 127, 55, 182, 54, 78, 220, 254, 164, 122, 226, 12, 0, 38, 8, 56, 197, 93, 81, 0, 176, 213, 81, 252, 193, 99, 53, 18, 114, 174, 113, 7, 0, 224, 14, 0, 78, 161, 187, 69, 239, 132, 99, 255, 224, 177, 26, 9, 57, 91, 216, 138, 219, 199, 25, 4, 32, 102, 91, 22, 0, 155, 83, 244, 78, 24, 0, 130, 199, 106, 36, 228, 108, 97, 19, 188, 13, 19, 0, 42, 26, 6, 236, 77, 252, 227, 73, 54, 128, 109, 6, 128, 224, 177, 26, 9, 57, 223, 152, 0, 0, 108, 89, 128, 219, 102, 48, 226, 103, 0, 8, 14, 171, 145, 144, 243, 141, 51, 0, 152, 44, 192, 41, 120, 216, 144, 5, 24, 59, 128, 248, 157, 1, 0, 56, 251, 12, 54, 251, 240, 18, 86, 35, 33, 231, 27, 167, 136, 65, 101, 65, 192, 216, 156, 1, 192, 86, 108, 251, 242, 50, 86, 35, 33, 213, 9, 103, 16, 48, 169, 63, 112, 7, 5, 51, 55, 96, 196, 127, 221, 200, 89, 23, 40, 46, 212, 27, 142, 98, 219, 135, 87, 177, 26, 9, 169, 110, 152, 32, 96, 2, 129, 83, 252, 206, 0, 128, 117, 4, 9, 191, 248, 163, 21, 205, 20, 245, 77, 32, 176, 245, 237, 101, 172, 70, 66, 170, 35, 206, 32, 0, 222, 120, 229, 135, 108, 192, 12, 1, 204, 4, 225, 21, 253, 238, 150, 159, 77, 92, 158, 59, 109, 236, 235, 127, 189, 121, 220, 226, 121, 42, 0, 68, 42, 46, 176, 245, 235, 101, 172, 70, 66, 170, 35, 70, 248, 88, 135, 192, 159, 122, 232, 65, 57, 176, 117, 174, 20, 236, 122, 181, 92, 22, 128, 97, 0, 234, 193, 180, 113, 175, 31, 187, 245, 218, 165, 133, 183, 77, 92, 249, 254, 207, 39, 39, 245, 117, 247, 233, 117, 172, 70, 66, 170, 35, 166, 76, 30, 241, 146, 220, 56, 230, 85, 149, 230, 191, 34, 83, 71, 205, 149, 93, 175, 206, 150, 212, 55, 230, 73, 241, 167, 235, 228, 248, 127, 254, 42, 153, 31, 172, 150, 249, 191, 127, 84, 7, 128, 27, 199, 188, 38, 63, 157, 16, 47, 183, 79, 94, 157, 255, 139, 235, 214, 60, 126, 219, 164, 196, 22, 182, 190, 189, 138, 213, 72, 72, 117, 4, 229, 234, 203, 30, 169, 139, 0, 48, 97, 216, 76, 193, 114, 210, 213, 47, 170, 229, 44, 121, 246, 254, 89, 242, 78, 220, 50, 249, 110, 247, 118, 185, 105, 204, 34, 21, 24, 230, 201, 212, 145, 115, 202, 2, 192, 181, 203, 69, 137, 255, 196, 29, 83, 146, 63, 83, 203, 169, 28, 10, 252, 128, 213, 72, 72, 117, 4, 101, 232, 128, 251, 154, 92, 115, 197, 31, 139, 175, 29, 246, 140, 14, 0, 6, 37, 106, 197, 203, 114, 227, 232, 215, 100, 138, 202, 12, 204, 246, 180, 113, 139, 229, 231, 147, 86, 33, 0, 136, 10, 0, 121, 138, 57, 232, 199, 214, 191, 23, 177, 26, 9, 169, 174, 168, 180, 254, 242, 161, 3, 30, 40, 28, 53, 248, 127, 101, 194, 240, 103, 253, 1, 224, 197, 128, 224, 175, 31, 61, 223, 191, 62, 75, 5, 130, 57, 114, 243, 184, 56, 21, 0, 146, 32, 126, 128, 44, 224, 115, 29, 73, 84, 177, 245, 239, 53, 172, 70, 66, 170, 43, 87, 244, 187, 103, 226, 85, 3, 31, 200, 68, 0, 24, 119, 229, 95, 100, 226, 213, 207, 203, 164, 17, 47, 104, 193, 79, 29, 53, 95, 9, 126, 137, 158, 23, 184, 225, 154, 5, 122, 253, 182, 137, 43, 205, 213, 223, 144, 163, 152, 205, 0, 80, 134, 213, 72, 72, 117, 69, 101, 0, 151, 94, 57, 240, 55, 123, 71, 94, 254, 251, 19, 163, 135, 60, 166, 231, 2, 38, 249, 51, 128, 27, 84, 250, 127, 203, 248, 4, 185, 117, 124, 188, 30, 247, 227, 202, 239, 18, 63, 64, 22, 240, 177, 78, 1, 84, 177, 237, 195, 75, 88, 141, 132, 84, 87, 84, 0, 104, 63, 164, 223, 61, 187, 174, 28, 112, 255, 241, 225, 131, 30, 150, 241, 87, 61, 21, 24, 2, 76, 25, 57, 87, 110, 30, 31, 39, 211, 198, 190, 46, 183, 94, 27, 47, 183, 95, 183, 218, 22, 0, 64, 170, 226, 102, 6, 0, 6, 0, 82, 195, 80, 1, 160, 169, 34, 81, 113, 116, 232, 128, 251, 213, 48, 224, 73, 199, 68, 224, 108, 153, 122, 205, 92, 197, 28, 185, 73, 5, 129, 159, 79, 14, 76, 254, 185, 41, 82, 60, 207, 0, 192, 0, 64, 106, 24, 87, 244, 187, 167, 158, 186, 250, 207, 24, 54, 232, 193, 188, 161, 253, 127, 163, 231, 1, 32, 126, 220, 14, 44, 203, 2, 94, 214, 1, 96, 218, 184, 69, 114, 123, 197, 1, 160, 84, 241, 9, 3, 0, 3, 0, 169, 97, 168, 171, 254, 133, 35, 126, 242, 219, 113, 163, 135, 252, 105, 223, 176, 65, 15, 201, 168, 203, 255, 80, 54, 17, 168, 159, 7, 120, 73, 223, 255, 191, 69, 13, 3, 110, 155, 152, 88, 145, 248, 13, 217, 10, 207, 15, 3, 172, 70, 66, 170, 43, 67, 251, 223, 119, 193, 240, 203, 30, 190, 120, 212, 224, 71, 223, 188, 106, 224, 3, 199, 134, 13, 154, 33, 227, 175, 122, 90, 207, 3, 148, 13, 3, 102, 233, 73, 64, 199, 189, 255, 138, 192, 48, 224, 49, 6, 0, 139, 145, 144, 234, 10, 202, 144, 254, 247, 54, 80, 195, 128, 23, 135, 244, 155, 94, 172, 2, 130, 140, 25, 250, 120, 185, 0, 128, 167, 255, 110, 189, 118, 217, 169, 134, 0, 224, 152, 98, 171, 238, 80, 21, 219, 190, 188, 128, 213, 72, 72, 117, 230, 138, 126, 119, 215, 81, 220, 165, 200, 191, 162, 223, 61, 50, 242, 242, 223, 235, 97, 128, 9, 0, 152, 3, 64, 16, 184, 109, 226, 138, 202, 178, 128, 125, 138, 161, 254, 24, 96, 221, 87, 109, 199, 106, 36, 164, 58, 163, 132, 127, 161, 98, 130, 34, 83, 33, 106, 40, 32, 99, 85, 22, 96, 130, 192, 212, 107, 230, 249, 51, 0, 235, 115, 0, 78, 240, 104, 240, 221, 126, 253, 235, 98, 219, 95, 109, 198, 106, 36, 164, 58, 163, 68, 127, 129, 162, 191, 226, 48, 2, 0, 178, 128, 178, 32, 240, 132, 255, 161, 160, 57, 122, 18, 240, 246, 201, 171, 109, 162, 119, 114, 84, 177, 216, 175, 125, 93, 108, 251, 171, 205, 248, 254, 216, 166, 205, 121, 195, 118, 64, 231, 26, 219, 113, 85, 21, 91, 191, 53, 133, 96, 203, 165, 147, 230, 92, 208, 103, 226, 203, 23, 94, 50, 225, 165, 139, 252, 38, 107, 127, 231, 226, 119, 130, 162, 132, 223, 70, 241, 159, 178, 0, 80, 22, 4, 204, 92, 0, 158, 7, 184, 101, 60, 50, 128, 74, 3, 0, 110, 7, 6, 158, 10, 68, 177, 237, 175, 54, 83, 110, 99, 115, 143, 30, 242, 70, 207, 158, 178, 163, 87, 47, 121, 91, 129, 37, 182, 157, 62, 6, 167, 0, 192, 254, 253, 251, 79, 162, 247, 181, 207, 139, 58, 97, 68, 157, 56, 162, 78, 32, 189, 196, 182, 169, 183, 245, 123, 54, 97, 169, 82, 169, 235, 95, 218, 74, 29, 197, 169, 234, 173, 191, 127, 112, 170, 186, 170, 160, 68, 31, 169, 120, 79, 81, 90, 22, 0, 166, 203, 88, 253, 76, 64, 217, 243, 0, 55, 141, 93, 232, 252, 18, 208, 169, 192, 83, 129, 131, 245, 129, 169, 98, 219, 87, 109, 70, 255, 88, 221, 173, 155, 172, 239, 222, 93, 16, 0, 182, 43, 193, 67, 252, 187, 122, 247, 214, 75, 108, 195, 142, 122, 103, 195, 83, 5, 128, 94, 99, 158, 148, 94, 227, 102, 10, 2, 64, 159, 137, 179, 180, 248, 251, 94, 55, 223, 31, 4, 102, 105, 59, 234, 77, 16, 56, 87, 193, 224, 199, 150, 238, 234, 119, 208, 67, 253, 46, 186, 118, 237, 170, 233, 166, 126, 111, 176, 153, 237, 158, 234, 119, 5, 155, 211, 222, 165, 75, 23, 233, 165, 126, 143, 216, 70, 61, 108, 88, 135, 143, 241, 199, 182, 241, 119, 215, 97, 217, 91, 253, 45, 140, 15, 64, 159, 102, 221, 217, 39, 150, 166, 63, 231, 18, 254, 166, 13, 142, 223, 244, 135, 182, 198, 222, 169, 83, 39, 189, 52, 125, 249, 63, 114, 101, 37, 196, 191, 60, 169, 84, 244, 251, 183, 217, 79, 7, 37, 250, 16, 197, 2, 197, 145, 178, 0, 112, 183, 30, 2, 96, 14, 160, 108, 30, 96, 174, 190, 21, 232, 18, 187, 13, 124, 57, 72, 63, 15, 96, 138, 109, 127, 181, 21, 223, 10, 117, 2, 36, 169, 147, 100, 157, 250, 163, 87, 148, 1, 192, 142, 122, 248, 153, 134, 21, 5, 128, 30, 163, 254, 44, 101, 1, 224, 25, 45, 116, 91, 6, 80, 22, 0, 158, 209, 126, 232, 235, 124, 6, 0, 8, 2, 2, 133, 80, 252, 166, 74, 11, 4, 2, 127, 136, 5, 2, 50, 235, 70, 232, 157, 59, 119, 214, 54, 35, 98, 212, 25, 97, 57, 219, 25, 27, 252, 177, 116, 138, 20, 126, 198, 223, 212, 65, 164, 38, 0, 161, 13, 150, 168, 199, 126, 77, 95, 240, 129, 205, 212, 195, 102, 48, 251, 196, 18, 192, 207, 128, 126, 97, 243, 127, 196, 74, 139, 179, 95, 191, 169, 92, 177, 253, 254, 207, 36, 74, 240, 152, 8, 252, 47, 69, 190, 9, 0, 163, 6, 63, 170, 51, 0, 4, 0, 60, 17, 24, 196, 93, 0, 80, 160, 248, 157, 255, 176, 117, 177, 237, 175, 182, 226, 91, 174, 254, 232, 171, 212, 73, 145, 172, 78, 130, 13, 234, 143, 185, 69, 157, 8, 16, 61, 174, 252, 88, 98, 27, 118, 212, 195, 15, 254, 104, 104, 11, 0, 221, 71, 62, 42, 8, 0, 61, 71, 255, 69, 122, 141, 125, 90, 137, 252, 89, 37, 246, 23, 252, 65, 96, 150, 95, 252, 47, 104, 59, 234, 225, 103, 14, 228, 92, 224, 46, 16, 139, 83, 20, 126, 115, 165, 5, 130, 49, 109, 33, 52, 44, 141, 48, 33, 8, 19, 0, 176, 141, 165, 211, 207, 216, 141, 111, 199, 142, 29, 117, 221, 197, 23, 95, 28, 104, 11, 63, 244, 111, 218, 195, 6, 176, 13, 63, 212, 163, 157, 241, 49, 24, 31, 179, 52, 251, 70, 27, 35, 112, 180, 49, 251, 1, 198, 7, 253, 85, 36, 102, 91, 65, 27, 236, 195, 28, 135, 223, 28, 40, 182, 223, 255, 153, 70, 137, 190, 159, 34, 213, 4, 0, 60, 25, 56, 201, 113, 59, 16, 95, 7, 14, 98, 24, 112, 68, 161, 95, 18, 98, 138, 109, 95, 181, 21, 95, 188, 250, 67, 38, 170, 63, 36, 134, 1, 107, 213, 9, 0, 177, 111, 82, 39, 11, 174, 250, 88, 98, 27, 118, 212, 195, 15, 254, 104, 104, 11, 0, 221, 70, 60, 42, 221, 71, 62, 38, 61, 175, 121, 60, 144, 5, 64, 236, 151, 168, 43, 190, 206, 6, 244, 149, 95, 137, 223, 127, 245, 135, 159, 57, 144, 115, 129, 179, 56, 69, 3, 108, 39, 113, 69, 197, 180, 129, 8, 32, 32, 8, 108, 238, 220, 185, 229, 88, 186, 116, 169, 198, 108, 27, 129, 99, 217, 161, 67, 135, 114, 190, 192, 237, 143, 227, 129, 47, 150, 16, 153, 211, 23, 216, 252, 157, 159, 199, 233, 11, 108, 254, 38, 56, 0, 180, 193, 126, 252, 31, 177, 210, 98, 130, 137, 89, 2, 127, 149, 46, 182, 223, 255, 153, 70, 137, 62, 70, 241, 15, 133, 158, 7, 24, 210, 255, 62, 49, 111, 10, 66, 0, 184, 126, 212, 124, 21, 0, 78, 122, 31, 128, 27, 220, 9, 88, 239, 63, 108, 93, 108, 251, 170, 173, 248, 226, 212, 31, 62, 65, 253, 17, 87, 250, 131, 0, 174, 244, 72, 247, 13, 216, 134, 29, 245, 240, 131, 255, 235, 234, 143, 237, 14, 0, 93, 134, 61, 34, 93, 135, 255, 94, 5, 0, 100, 1, 127, 82, 226, 126, 162, 44, 8, 232, 76, 0, 129, 192, 15, 182, 181, 248, 159, 208, 126, 238, 3, 58, 155, 56, 139, 17, 23, 78, 96, 156, 252, 126, 115, 80, 5, 2, 54, 194, 1, 70, 160, 159, 236, 154, 105, 5, 117, 102, 127, 32, 24, 127, 28, 23, 246, 3, 127, 35, 104, 155, 47, 112, 247, 31, 140, 63, 142, 1, 126, 104, 135, 253, 96, 29, 75, 255, 71, 12, 170, 32, 224, 152, 207, 239, 14, 30, 182, 223, 127, 69, 152, 55, 253, 86, 21, 37, 250, 139, 20, 179, 21, 199, 16, 0, 192, 200, 193, 127, 40, 251, 98, 208, 8, 188, 21, 104, 182, 63, 11, 56, 229, 19, 129, 199, 21, 31, 40, 6, 250, 15, 93, 23, 219, 254, 106, 35, 190, 69, 234, 132, 89, 170, 254, 248, 16, 55, 174, 240, 72, 243, 49, 214, 135, 232, 177, 196, 54, 236, 168, 135, 223, 98, 229, 255, 154, 226, 164, 0, 112, 213, 67, 210, 101, 216, 111, 117, 16, 232, 54, 226, 127, 253, 65, 224, 241, 178, 225, 0, 2, 129, 31, 108, 195, 142, 122, 248, 185, 15, 232, 108, 98, 138, 57, 241, 157, 2, 240, 87, 5, 85, 140, 200, 204, 201, 223, 182, 109, 219, 74, 5, 215, 174, 93, 59, 13, 246, 5, 42, 243, 71, 223, 216, 79, 85, 252, 113, 44, 237, 219, 183, 15, 202, 223, 249, 25, 0, 218, 225, 248, 252, 31, 49, 168, 98, 218, 2, 252, 14, 208, 167, 191, 74, 23, 219, 223, 192, 13, 10, 2, 192, 29, 83, 174, 180, 214, 159, 10, 20, 37, 250, 190, 10, 253, 64, 16, 24, 58, 224, 55, 229, 179, 128, 107, 230, 202, 79, 39, 232, 151, 130, 218, 196, 15, 240, 130, 144, 255, 40, 198, 235, 14, 253, 197, 182, 191, 218, 136, 15, 98, 70, 16, 192, 149, 29, 233, 61, 132, 142, 137, 193, 21, 74, 244, 88, 98, 27, 118, 212, 195, 15, 254, 243, 213, 137, 230, 14, 0, 157, 175, 156, 33, 93, 174, 122, 88, 5, 128, 178, 32, 128, 76, 0, 195, 1, 8, 93, 207, 11, 104, 209, 255, 89, 111, 195, 142, 122, 248, 185, 15, 232, 108, 98, 10, 78, 244, 214, 173, 91, 7, 196, 133, 19, 216, 95, 21, 84, 65, 91, 35, 52, 128, 19, 191, 50, 193, 193, 15, 109, 176, 47, 8, 175, 50, 127, 8, 202, 92, 89, 209, 174, 50, 127, 244, 107, 62, 11, 62, 95, 101, 254, 38, 24, 161, 111, 128, 207, 80, 213, 223, 3, 142, 209, 252, 14, 204, 254, 253, 85, 129, 98, 251, 59, 24, 76, 49, 1, 192, 137, 205, 223, 134, 18, 61, 238, 6, 236, 49, 1, 96, 72, 191, 123, 2, 119, 3, 16, 0, 144, 5, 84, 18, 0, 64, 154, 226, 54, 255, 225, 232, 98, 219, 87, 109, 196, 7, 49, 191, 166, 64, 90, 191, 88, 157, 152, 16, 58, 174, 244, 6, 108, 195, 142, 122, 248, 193, 127, 142, 250, 99, 187, 3, 64, 199, 33, 191, 145, 78, 67, 203, 130, 64, 32, 19, 184, 250, 15, 90, 232, 184, 210, 27, 244, 182, 178, 163, 30, 126, 238, 3, 58, 155, 152, 210, 166, 77, 155, 192, 201, 143, 147, 216, 111, 14, 186, 24, 209, 152, 62, 32, 166, 25, 51, 102, 88, 197, 6, 80, 103, 252, 204, 62, 43, 243, 55, 130, 66, 155, 96, 252, 77, 191, 70, 148, 193, 244, 143, 190, 177, 52, 156, 206, 239, 2, 109, 16, 164, 76, 127, 126, 115, 160, 252, 252, 186, 46, 214, 191, 5, 48, 229, 116, 51, 0, 128, 162, 132, 255, 178, 226, 135, 97, 192, 229, 106, 24, 224, 248, 114, 208, 180, 49, 120, 55, 192, 41, 39, 3, 241, 72, 240, 253, 186, 51, 127, 177, 237, 171, 54, 226, 123, 69, 253, 225, 230, 169, 63, 224, 2, 5, 174, 238, 11, 21, 16, 59, 174, 246, 88, 98, 27, 118, 212, 195, 15, 254, 179, 212, 9, 118, 82, 0, 184, 226, 94, 65, 16, 40, 203, 4, 48, 28, 192, 156, 0, 2, 193, 239, 180, 216, 127, 0, 219, 191, 213, 245, 240, 115, 31, 208, 217, 196, 20, 35, 42, 96, 59, 105, 79, 85, 208, 6, 1, 4, 160, 45, 104, 213, 170, 85, 80, 2, 133, 48, 145, 61, 160, 143, 202, 252, 205, 241, 161, 111, 236, 163, 50, 127, 248, 224, 152, 208, 38, 152, 0, 224, 252, 12, 102, 31, 102, 159, 254, 143, 26, 84, 65, 31, 206, 64, 229, 55, 7, 10, 2, 64, 101, 65, 224, 116, 231, 0, 12, 74, 244, 125, 20, 7, 76, 0, 184, 114, 224, 3, 129, 55, 6, 35, 0, 224, 37, 161, 63, 155, 112, 202, 91, 130, 248, 106, 240, 179, 250, 96, 252, 197, 182, 159, 218, 136, 239, 37, 245, 199, 123, 89, 137, 26, 87, 245, 121, 10, 92, 225, 1, 4, 111, 214, 97, 71, 61, 252, 224, 255, 130, 58, 153, 221, 1, 224, 226, 203, 239, 145, 142, 131, 167, 75, 167, 33, 247, 75, 231, 161, 15, 234, 108, 160, 243, 149, 42, 16, 32, 35, 208, 89, 1, 4, 95, 182, 14, 187, 174, 87, 126, 238, 3, 58, 155, 160, 224, 36, 197, 73, 139, 147, 222, 185, 174, 43, 131, 40, 70, 56, 192, 136, 14, 203, 202, 4, 135, 125, 64, 40, 240, 199, 126, 131, 21, 168, 57, 206, 202, 252, 205, 103, 105, 217, 178, 165, 110, 19, 172, 63, 64, 80, 50, 251, 193, 103, 241, 127, 212, 74, 139, 105, 107, 142, 211, 4, 55, 127, 181, 46, 149, 5, 128, 51, 133, 18, 254, 22, 197, 113, 4, 128, 33, 253, 167, 203, 232, 43, 30, 83, 1, 192, 100, 1, 102, 50, 176, 194, 44, 0, 119, 2, 54, 40, 250, 249, 15, 91, 23, 219, 126, 106, 27, 190, 231, 148, 152, 33, 104, 8, 123, 182, 63, 24, 224, 42, 111, 192, 54, 236, 70, 248, 240, 71, 67, 119, 0, 192, 109, 64, 29, 4, 174, 152, 174, 184, 87, 7, 130, 78, 67, 30, 208, 34, 71, 86, 16, 0, 193, 65, 217, 81, 15, 63, 115, 32, 231, 2, 20, 8, 4, 224, 68, 199, 73, 219, 162, 69, 139, 192, 201, 175, 29, 42, 41, 56, 201, 155, 55, 111, 174, 251, 192, 210, 136, 7, 162, 58, 21, 70, 36, 102, 159, 54, 31, 39, 240, 67, 214, 128, 37, 218, 218, 124, 156, 224, 56, 204, 177, 225, 179, 216, 124, 156, 224, 24, 224, 135, 254, 205, 103, 49, 199, 232, 255, 168, 167, 44, 240, 5, 216, 103, 179, 102, 205, 244, 177, 154, 126, 252, 46, 186, 152, 0, 112, 182, 131, 128, 18, 254, 35, 138, 34, 4, 0, 48, 108, 224, 131, 254, 23, 133, 56, 178, 128, 137, 203, 43, 250, 126, 0, 190, 19, 240, 149, 226, 167, 254, 195, 214, 197, 182, 159, 218, 134, 239, 105, 37, 132, 153, 10, 8, 251, 121, 5, 68, 254, 162, 18, 187, 1, 219, 176, 163, 30, 126, 240, 71, 67, 91, 0, 232, 112, 217, 157, 114, 241, 79, 238, 146, 64, 32, 80, 25, 65, 217, 208, 224, 190, 31, 192, 182, 182, 79, 215, 126, 232, 235, 92, 62, 9, 136, 19, 28, 39, 44, 78, 86, 156, 192, 70, 204, 192, 136, 77, 59, 86, 80, 208, 214, 156, 248, 166, 47, 128, 117, 128, 126, 32, 46, 216, 208, 183, 177, 155, 125, 154, 109, 227, 107, 250, 49, 62, 88, 58, 219, 161, 222, 28, 31, 250, 69, 157, 57, 102, 212, 195, 134, 117, 211, 63, 142, 13, 118, 83, 111, 234, 140, 29, 152, 62, 204, 54, 48, 251, 134, 191, 255, 163, 90, 139, 241, 135, 159, 51, 128, 152, 37, 250, 241, 187, 234, 114, 14, 3, 192, 40, 69, 182, 9, 0, 24, 6, 140, 248, 201, 111, 29, 67, 129, 217, 254, 247, 4, 86, 152, 5, 20, 43, 86, 251, 15]);
fileData4.push.apply(fileData4, [59, 80, 108, 251, 170, 77, 248, 158, 80, 127, 196, 39, 21, 79, 41, 97, 63, 227, 15, 6, 224, 89, 191, 224, 1, 236, 16, 62, 252, 76, 67, 91, 0, 208, 65, 96, 208, 175, 228, 135, 64, 112, 183, 22, 185, 25, 30, 152, 117, 109, 87, 245, 240, 67, 95, 231, 50, 0, 224, 196, 111, 218, 180, 169, 22, 0, 68, 129, 147, 214, 8, 202, 136, 9, 39, 179, 118, 182, 20, 248, 160, 222, 44, 141, 63, 78, 252, 38, 77, 154, 4, 132, 132, 37, 246, 131, 117, 244, 143, 109, 128, 118, 32, 54, 54, 54, 32, 24, 3, 108, 198, 223, 248, 153, 58, 216, 140, 221, 236, 23, 235, 166, 111, 231, 113, 152, 182, 198, 223, 217, 222, 248, 155, 122, 3, 182, 205, 190, 253, 31, 245, 164, 98, 250, 194, 190, 156, 251, 199, 231, 52, 235, 232, 195, 239, 174, 139, 51, 0, 160, 216, 254, 46, 103, 2, 37, 250, 86, 138, 47, 77, 0, 24, 218, 255, 126, 25, 62, 232, 33, 255, 115, 1, 207, 235, 0, 112, 195, 232, 5, 167, 122, 87, 32, 178, 128, 195, 250, 32, 93, 197, 182, 191, 218, 129, 248, 254, 31, 32, 119, 33, 90, 5, 145, 174, 95, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'sprites.png', fileData4, true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage();

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 11504;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,99,97,110,39,116,32,102,111,112,101,110,0,0,0,0,0,46,186,232,62,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,34,37,115,34,32,102,114,111,109,32,102,105,108,101,10,0,0,0,0,0,255,0,0,0,0,255,255,255,255,0,0,0,0,80,111,114,116,97,108,32,37,100,32,45,62,32,37,100,10,0,0,0,0,0,0,0,0,0,255,0,255,0,0,0,0,255,255,0,255,0,0,0,0,83,68,76,95,67,114,101,97,116,101,82,71,66,83,117,114,102,97,99,101,0,0,0,0,83,68,76,95,73,110,105,116,0,0,0,0,0,0,0,0,91,83,68,76,93,32,73,110,105,116,10,0,0,0,0,0,83,68,76,95,83,101,116,86,105,100,101,111,77,111,100,101,0,0,0,0,0,0,0,0,91,83,68,76,93,32,83,101,116,86,105,100,101,111,77,111,100,101,10,0,0,0,0,0,91,71,97,109,101,93,32,67,114,101,97,116,101,32,70,114,97,109,101,98,117,102,102,101,114,10,0,0,0,0,0,0,91,71,97,109,101,93,32,112,108,97,121,101,114,32,73,110,105,116,10,0,0,0,0,0,102,108,111,111,114,115,46,112,110,103,0,0,0,0,0,0,115,112,114,105,116,101,115,46,112,110,103,0,0,0,0,0,112,97,114,116,105,99,108,101,115,46,112,110,103,0,0,0,102,111,110,116,46,112,110,103,0,0,0,0,0,0,0,0,91,71,97,109,101,93,32,76,111,97,100,32,65,114,116,10,0,0,0,0,0,0,0,0,108,101,118,101,108,48,48,49,46,112,110,103,0,0,0,0,91,71,97,109,101,93,32,76,111,97,100,32,76,101,118,101,108,115,10,0,0,0,0,0,91,71,97,109,101,93,32,73,110,105,116,10,0,0,0,0,91,69,82,82,79,82,93,32,80,108,97,121,101,114,32,119,104,101,110,32,111,117,116,32,111,102,32,98,111,117,110,100,115,10,0,0,0,0,0,0,80,108,97,121,101,114,32,105,115,32,104,97,115,32,98,101,101,110,32,116,101,108,101,112,111,114,116,101,100,32,116,111,32,116,104,101,32,98,101,103,105,110,110,105,110,103,0,0,0,0,128,63,0,0,128,63,89,111,117,32,104,97,118,101,32,98,101,101,110,32,100,101,102,101,97,116,101,100,33,0,82,101,102,114,101,115,104,32,116,111,32,116,114,121,32,97,103,97,105,110,0,0,0,0,89,111,117,32,107,105,108,108,101,100,32,116,111,32,104,105,103,104,32,109,97,103,101,44,0,0,0,0,0,0,0,0,121,111,117,32,109,111,110,115,116,101,114,33,0,0,0,0,84,104,97,110,107,115,32,102,111,114,32,112,108,97,121,105,110,103,33,0,0,0,0,0,80,108,101,97,115,101,32,118,111,116,101,32,102,111,114,32,116,104,105,115,32,101,110,116,114,121,0,0,0,0,0,0,72,97,110,100,109,97,100,101,32,98,121,32,103,105,110,103,101,114,66,105,108,108,0,0,73,103,110,105,115,32,70,108,97,109,109,97,0,0,0,0,200,150,0,255,0,0,0,0,84,101,114,114,97,32,77,111,116,0,0,0,0,0,0,0,65,113,117,105,115,32,77,101,114,103,0,0,0,0,0,0,65,101,114,105,115,32,70,117,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,101,119,32,83,112,101,108,108,58,32,37,115,0,0,0,91,69,82,82,79,82,93,32,71,97,109,101,32,112,111,105,110,116,101,114,32,112,97,115,115,101,100,32,116,111,32,109,97,105,110,95,108,111,111,112,32,105,115,32,110,117,108,108,10,0,0,0,0,0,0,0,69,120,105,116,105,110,103,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,49,102,32,109,115,0,71,97,109,101,32,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,46,10,0,0,0,0,0,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,95,43,45,61,42,32,32,32,32,32,32,32,32,32,32,32,46,44,59,58,33,63,34,47,92,60,62,40,41,91,93,123,125,32,32,32,32,32,32,32,32,0,77,97,103,101,32,100,105,101,100,10,0,0,0,0,0,0,69,114,114,111,114,32,97,116,32,37,115,58,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,0,0,0,0,0,35,63,82,65,68,73,65,78,67,69,0,0,0,0,0,0,70,79,82,77,65,84,61,51,50,45,98,105,116,95,114,108,101,95,114,103,98,101,0,0,45,89,32,0,0,0,0,0,43,88,32,0,0,0,0,0,109,97,120,32,118,97,108,117,101,32,62,32,50,53,53,0,110,111,116,32,71,73,70,0,0,0,0,0,0,0,0,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,0,0,98,97,100,32,73,72,68,82,32,108,101,110,0,0,0,0,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,49,47,50,47,52,47,56,45,98,105,116,32,111,110,108,121,0,0,0,0,0,0,0,0,98,97,100,32,99,116,121,112,101,0,0,0,0,0,0,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,0,0,0,0,0,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,0,0,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,0,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,0,105,110,118,97,108,105,100,32,80,76,84,69,0,0,0,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,0,0,0,0,0,0,0,98,97,100,32,116,82,78,83,32,108,101,110,0,0,0,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,0,255,85,0,17,0,0,0,1,0,0,0,0,0,0,0,110,111,32,80,76,84,69,0,111,117,116,111,102,109,101,109,0,0,0,0,0,0,0,0,111,117,116,111,102,100,97,116,97,0,0,0,0,0,0,0,110,111,32,73,68,65,84,0,88,88,88,88,32,80,78,71,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,0,0,0,0,0,0,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,115,114,99,47,115,116,98,95,105,109,97,103,101,46,104,0,115,116,98,105,95,95,100,101,95,105,112,104,111,110,101,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,0,0,0,0,0,0,0,115,116,98,105,95,95,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,0,105,109,103,95,119,105,100,116,104,95,98,121,116,101,115,32,60,61,32,120,0,0,0,0,0,1,0,5,6,0,0,0,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,0,0,0,0,0,0,0,105,109,103,95,110,32,61,61,32,51,0,0,0,0,0,0,137,80,78,71,13,10,26,10,98,97,100,32,112,110,103,32,115,105,103,0,0,0,0,0,110,111,32,83,79,73,0,0,110,111,32,83,79,70,0,0,98,97,100,32,83,79,70,32,108,101,110,0,0,0,0,0,111,110,108,121,32,56,45,98,105,116,0,0,0,0,0,0,110,111,32,104,101,97,100,101,114,32,104,101,105,103,104,116,0,0,0,0,0,0,0,0,48,32,119,105,100,116,104,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,0,0,0,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,73,68,0,0,0,0,0,0,0,0,98,97,100,32,72,0,0,0,98,97,100,32,86,0,0,0,98,97,100,32,84,81,0,0,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,0,98,97,100,32,68,82,73,32,108,101,110,0,0,0,0,0,98,97,100,32,68,81,84,32,116,121,112,101,0,0,0,0,98,97,100,32,68,81,84,32,116,97,98,108,101,0,0,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,98,97,100,32,68,72,84,32,104,101,97,100,101,114,0,0,98,97,100,32,99,111,100,101,32,108,101,110,103,116,104,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,100,105,115,116,0,0,0,0,0,0,0,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,0,0,0,0,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,115,116,98,105,95,95,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,95,115,108,111,119,112,97,116,104,0,0,98,105,116,115,32,60,61,32,49,54,0,0,0,0,0,0,115,116,98,105,95,95,98,105,116,95,114,101,118,101,114,115,101,0,0,0,0,0,0,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,0,0,0,115,116,98,105,95,95,102,105,108,108,95,98,105,116,115,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,99,32,61,61,32,49,56,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,0,0,0,0,98,97,100,32,115,105,122,101,115,0,0,0,0,0,0,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,0,0,0,0,0,0,0,115,116,98,105,95,95,112,97,114,115,101,95,117,110,99,111,109,112,101,114,115,115,101,100,95,98,108,111,99,107,0,0,122,108,105,98,32,99,111,114,114,117,112,116,0,0,0,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,0,0,0,0,0,0,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,35,63,82,65,68,73,65,78,67,69,10,0,0,0,0,0,110,111,116,32,72,68,82,0,117,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,100,97,116,97,32,108,97,121,111,117,116,0,105,110,118,97,108,105,100,32,100,101,99,111,100,101,100,32,115,99,97,110,108,105,110,101,32,108,101,110,103,116,104,0,98,97,100,32,112,97,108,101,116,116,101,0,0,0,0,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,0,0,0,48,0,0,0,0,0,0,0,98,97,100,32,102,105,108,101,0,0,0,0,0,0,0,0,98,97,100,32,102,111,114,109,97,116,0,0,0,0,0,0,83,128,246,52,0,0,0,0,80,73,67,84,0,0,0,0,110,111,116,32,80,83,68,0,119,114,111,110,103,32,118,101,114,115,105,111,110,0,0,0,119,114,111,110,103,32,99,104,97,110,110,101,108,32,99,111,117,110,116,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,0,0,0,119,114,111,110,103,32,99,111,108,111,114,32,102,111,114,109,97,116,0,0,0,0,0,0,98,97,100,32,73,109,97,103,101,32,68,101,115,99,114,105,112,116,111,114,0,0,0,0,109,105,115,115,105,110,103,32,99,111,108,111,114,32,116,97,98,108,101,0,0,0,0,0,117,110,107,110,111,119,110,32,99,111,100,101,0,0,0,0,110,111,32,99,108,101,97,114,32,99,111,100,101,0,0,0,116,111,111,32,109,97,110,121,32,99,111,100,101,115,0,0,105,108,108,101,103,97,108,32,99,111,100,101,32,105,110,32,114,97,115,116,101,114,0,0,110,111,116,32,66,77,80,0,117,110,107,110,111,119,110,32,66,77,80,0,0,0,0,0,98,97,100,32,66,77,80,0,109,111,110,111,99,104,114,111,109,101,0,0,0,0,0,0,66,77,80,32,82,76,69,0,104,115,122,32,61,61,32,49,48,56,32,124,124,32,104,115,122,32,61,61,32,49,50,52,0,0,0,0,0,0,0,0,115,116,98,105,95,95,98,109,112,95,108,111,97,100,0,0,105,110,118,97,108,105,100,0,98,97,100,32,98,112,112,0,98,97,100,32,109,97,115,107,115,0,0,0,0,0,0,0,98,97,100,32,114,101,113,95,99,111,109,112,0,0,0,0,106,117,110,107,32,98,101,102,111,114,101,32,109,97,114,107,101,114,0,0,0,0,0,0,99,97,110,39,116,32,109,101,114,103,101,32,100,99,32,97,110,100,32,97,99,0,0,0,110,32,62,61,32,48,32,38,38,32,110,32,60,32,40,105,110,116,41,32,40,115,105,122,101,111,102,40,115,116,98,105,95,95,98,109,97,115,107,41,47,115,105,122,101,111,102,40,42,115,116,98,105,95,95,98,109,97,115,107,41,41,0,0,115,116,98,105,95,95,101,120,116,101,110,100,95,114,101,99,101,105,118,101,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,40,40,40,106,45,62,99,111,100,101,95,98,117,102,102,101,114,41,32,62,62,32,40,51,50,32,45,32,104,45,62,115,105,122,101,91,99,93,41,41,32,38,32,115,116,98,105,95,95,98,109,97,115,107,91,104,45,62,115,105,122,101,91,99,93,93,41,32,61,61,32,104,45,62,99,111,100,101,91,99,93,0,0,0,0,0,0,0,115,116,98,105,95,95,106,112,101,103,95,104,117,102,102,95,100,101,99,111,100,101,0,0,98,97,100,32,83,79,83,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,83,79,83,32,108,101,110,0,0,0,0,0,98,97,100,32,68,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,65,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,83,79,83,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,232,20,0,0,208,19,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,232,20,0,0,232,19,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,16,21,0,0,0,20,0,0,248,19,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,16,21,0,0,56,20,0,0,40,20,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,16,21,0,0,152,20,0,0,40,20,0,0,0,0,0,0,16,21,0,0,112,20,0,0,192,20,0,0,0,0,0,0,0,0,0,0,96,20,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,88,21,0,0,5,0,0,0,13,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,16,21,0,0,48,21,0,0,96,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,32,23,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,93,61,127,102,158,160,230,63,0,0,0,0,0,136,57,61,68,23,117,250,82,176,230,63,0,0,0,0,0,0,216,60,254,217,11,117,18,192,230,63,0,0,0,0,0,120,40,189,191,118,212,221,220,207,230,63,0,0,0,0,0,192,30,61,41,26,101,60,178,223,230,63,0,0,0,0,0,0,216,188,227,58,89,152,146,239,230,63,0,0,0,0,0,0,188,188,134,147,81,249,125,255,230,63,0,0,0,0,0,216,47,189,163,45,244,102,116,15,231,63,0,0,0,0,0,136,44,189,195,95,236,232,117,31,231,63,0,0,0,0,0,192,19,61,5,207,234,134,130,47,231,63,0,0,0,0,0,48,56,189,82,129,165,72,154,63,231,63,0,0,0,0,0,192,0,189,252,204,215,53,189,79,231,63,0,0,0,0,0,136,47,61,241,103,66,86,235,95,231,63,0,0,0,0,0,224,3,61,72,109,171,177,36,112,231,63,0,0,0,0,0,208,39,189,56,93,222,79,105,128,231,63,0,0,0,0,0,0,221,188,0,29,172,56,185,144,231,63,0,0,0,0,0,0,227,60,120,1,235,115,20,161,231,63,0,0,0,0,0,0,237,188,96,208,118,9,123,177,231,63,0,0,0,0,0,64,32,61,51,193,48,1,237,193,231,63,0,0,0,0,0,0,160,60,54,134,255,98,106,210,231,63,0,0,0,0,0,144,38,189,59,78,207,54,243,226,231,63,0,0,0,0,0,224,2,189,232,195,145,132,135,243,231,63,0,0,0,0,0,88,36,189,78,27,62,84,39,4,232,63,0,0,0,0,0,0,51,61,26,7,209,173,210,20,232,63,0,0,0,0,0,0,15,61,126,205,76,153,137,37,232,63,0,0,0,0,0,192,33,189,208,66,185,30,76,54,232,63,0,0,0,0,0,208,41,61,181,202,35,70,26,71,232,63,0,0,0,0,0,16,71,61,188,91,159,23,244,87,232,63,0,0,0,0,0,96,34,61,175,145,68,155,217,104,232,63,0,0,0,0,0,196,50,189,149,163,49,217,202,121,232,63,0,0,0,0,0,0,35,189,184,101,138,217,199,138,232,63,0,0,0,0,0,128,42,189,0,88,120,164,208,155,232,63,0,0,0,0,0,0,237,188,35,162,42,66,229,172,232,63,0,0,0,0,0,40,51,61,250,25,214,186,5,190,232,63,0,0,0,0,0,180,66,61,131,67,181,22,50,207,232,63,0,0,0,0,0,208,46,189,76,102,8,94,106,224,232,63,0,0,0,0,0,80,32,189,7,120,21,153,174,241,232,63,0,0,0,0,0,40,40,61,14,44,40,208,254,2,233,63,0,0,0,0,0,176,28,189,150,255,145,11,91,20,233,63,0,0,0,0,0,224,5,189,249,47,170,83,195,37,233,63,0,0,0,0,0,64,245,60,74,198,205,176,55,55,233,63,0,0,0,0,0,32,23,61,174,152,95,43,184,72,233,63,0,0,0,0,0,0,9,189,203,82,200,203,68,90,233,63,0,0,0,0,0,104,37,61,33,111,118,154,221,107,233,63,0,0,0,0,0,208,54,189,42,78,222,159,130,125,233,63,0,0,0,0,0,0,1,189,163,35,122,228,51,143,233,63,0,0,0,0,0,0,45,61,4,6,202,112,241,160,233,63,0,0,0,0,0,164,56,189,137,255,83,77,187,178,233,63,0,0,0,0,0,92,53,61,91,241,163,130,145,196,233,63,0,0,0,0,0,184,38,61,197,184,75,25,116,214,233,63,0,0,0,0,0,0,236,188,142,35,227,25,99,232,233,63,0,0,0,0,0,208,23,61,2,243,7,141,94,250,233,63,0,0,0,0,0,64,22,61,77,229,93,123,102,12,234,63,0,0,0,0,0,0,245,188,246,184,142,237,122,30,234,63,0,0,0,0,0,224,9,61,39,46,74,236,155,48,234,63,0,0,0,0,0,216,42,61,93,10,70,128,201,66,234,63,0,0,0,0,0,240,26,189,155,37,62,178,3,85,234,63,0,0,0,0,0,96,11,61,19,98,244,138,74,103,234,63,0,0,0,0,0,136,56,61,167,179,48,19,158,121,234,63,0,0,0,0,0,32,17,61,141,46,193,83,254,139,234,63,0,0,0,0,0,192,6,61,210,252,121,85,107,158,234,63,0,0,0,0,0,184,41,189,184,111,53,33,229,176,234,63,0,0,0,0,0,112,43,61,129,243,211,191,107,195,234,63,0,0,0,0,0,0,217,60,128,39,60,58,255,213,234,63,0,0,0,0,0,0,228,60,163,210,90,153,159,232,234,63,0,0,0,0,0,144,44,189,103,243,34,230,76,251,234,63,0,0,0,0,0,80,22,61,144,183,141,41,7,14,235,63,0,0,0,0,0,212,47,61,169,137,154,108,206,32,235,63,0,0,0,0,0,112,18,61,75,26,79,184,162,51,235,63,0,0,0,0,0,71,77,61,231,71,183,21,132,70,235,63,0,0,0,0,0,56,56,189,58,89,229,141,114,89,235,63,0,0,0,0,0,0,152,60,106,197,241,41,110,108,235,63,0,0,0,0,0,208,10,61,80,94,251,242,118,127,235,63,0,0,0,0,0,128,222,60,178,73,39,242,140,146,235,63,0,0,0,0,0,192,4,189,3,6,161,48,176,165,235,63,0,0,0,0,0,112,13,189,102,111,154,183,224,184,235,63,0,0,0,0,0,144,13,61,255,193,75,144,30,204,235,63,0,0,0,0,0,160,2,61,111,161,243,195,105,223,235,63,0,0,0,0,0,120,31,189,184,29,215,91,194,242,235,63,0,0,0,0,0,160,16,189,233,178,65,97,40,6,236,63,0,0,0,0,0,64,17,189,224,82,133,221,155,25,236,63,0,0,0,0,0,224,11,61,238,100,250,217,28,45,236,63,0,0,0,0,0,64,9,189,47,208,255,95,171,64,236,63,0,0,0,0,0,208,14,189,21,253,250,120,71,84,236,63,0,0,0,0,0,102,57,61,203,208,87,46,241,103,236,63,0,0,0,0,0,16,26,189,182,193,136,137,168,123,236,63,0,0,0,0,128,69,88,189,51,231,6,148,109,143,236,63,0,0,0,0,0,72,26,189,223,196,81,87,64,163,236,63,0,0,0,0,0,0,203,60,148,144,239,220,32,183,236,63,0,0,0,0,0,64,1,61,137,22,109,46,15,203,236,63,0,0,0,0,0,32,240,60,18,196,93,85,11,223,236,63,0,0,0,0,0,96,243,60,59,171,91,91,21,243,236,63,0,0,0,0,0,144,6,189,188,137,7,74,45,7,237,63,0,0,0,0,0,160,9,61,250,200,8,43,83,27,237,63,0,0,0,0,0,224,21,189,133,138,13,8,135,47,237,63,0,0,0,0,0,40,29,61,3,162,202,234,200,67,237,63,0,0,0,0,0,160,1,61,145,164,251,220,24,88,237,63,0,0,0,0,0,0,223,60,161,230,98,232,118,108,237,63,0,0,0,0,0,160,3,189,78,131,201,22,227,128,237,63,0,0,0,0,0,216,12,189,144,96,255,113,93,149,237,63,0,0,0,0,0,192,244,60,174,50,219,3,230,169,237,63,0,0,0,0,0,144,255,60,37,131,58,214,124,190,237,63,0,0,0,0,0,128,233,60,69,180,1,243,33,211,237,63,0,0,0,0,0,32,245,188,191,5,28,100,213,231,237,63,0,0,0,0,0,112,29,189,236,154,123,51,151,252,237,63,0,0,0,0,0,20,22,189,94,125,25,107,103,17,238,63,0,0,0,0,0,72,11,61,231,163,245,20,70,38,238,63,0,0,0,0,0,206,64,61,92,238,22,59,51,59,238,63,0,0,0,0,0,104,12,61,180,63,139,231,46,80,238,63,0,0,0,0,0,48,9,189,104,109,103,36,57,101,238,63,0,0,0,0,0,0,229,188,68,76,199,251,81,122,238,63,0,0,0,0,0,248,7,189,38,183,205,119,121,143,238,63,0,0,0,0,0,112,243,188,232,144,164,162,175,164,238,63,0,0,0,0,0,208,229,60,228,202,124,134,244,185,238,63,0,0,0,0,0,26,22,61,13,104,142,45,72,207,238,63,0,0,0,0,0,80,245,60,20,133,24,162,170,228,238,63,0,0,0,0,0,64,198,60,19,90,97,238,27,250,238,63,0,0,0,0,0,128,238,188,6,65,182,28,156,15,239,63,0,0,0,0,0,136,250,188,99,185,107,55,43,37,239,63,0,0,0,0,0,144,44,189,117,114,221,72,201,58,239,63,0,0,0,0,0,0,170,60,36,69,110,91,118,80,239,63,0,0,0,0,0,240,244,188,253,68,136,121,50,102,239,63,0,0,0,0,0,128,202,60,56,190,156,173,253,123,239,63,0,0,0,0,0,188,250,60,130,60,36,2,216,145,239,63,0,0,0,0,0,96,212,188,142,144,158,129,193,167,239,63,0,0,0,0,0,12,11,189,17,213,146,54,186,189,239,63,0,0,0,0,0,224,192,188,148,113,143,43,194,211,239,63,0,0,0,0,128,222,16,189,238,35,42,107,217,233,239,63,0,0,0,0,0,67,238,60,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,190,188,90,250,26,11,240,63,0,0,0,0,0,64,179,188,3,51,251,169,61,22,240,63,0,0,0,0,0,23,18,189,130,2,59,20,104,33,240,63,0,0,0,0,0,64,186,60,108,128,119,62,154,44,240,63,0,0,0,0,0,152,239,60,202,187,17,46,212,55,240,63,0,0,0,0,0,64,199,188,137,127,110,232,21,67,240,63,0,0,0,0,0,48,216,60,103,84,246,114,95,78,240,63,0,0,0,0,0,63,26,189,90,133,21,211,176,89,240,63,0,0,0,0,0,132,2,189,149,31,60,14,10,101,240,63,0,0,0,0,0,96,241,60,26,247,221,41,107,112,240,63,0,0,0,0,0,36,21,61,45,168,114,43,212,123,240,63,0,0,0,0,0,160,233,188,208,155,117,24,69,135,240,63,0,0,0,0,0,64,230,60,200,7,102,246,189,146,240,63,0,0,0,0,0,120,0,189,131,243,198,202,62,158,240,63,0,0,0,0,0,0,152,188,48,57,31,155,199,169,240,63,0,0,0,0,0,160,255,60,252,136,249,108,88,181,240,63,0,0,0,0,0,200,250,188,138,108,228,69,241,192,240,63,0,0,0,0,0,192,217,60,22,72,114,43,146,204,240,63,0,0,0,0,0,32,5,61,216,93,57,35,59,216,240,63,0,0,0,0,0,208,250,188,243,209,211,50,236,227,240,63,0,0,0,0,0,172,27,61,166,169,223,95,165,239,240,63,0,0,0,0,0,232,4,189,240,210,254,175,102,251,240,63,0,0,0,0,0,48,13,189,75,35,215,40,48,7,241,63,0,0,0,0,0,80,241,60,91,91,18,208,1,19,241,63,0,0,0,0,0,0,236,60,249,42,94,171,219,30,241,63,0,0,0,0,0,188,22,61,213,49,108,192,189,42,241,63,0,0,0,0,0,64,232,60,125,4,242,20,168,54,241,63,0,0,0,0,0,208,14,189,233,45,169,174,154,66,241,63,0,0,0,0,0,224,232,60,56,49,79,147,149,78,241,63,0,0,0,0,0,64,235,60,113,142,165,200,152,90,241,63,0,0,0,0,0,48,5,61,223,195,113,84,164,102,241,63,0,0,0,0,0,56,3,61,17,82,125,60,184,114,241,63,0,0,0,0,0,212,40,61,159,187,149,134,212,126,241,63,0,0,0,0,0,208,5,189,147,141,140,56,249,138,241,63,0,0,0,0,0,136,28,189,102,93,55,88,38,151,241,63,0,0,0,0,0,240,17,61,167,203,111,235,91,163,241,63,0,0,0,0,0,72,16,61,227,135,19,248,153,175,241,63,0,0,0,0,0,57,71,189,84,93,4,132,224,187,241,63,0,0,0,0,0,228,36,61,67,28,40,149,47,200,241,63,0,0,0,0,0,32,10,189,178,185,104,49,135,212,241,63,0,0,0,0,0,128,227,60,49,64,180,94,231,224,241,63,0,0,0,0,0,192,234,60,56,217,252,34,80,237,241,63,0,0,0,0,0,144,1,61,247,205,56,132,193,249,241,63,0,0,0,0,0,120,27,189,143,141,98,136,59,6,242,63,0,0,0,0,0,148,45,61,30,168,120,53,190,18,242,63,0,0,0,0,0,0,216,60,65,221,125,145,73,31,242,63,0,0,0,0,0,52,43,61,35,19,121,162,221,43,242,63,0,0,0,0,0,248,25,61,231,97,117,110,122,56,242,63,0,0,0,0,0,200,25,189,39,20,130,251,31,69,242,63,0,0,0,0,0,48,2,61,2,166,178,79,206,81,242,63,0,0,0,0,0,72,19,189,176,206,30,113,133,94,242,63,0,0,0,0,0,112,18,61,22,125,226,101,69,107,242,63,0,0,0,0,0,208,17,61,15,224,29,52,14,120,242,63,0,0,0,0,0,238,49,61,62,99,245,225,223,132,242,63,0,0,0,0,0,192,20,189,48,187,145,117,186,145,242,63,0,0,0,0,0,216,19,189,9,223,31,245,157,158,242,63,0,0,0,0,0,176,8,61,155,14,209,102,138,171,242,63,0,0,0,0,0,124,34,189,58,218,218,208,127,184,242,63,0,0,0,0,0,52,42,61,249,26,119,57,126,197,242,63,0,0,0,0,0,128,16,189,217,2,228,166,133,210,242,63,0,0,0,0,0,208,14,189,121,21,100,31,150,223,242,63,0,0,0,0,0,32,244,188,207,46,62,169,175,236,242,63,0,0,0,0,0,152,36,189,34,136,189,74,210,249,242,63,0,0,0,0,0,48,22,189,37,182,49,10,254,6,243,63,0,0,0,0,0,54,50,189,11,165,238,237,50,20,243,63,0,0,0,0,128,223,112,189,184,215,76,252,112,33,243,63,0,0,0,0,0,72,34,189,162,233,168,59,184,46,243,63,0,0,0,0,0,152,37,189,102,23,100,178,8,60,243,63,0,0,0,0,0,208,30,61,39,250,227,102,98,73,243,63,0,0,0,0,0,0,220,188,15,159,146,95,197,86,243,63,0,0,0,0,0,216,48,189,185,136,222,162,49,100,243,63,0,0,0,0,0,200,34,61,57,170,58,55,167,113,243,63,0,0,0,0,0,96,32,61,254,116,30,35,38,127,243,63,0,0,0,0,0,96,22,189,56,216,5,109,174,140,243,63,0,0,0,0,0,224,10,189,195,62,113,27,64,154,243,63,0,0,0,0,0,114,68,189,32,160,229,52,219,167,243,63,0,0,0,0,0,32,8,61,149,110,236,191,127,181,243,63,0,0,0,0,0,128,62,61,242,168,19,195,45,195,243,63,0,0,0,0,0,128,239,60,34,225,237,68,229,208,243,63,0,0,0,0,0,160,23,189,187,52,18,76,166,222,243,63,0,0,0,0,0,48,38,61,204,78,28,223,112,236,243,63,0,0,0,0,0,166,72,189,140,126,172,4,69,250,243,63,0,0,0,0,0,220,60,189,187,160,103,195,34,8,244,63,0,0,0,0,0,184,37,61,149,46,247,33,10,22,244,63,0,0,0,0,0,192,30,61,70,70,9,39,251,35,244,63,0,0,0,0,0,96,19,189,32,169,80,217,245,49,244,63,0,0,0,0,0,152,35,61,235,185,132,63,250,63,244,63,0,0,0,0,0,0,250,60,25,137,97,96,8,78,244,63,0,0,0,0,0,192,246,188,1,210,167,66,32,92,244,63,0,0,0,0,0,192,11,189,22,0,29,237,65,106,244,63,0,0,0,0,0,128,18,189,38,51,139,102,109,120,244,63,0,0,0,0,0,224,48,61,0,60,193,181,162,134,244,63,0,0,0,0,0,64,45,189,4,175,146,225,225,148,244,63,0,0,0,0,0,32,12,61,114,211,215,240,42,163,244,63,0,0,0,0,0,80,30,189,1,184,109,234,125,177,244,63,0,0,0,0,0,128,7,61,225,41,54,213,218,191,244,63,0,0,0,0,0,128,19,189,50,193,23,184,65,206,244,63,0,0,0,0,0,128,0,61,219,221,253,153,178,220,244,63,0,0,0,0,0,112,44,61,150,171,216,129,45,235,244,63,0,0,0,0,0,224,28,189,2,45,157,118,178,249,244,63,0,0,0,0,0,32,25,61,193,49,69,127,65,8,245,63,0,0,0,0,0,192,8,189,42,102,207,162,218,22,245,63,0,0,0,0,0,0,250,188,234,81,63,232,125,37,245,63,0,0,0,0,0,8,74,61,218,78,157,86,43,52,245,63,0,0,0,0,0,216,38,189,26,172,246,244,226,66,245,63,0,0,0,0,0,68,50,189,219,148,93,202,164,81,245,63,0,0,0,0,0,60,72,61,107,17,233,221,112,96,245,63,0,0,0,0,0,176,36,61,222,41,181,54,71,111,245,63,0,0,0,0,0,90,65,61,14,196,226,219,39,126,245,63,0,0,0,0,0,224,41,189,111,199,151,212,18,141,245,63,0,0,0,0,0,8,35,189,76,11,255,39,8,156,245,63,0,0,0,0,0,236,77,61,39,84,72,221,7,171,245,63,0,0,0,0,0,0,196,188,244,122,168,251,17,186,245,63,0,0,0,0,0,8,48,61,11,70,89,138,38,201,245,63,0,0,0,0,0,200,38,189,63,142,153,144,69,216,245,63,0,0,0,0,0,154,70,61,225,32,173,21,111,231,245,63,0,0,0,0,0,64,27,189,202,235,220,32,163,246,245,63,0,0,0,0,0,112,23,61,184,220,118,185,225,5,246,63,0,0,0,0,0,248,38,61,21,247,205,230,42,21,246,63,0,0,0,0,0,0,1,61,49,85,58,176,126,36,246,63,0,0,0,0,0,208,21,189,181,41,25,29,221,51,246,63,0,0,0,0,0,208,18,189,19,195,204,52,70,67,246,63,0,0,0,0,0,128,234,188,250,142,188,254,185,82,246,63,0,0,0,0,0,96,40,189], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([151,51,85,130,56,98,246,63,0,0,0,0,0,254,113,61,142,50,8,199,193,113,246,63,0,0,0,0,0,32,55,189,126,169,76,212,85,129,246,63,0,0,0,0,0,128,230,60,113,148,158,177,244,144,246,63,0,0,0,0,0,120,41,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  var _cosf=Math_cos;

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  var _emscripten_resume=true;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
      _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg);
    }

  var _emscripten_landingpad=true;

  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_GetKeyboardState(numKeys) {
      if (numKeys) {
        HEAP32[((numKeys)>>2)]=65536;
      }
      return SDL.keyboardState;
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }



  var _sqrtf=Math_sqrt;

  function _emscripten_force_exit(status) {
      Module['noExitRuntime'] = false;
      Module['exit'](status);
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;



  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _SDL_UpdateRect(surf, x, y, w, h) {
      // We actually do the whole screen in Unlock...
    }

  function _SDL_CreateRGBSurface(flags, width, height, depth, rmask, gmask, bmask, amask) {
      return SDL.makeSurface(width, height, flags, false, 'CreateRGBSurface', rmask, gmask, bmask, amask);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _ceil=Math_ceil;

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _SDL_UnlockSurface(surf) {
      assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts
  
      var surfData = SDL.surfaces[surf];
  
      if (!surfData.locked || --surfData.locked > 0) {
        return;
      }
  
      // Copy pixel data to image
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        SDL.copyIndexedColorData(surfData);
      } else if (!surfData.colors) {
        var data = surfData.image.data;
        var buffer = surfData.buffer;
        assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
        var src = buffer >> 2;
        var dst = 0;
        var isScreen = surf == SDL.screen;
        var num;
        if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) {
          // IE10/IE11: ImageData objects are backed by the deprecated CanvasPixelArray,
          // not UInt8ClampedArray. These don't have buffers, so we need to revert
          // to copying a byte at a time. We do the undefined check because modern
          // browsers do not define CanvasPixelArray anymore.
          num = data.length;
          while (dst < num) {
            var val = HEAP32[src]; // This is optimized. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
            data[dst  ] = val & 0xff;
            data[dst+1] = (val >> 8) & 0xff;
            data[dst+2] = (val >> 16) & 0xff;
            data[dst+3] = isScreen ? 0xff : ((val >> 24) & 0xff);
            src++;
            dst += 4;
          }
        } else {
          var data32 = new Uint32Array(data.buffer);
          if (isScreen && SDL.defaults.opaqueFrontBuffer) {
            num = data32.length;
            // logically we need to do
            //      while (dst < num) {
            //          data32[dst++] = HEAP32[src++] | 0xff000000
            //      }
            // the following code is faster though, because
            // .set() is almost free - easily 10x faster due to
            // native memcpy efficiencies, and the remaining loop
            // just stores, not load + store, so it is faster
            data32.set(HEAP32.subarray(src, src + num));
            var data8 = new Uint8Array(data.buffer);
            var i = 3;
            var j = i + 4*num;
            if (num % 8 == 0) {
              // unrolling gives big speedups
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
             } else {
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
            }
          } else {
            data32.set(HEAP32.subarray(src, src + data32.length));
          }
        }
      } else {
        var width = Module['canvas'].width;
        var height = Module['canvas'].height;
        var s = surfData.buffer;
        var data = surfData.image.data;
        var colors = surfData.colors; // TODO: optimize using colors32
        for (var y = 0; y < height; y++) {
          var base = y*width*4;
          for (var x = 0; x < width; x++) {
            // See comment above about signs
            var val = HEAPU8[((s++)>>0)] * 4;
            var start = base + x*4;
            data[start]   = colors[val];
            data[start+1] = colors[val+1];
            data[start+2] = colors[val+2];
          }
          s += width*3;
        }
      }
      // Copy to canvas
      surfData.ctx.putImageData(surfData.image, 0, 0);
      // Note that we save the image, so future writes are fast. But, memory is not yet released
    }

  var _emscripten_postinvoke=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _BItoD=true;

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
var GLctx; GL.init()
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vid": nullFunc_vid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_putenv": _putenv, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "___resumeException": ___resumeException, "_sqrtf": _sqrtf, "_fread": _fread, "_IMG_Load": _IMG_Load, "_TTF_SizeText": _TTF_SizeText, "_lseek": _lseek, "_getenv": _getenv, "_SDL_RWFromFile": _SDL_RWFromFile, "_SDL_GetTicks": _SDL_GetTicks, "_vfprintf": _vfprintf, "_SDL_GetKeyboardState": _SDL_GetKeyboardState, "_SDL_PollEvent": _SDL_PollEvent, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_emscripten_set_main_loop_arg": _emscripten_set_main_loop_arg, "_open": _open, "_fflush": _fflush, "_TTF_FontHeight": _TTF_FontHeight, "_SDL_LockSurface": _SDL_LockSurface, "_SDL_GetError": _SDL_GetError, "_cosf": _cosf, "_SDL_FreeRW": _SDL_FreeRW, "_fprintf": _fprintf, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_fabsf": _fabsf, "_sbrk": _sbrk, "_SDL_Init": _SDL_Init, "_strerror": _strerror, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_begin_catch": ___cxa_begin_catch, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "___cxa_end_catch": ___cxa_end_catch, "_Mix_FreeChunk": _Mix_FreeChunk, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "__reallyNegative": __reallyNegative, "_close": _close, "_pthread_getspecific": _pthread_getspecific, "_feof": _feof, "_Mix_PlayMusic": _Mix_PlayMusic, "_sinf": _sinf, "_emscripten_force_exit": _emscripten_force_exit, "___buildEnvironment": ___buildEnvironment, "_SDL_PauseAudio": _SDL_PauseAudio, "_fseek": _fseek, "_fileno": _fileno, "_recv": _recv, "_pthread_once": _pthread_once, "_pread": _pread, "_printf": _printf, "_fclose": _fclose, "_SDL_UnlockSurface": _SDL_UnlockSurface, "_SDL_UpperBlit": _SDL_UpperBlit, "_pthread_key_create": _pthread_key_create, "_write": _write, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_Mix_PlayChannel": _Mix_PlayChannel, "___errno_location": ___errno_location, "_SDL_CloseAudio": _SDL_CloseAudio, "_SDL_CreateRGBSurface": _SDL_CreateRGBSurface, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_pthread_setspecific": _pthread_setspecific, "_mkport": _mkport, "_read": _read, "_fputc": _fputc, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_Mix_HaltMusic": _Mix_HaltMusic, "_SDL_UpdateRect": _SDL_UpdateRect, "_ceil": _ceil, "__formatString": __formatString, "_pwrite": _pwrite, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_fopen": _fopen, "_IMG_Load_RW": _IMG_Load_RW, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _putenv=env._putenv;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var ___resumeException=env.___resumeException;
  var _sqrtf=env._sqrtf;
  var _fread=env._fread;
  var _IMG_Load=env._IMG_Load;
  var _TTF_SizeText=env._TTF_SizeText;
  var _lseek=env._lseek;
  var _getenv=env._getenv;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _vfprintf=env._vfprintf;
  var _SDL_GetKeyboardState=env._SDL_GetKeyboardState;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _emscripten_set_main_loop_arg=env._emscripten_set_main_loop_arg;
  var _open=env._open;
  var _fflush=env._fflush;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _SDL_GetError=env._SDL_GetError;
  var _cosf=env._cosf;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _fprintf=env._fprintf;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _SDL_Init=env._SDL_Init;
  var _strerror=env._strerror;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var __reallyNegative=env.__reallyNegative;
  var _close=env._close;
  var _pthread_getspecific=env._pthread_getspecific;
  var _feof=env._feof;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _sinf=env._sinf;
  var _emscripten_force_exit=env._emscripten_force_exit;
  var ___buildEnvironment=env.___buildEnvironment;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _fseek=env._fseek;
  var _fileno=env._fileno;
  var _recv=env._recv;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _printf=env._printf;
  var _fclose=env._fclose;
  var _SDL_UnlockSurface=env._SDL_UnlockSurface;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _pthread_key_create=env._pthread_key_create;
  var _write=env._write;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var ___errno_location=env.___errno_location;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _SDL_CreateRGBSurface=env._SDL_CreateRGBSurface;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var _pthread_setspecific=env._pthread_setspecific;
  var _mkport=env._mkport;
  var _read=env._read;
  var _fputc=env._fputc;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _SDL_UpdateRect=env._SDL_UpdateRect;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _pwrite=env._pwrite;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _fopen=env._fopen;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _stbi_image_free($retval_from_stbi_load) {
 $retval_from_stbi_load = $retval_from_stbi_load|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $retval_from_stbi_load;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _stbi_load($filename,$x,$y,$comp,$req_comp) {
 $filename = $filename|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $f = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $filename;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL11stbi__fopenPKcS0_($6,88)|0);
 $f = $7;
 $8 = $f;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $14 = $f;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = $5;
  $19 = (_stbi_load_from_file($14,$15,$16,$17,$18)|0);
  $result = $19;
  $20 = $f;
  (_fclose(($20|0))|0);
  $21 = $result;
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $10 = (__ZL9stbi__errPKc(96)|0);
  $11 = ($10|0)!=(0);
  $12 = $11 ? 0 : 0;
  $13 = $12;
  $0 = $13;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _stbi_load_from_file($f,$x,$y,$comp,$req_comp) {
 $f = $f|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $result = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 20|0;
 $0 = $f;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($s,$5);
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL15stbi__load_flipP13stbi__contextPiS1_S1_i($s,$6,$7,$8,$9)|0);
 $result = $10;
 $11 = $result;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $22 = $result;
  STACKTOP = sp;return ($22|0);
 }
 $13 = $0;
 $14 = ((($s)) + 172|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($s)) + 168|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $15;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (0 - ($20))|0;
 (_fseek(($13|0),($21|0),1)|0);
 $22 = $result;
 STACKTOP = sp;return ($22|0);
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer,$len,$initial_size,$outlen,$parse_header) {
 $buffer = $buffer|0;
 $len = $len|0;
 $initial_size = $initial_size|0;
 $outlen = $outlen|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 24|0;
 $1 = $buffer;
 $2 = $len;
 $3 = $initial_size;
 $4 = $outlen;
 $5 = $parse_header;
 $6 = $3;
 $7 = (__ZL12stbi__mallocj($6)|0);
 $p = $7;
 $8 = $p;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $10 = $1;
 HEAP32[$a>>2] = $10;
 $11 = $1;
 $12 = $2;
 $13 = (($11) + ($12)|0);
 $14 = ((($a)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = $p;
 $16 = $3;
 $17 = $5;
 $18 = (__ZL13stbi__do_zlibP10stbi__zbufPciii($a,$15,$16,1,$17)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $32 = ((($a)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $20 = $4;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = ((($a)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($a)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $29 = $4;
  HEAP32[$29>>2] = $28;
 }
 $30 = ((($a)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $0 = $31;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __Z21load_bitmap_from_filePKc($agg$result,$filename) {
 $agg$result = $agg$result|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_defer_0 = 0, $bitmap = 0, $num_bytes = 0, $pixels = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $bitmap = sp + 32|0;
 $pixels = sp + 24|0;
 $_defer_0 = sp + 20|0;
 $1 = sp + 52|0;
 $0 = $filename;
 ;HEAP32[$bitmap>>2]=0|0;HEAP32[$bitmap+4>>2]=0|0;HEAP32[$bitmap+8>>2]=0|0;HEAP32[$bitmap+12>>2]=0|0;
 $5 = $0;
 $6 = ((($bitmap)) + 4|0);
 $7 = (_stbi_load($5,$bitmap,$6,0,4)|0);
 HEAP32[$pixels>>2] = $7;
 HEAP32[$1>>2] = $pixels;
 $8 = (__ZN4impl7deferFnIZ21load_bitmap_from_filePKcE3__0EENS_5DeferIT_EEOS5_($1)|0);
 HEAP32[$_defer_0>>2] = $8;
 $9 = HEAP32[$pixels>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = $11;
  (invoke_iii(18,(144|0),($vararg_buffer|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $2 = $17;
   $3 = $18;
   __ZN4impl5DeferIZ21load_bitmap_from_filePKcE3__0ED2Ev($_defer_0);
   $19 = $2;
   $20 = $3;
   ___resumeException($19|0);
   // unreachable;
  }
  HEAP32[$agg$result>>2] = 0;
  $14 = ((($agg$result)) + 4|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($agg$result)) + 8|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($agg$result)) + 12|0);
  HEAP32[$16>>2] = 0;
  $4 = 1;
  __ZN4impl5DeferIZ21load_bitmap_from_filePKcE3__0ED2Ev($_defer_0);
  STACKTOP = sp;return;
 } else {
  $21 = HEAP32[$bitmap>>2]|0;
  $22 = ((($bitmap)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = Math_imul($21, $23)|0;
  $25 = $24<<2;
  $num_bytes = $25;
  $26 = $num_bytes;
  __THREW__ = 0;
  $27 = (invoke_ii(19,($26|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $2 = $17;
   $3 = $18;
   __ZN4impl5DeferIZ21load_bitmap_from_filePKcE3__0ED2Ev($_defer_0);
   $19 = $2;
   $20 = $3;
   ___resumeException($19|0);
   // unreachable;
  }
  $30 = ((($bitmap)) + 12|0);
  HEAP32[$30>>2] = $27;
  $31 = ((($bitmap)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$pixels>>2]|0;
  $34 = $num_bytes;
  _memcpy(($32|0),($33|0),($34|0))|0;
  ;HEAP32[$agg$result>>2]=HEAP32[$bitmap>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$bitmap+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$bitmap+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$bitmap+12>>2]|0;
  $4 = 1;
  __ZN4impl5DeferIZ21load_bitmap_from_filePKcE3__0ED2Ev($_defer_0);
  STACKTOP = sp;return;
 }
}
function __Z20load_level_from_filePKc($agg$result,$filename) {
 $agg$result = $agg$result|0;
 $filename = $filename|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0;
 var $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $bitmap = 0, $color = 0, $connected_portal_id = 0, $portal_id = 0, $tile = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy14 = sp + 584|0;
 $$byval_copy13 = sp + 560|0;
 $$byval_copy12 = sp + 564|0;
 $$byval_copy11 = sp + 568|0;
 $$byval_copy10 = sp + 572|0;
 $$byval_copy9 = sp + 576|0;
 $$byval_copy8 = sp + 580|0;
 $$byval_copy7 = sp + 588|0;
 $$byval_copy6 = sp + 592|0;
 $$byval_copy5 = sp + 596|0;
 $$byval_copy4 = sp + 600|0;
 $$byval_copy3 = sp + 604|0;
 $$byval_copy2 = sp + 608|0;
 $$byval_copy = sp + 556|0;
 $vararg_buffer = sp;
 $bitmap = sp + 536|0;
 $color = sp + 520|0;
 $1 = sp + 516|0;
 $2 = sp + 512|0;
 $3 = sp + 508|0;
 $4 = sp + 504|0;
 $5 = sp + 208|0;
 $6 = sp + 204|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 192|0;
 $10 = sp + 188|0;
 $11 = sp + 136|0;
 $12 = sp + 72|0;
 $13 = sp + 20|0;
 $14 = sp + 8|0;
 $15 = sp + 84|0;
 $16 = sp + 212|0;
 $17 = sp + 224|0;
 $18 = sp + 276|0;
 $19 = sp + 288|0;
 $20 = sp + 340|0;
 $21 = sp + 352|0;
 $22 = sp + 404|0;
 $23 = sp + 416|0;
 $24 = sp + 420|0;
 $25 = sp + 424|0;
 $26 = sp + 476|0;
 $27 = sp + 488|0;
 $28 = sp + 492|0;
 $29 = sp + 496|0;
 $0 = $filename;
 _memset(($agg$result|0),0,3356)|0;
 $30 = $0;
 __Z21load_bitmap_from_filePKc($bitmap,$30);
 $31 = HEAP32[$bitmap>>2]|0;
 HEAP32[$agg$result>>2] = $31;
 $32 = ((($bitmap)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($agg$result)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[$agg$result>>2]|0;
 $36 = ((($agg$result)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = Math_imul($35, $37)|0;
 $39 = (_calloc($38,4)|0);
 $40 = ((($agg$result)) + 8|0);
 HEAP32[$40>>2] = $39;
 $y = 0;
 while(1) {
  $41 = $y;
  $42 = ((($agg$result)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)<($43|0);
  if (!($44)) {
   break;
  }
  $x = 0;
  while(1) {
   $45 = $x;
   $46 = HEAP32[$agg$result>>2]|0;
   $47 = ($45|0)<($46|0);
   if (!($47)) {
    break;
   }
   $48 = $x;
   $49 = $y;
   $50 = HEAP32[$agg$result>>2]|0;
   $51 = Math_imul($49, $50)|0;
   $52 = (($48) + ($51))|0;
   $53 = ((($agg$result)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($52<<2)|0);
   $tile = $55;
   $56 = $x;
   $57 = $y;
   __Z16get_bitmap_pixelRK6Bitmapii($color,$bitmap,$56,$57);
   $58 = $tile;
   $59 = ((($58)) + 2|0);
   HEAP8[$59>>0] = 1;
   ;HEAP32[$1>>2]=HEAP32[$color>>2]|0;
   ;HEAP32[$2>>2]=HEAP32[176>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$2>>2]|0;
   $60 = (__Zeq5ColorS_($$byval_copy,$$byval_copy2)|0);
   if ($60) {
    $61 = $tile;
    $62 = ((($61)) + 2|0);
    HEAP8[$62>>0] = 2;
   }
   ;HEAP32[$3>>2]=HEAP32[$color>>2]|0;
   HEAP8[$4>>0] = -128;
   $63 = ((($4)) + 1|0);
   HEAP8[$63>>0] = 0;
   $64 = ((($4)) + 2|0);
   HEAP8[$64>>0] = 0;
   $65 = ((($4)) + 3|0);
   HEAP8[$65>>0] = -1;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$3>>2]|0;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$4>>2]|0;
   $66 = (__Zeq5ColorS_($$byval_copy3,$$byval_copy4)|0);
   if ($66) {
    $67 = $tile;
    $68 = ((($67)) + 2|0);
    HEAP8[$68>>0] = 10;
   }
   ;HEAP32[$5>>2]=HEAP32[$color>>2]|0;
   HEAP8[$6>>0] = -128;
   $69 = ((($6)) + 1|0);
   HEAP8[$69>>0] = -128;
   $70 = ((($6)) + 2|0);
   HEAP8[$70>>0] = -128;
   $71 = ((($6)) + 3|0);
   HEAP8[$71>>0] = -1;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$5>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$6>>2]|0;
   $72 = (__Zeq5ColorS_($$byval_copy5,$$byval_copy6)|0);
   if ($72) {
    $73 = $tile;
    $74 = ((($73)) + 2|0);
    HEAP8[$74>>0] = 19;
   }
   ;HEAP32[$7>>2]=HEAP32[$color>>2]|0;
   HEAP8[$8>>0] = 32;
   $75 = ((($8)) + 1|0);
   HEAP8[$75>>0] = 32;
   $76 = ((($8)) + 2|0);
   HEAP8[$76>>0] = 32;
   $77 = ((($8)) + 3|0);
   HEAP8[$77>>0] = -1;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$8>>2]|0;
   $78 = (__Zeq5ColorS_($$byval_copy7,$$byval_copy8)|0);
   if ($78) {
    $79 = $tile;
    $80 = ((($79)) + 2|0);
    HEAP8[$80>>0] = 5;
   }
   $81 = ((($color)) + 2|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = ($83|0)==(255);
   do {
    if ($84) {
     ;HEAP32[$9>>2]=HEAP32[$color>>2]|0;
     ;HEAP32[$10>>2]=HEAP32[184>>2]|0;
     ;HEAP32[$$byval_copy9>>2]=HEAP32[$9>>2]|0;
     ;HEAP32[$$byval_copy10>>2]=HEAP32[$10>>2]|0;
     $85 = (__Zne5ColorS_($$byval_copy9,$$byval_copy10)|0);
     if ($85) {
      $86 = HEAP8[$color>>0]|0;
      $87 = $86&255;
      if ((($87|0) == 32)) {
       $94 = $x;
       $95 = (+($94|0));
       HEAPF32[$14>>2] = $95;
       $96 = ((($14)) + 4|0);
       $97 = $y;
       $98 = (+($97|0));
       HEAPF32[$96>>2] = $98;
       $99 = ((($14)) + 8|0);
       HEAPF32[$99>>2] = 0.0;
       __Z15create_prisonerRK7Vector3($13,$14);
       __Z10add_entityR5LevelRK6Entity($agg$result,$13);
       break;
      } else if ((($87|0) == 255)) {
       $106 = ((($color)) + 1|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = $107&255;
       $109 = $108 & 240;
       $110 = (($109|0) / 16)&-1;
       $111 = $110&65535;
       $portal_id = $111;
       $112 = ((($color)) + 1|0);
       $113 = HEAP8[$112>>0]|0;
       $114 = $113&255;
       $115 = $114 & 15;
       $116 = $115&65535;
       $connected_portal_id = $116;
       $117 = $portal_id;
       $118 = $117&65535;
       $119 = $connected_portal_id;
       $120 = $119&65535;
       HEAP32[$vararg_buffer>>2] = $118;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $120;
       (_printf((192|0),($vararg_buffer|0))|0);
       $121 = $x;
       $122 = (+($121|0));
       HEAPF32[$18>>2] = $122;
       $123 = ((($18)) + 4|0);
       $124 = $y;
       $125 = (+($124|0));
       HEAPF32[$123>>2] = $125;
       $126 = ((($18)) + 8|0);
       HEAPF32[$126>>2] = 0.0;
       $127 = $portal_id;
       $128 = $connected_portal_id;
       __Z13create_portalRK7Vector3tt($17,$18,$127,$128);
       __Z10add_entityR5LevelRK6Entity($agg$result,$17);
       break;
      } else if ((($87|0) == 128)) {
       $100 = $x;
       $101 = (+($100|0));
       HEAPF32[$16>>2] = $101;
       $102 = ((($16)) + 4|0);
       $103 = $y;
       $104 = (+($103|0));
       HEAPF32[$102>>2] = $104;
       $105 = ((($16)) + 8|0);
       HEAPF32[$105>>2] = 0.0;
       __Z11create_bossRK7Vector3($15,$16);
       __Z10add_entityR5LevelRK6Entity($agg$result,$15);
       break;
      } else if ((($87|0) == 0)) {
       $88 = $x;
       $89 = (+($88|0));
       HEAPF32[$12>>2] = $89;
       $90 = ((($12)) + 4|0);
       $91 = $y;
       $92 = (+($91|0));
       HEAPF32[$90>>2] = $92;
       $93 = ((($12)) + 8|0);
       HEAPF32[$93>>2] = 0.0;
       __Z11create_mageRK7Vector3($11,$12);
       __Z10add_entityR5LevelRK6Entity($agg$result,$11);
       break;
      } else {
       break;
      }
     }
    }
   } while(0);
   $129 = HEAP8[$color>>0]|0;
   $130 = $129&255;
   $131 = ($130|0)==(255);
   do {
    if ($131) {
     $132 = ((($color)) + 2|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = ($134|0)!=(255);
     if ($135) {
      $136 = ((($color)) + 2|0);
      $137 = HEAP8[$136>>0]|0;
      $138 = $137&255;
      $139 = ($138|0)==(0);
      if ($139) {
       $140 = $x;
       $141 = (+($140|0));
       HEAPF32[$20>>2] = $141;
       $142 = ((($20)) + 4|0);
       $143 = $y;
       $144 = (+($143|0));
       HEAPF32[$142>>2] = $144;
       $145 = ((($20)) + 8|0);
       HEAPF32[$145>>2] = 0.0;
       __Z20create_health_potionRK7Vector3($19,$20);
       __Z10add_entityR5LevelRK6Entity($agg$result,$19);
       break;
      }
      $146 = ((($color)) + 2|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147&255;
      $149 = ($148|0)==(1);
      if ($149) {
       $150 = $x;
       $151 = (+($150|0));
       HEAPF32[$22>>2] = $151;
       $152 = ((($22)) + 4|0);
       $153 = $y;
       $154 = (+($153|0));
       HEAPF32[$152>>2] = $154;
       $155 = ((($22)) + 8|0);
       HEAPF32[$155>>2] = 0.0;
       __Z18create_mana_potionRK7Vector3($21,$22);
       __Z10add_entityR5LevelRK6Entity($agg$result,$21);
      }
     }
    }
   } while(0);
   ;HEAP32[$23>>2]=HEAP32[$color>>2]|0;
   ;HEAP32[$24>>2]=HEAP32[216>>2]|0;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$24>>2]|0;
   $156 = (__Zeq5ColorS_($$byval_copy11,$$byval_copy12)|0);
   if ($156) {
    $157 = $x;
    $158 = (+($157|0));
    HEAPF32[$26>>2] = $158;
    $159 = ((($26)) + 4|0);
    $160 = $y;
    $161 = (+($160|0));
    HEAPF32[$159>>2] = $161;
    $162 = ((($26)) + 8|0);
    HEAPF32[$162>>2] = 0.0;
    __Z13create_scrollRK7Vector3($25,$26);
    __Z10add_entityR5LevelRK6Entity($agg$result,$25);
   }
   ;HEAP32[$27>>2]=HEAP32[$color>>2]|0;
   ;HEAP32[$28>>2]=HEAP32[224>>2]|0;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$28>>2]|0;
   $163 = (__Zeq5ColorS_($$byval_copy13,$$byval_copy14)|0);
   if ($163) {
    $164 = ((($agg$result)) + 12|0);
    $165 = $x;
    $166 = (+($165|0));
    HEAPF32[$29>>2] = $166;
    $167 = ((($29)) + 4|0);
    $168 = $y;
    $169 = (+($168|0));
    HEAPF32[$167>>2] = $169;
    ;HEAP32[$164>>2]=HEAP32[$29>>2]|0;HEAP32[$164+4>>2]=HEAP32[$29+4>>2]|0;
   }
   $170 = $tile;
   $171 = ((($170)) + 1|0);
   HEAP8[$171>>0] = 0;
   $172 = $tile;
   HEAP8[$172>>0] = 16;
   $173 = $x;
   $174 = (($173) + 1)|0;
   $x = $174;
  }
  $175 = $y;
  $176 = (($175) + 1)|0;
  $y = $176;
 }
 STACKTOP = sp;return;
}
function __Z10add_entityR5LevelRK6Entity($level,$entity) {
 $level = $level|0;
 $entity = $entity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $level;
 $1 = $entity;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(64);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 28|0);
 $12 = (($11) + (($8*52)|0)|0);
 $13 = $1;
 dest=$12; src=$13; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __Z11create_mageRK7Vector3($agg$result,$position) {
 $agg$result = $agg$result|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $position;
 dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 258;
 $1 = ((($agg$result)) + 8|0);
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$2>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = ((($agg$result)) + 28|0);
 HEAPF32[$3>>2] = 7.0;
 $4 = ((($agg$result)) + 32|0);
 HEAPF32[$4>>2] = 7.0;
 $5 = ((($agg$result)) + 36|0);
 HEAPF32[$5>>2] = 16.0;
 $6 = ((($agg$result)) + 40|0);
 HEAPF32[$6>>2] = 16.0;
 STACKTOP = sp;return;
}
function __Z15create_prisonerRK7Vector3($agg$result,$position) {
 $agg$result = $agg$result|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $position;
 dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 66;
 $1 = ((($agg$result)) + 8|0);
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$2>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = ((($agg$result)) + 28|0);
 HEAPF32[$3>>2] = 4.0;
 $4 = ((($agg$result)) + 32|0);
 HEAPF32[$4>>2] = 4.0;
 $5 = ((($agg$result)) + 36|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = ((($agg$result)) + 40|0);
 HEAPF32[$6>>2] = 0.0;
 STACKTOP = sp;return;
}
function __Z11create_bossRK7Vector3($agg$result,$position) {
 $agg$result = $agg$result|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $position;
 dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 514;
 $1 = ((($agg$result)) + 8|0);
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$2>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = ((($agg$result)) + 28|0);
 HEAPF32[$3>>2] = 70.0;
 $4 = ((($agg$result)) + 32|0);
 HEAPF32[$4>>2] = 70.0;
 $5 = ((($agg$result)) + 36|0);
 HEAPF32[$5>>2] = 70.0;
 $6 = ((($agg$result)) + 40|0);
 HEAPF32[$6>>2] = 70.0;
 STACKTOP = sp;return;
}
function __Z13create_portalRK7Vector3tt($agg$result,$position,$portal_id,$connected_portal_id) {
 $agg$result = $agg$result|0;
 $position = $position|0;
 $portal_id = $portal_id|0;
 $connected_portal_id = $connected_portal_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $position;
 $1 = $portal_id;
 $2 = $connected_portal_id;
 dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 5;
 $3 = $1;
 $4 = ((($agg$result)) + 4|0);
 HEAP16[$4>>1] = $3;
 $5 = $2;
 $6 = ((($agg$result)) + 4|0);
 $7 = ((($6)) + 2|0);
 HEAP16[$7>>1] = $5;
 $8 = ((($agg$result)) + 8|0);
 $9 = $0;
 ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
 $10 = ((($agg$result)) + 28|0);
 HEAPF32[$10>>2] = 20.0;
 $11 = ((($agg$result)) + 32|0);
 HEAPF32[$11>>2] = 20.0;
 $12 = ((($agg$result)) + 36|0);
 HEAPF32[$12>>2] = 0.0;
 $13 = ((($agg$result)) + 40|0);
 HEAPF32[$13>>2] = 0.0;
 STACKTOP = sp;return;
}
function __Z20create_health_potionRK7Vector3($agg$result,$position) {
 $agg$result = $agg$result|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $position;
 dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 17;
 $1 = ((($agg$result)) + 8|0);
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$2>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = ((($agg$result)) + 28|0);
 HEAPF32[$3>>2] = 1.0E+7;
 $4 = ((($agg$result)) + 32|0);
 HEAPF32[$4>>2] = 1.0E+7;
 $5 = ((($agg$result)) + 36|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = ((($agg$result)) + 40|0);
 HEAPF32[$6>>2] = 0.0;
 STACKTOP = sp;return;
}
function __Z18create_mana_potionRK7Vector3($agg$result,$position) {
 $agg$result = $agg$result|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $position;
 dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 33;
 $1 = ((($agg$result)) + 8|0);
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$2>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = ((($agg$result)) + 28|0);
 HEAPF32[$3>>2] = 1.0E+7;
 $4 = ((($agg$result)) + 32|0);
 HEAPF32[$4>>2] = 1.0E+7;
 $5 = ((($agg$result)) + 36|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = ((($agg$result)) + 40|0);
 HEAPF32[$6>>2] = 0.0;
 STACKTOP = sp;return;
}
function __Z13create_scrollRK7Vector3($agg$result,$position) {
 $agg$result = $agg$result|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $position;
 dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 9;
 $1 = ((($agg$result)) + 8|0);
 $2 = $0;
 ;HEAP32[$1>>2]=HEAP32[$2>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = ((($agg$result)) + 28|0);
 HEAPF32[$3>>2] = 1.0E+7;
 $4 = ((($agg$result)) + 32|0);
 HEAPF32[$4>>2] = 1.0E+7;
 $5 = ((($agg$result)) + 36|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = ((($agg$result)) + 40|0);
 HEAPF32[$6>>2] = 0.0;
 STACKTOP = sp;return;
}
function __Z18create_framebufferii($agg$result,$width,$height) {
 $agg$result = $agg$result|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;HEAP32[$agg$result+12>>2]=0|0;HEAP32[$agg$result+16>>2]=0|0;HEAP32[$agg$result+20>>2]=0|0;
 $2 = $0;
 $3 = $1;
 $4 = (_SDL_CreateRGBSurface(134217729,($2|0),($3|0),32,255,65280,16711680,-16777216)|0);
 $5 = ((($agg$result)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($agg$result)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  __Z9sdl_errorPKc(232);
 }
 $9 = $0;
 HEAP32[$agg$result>>2] = $9;
 $10 = $1;
 $11 = ((($agg$result)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = $0;
 $13 = $12<<2;
 $14 = ((($agg$result)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($agg$result)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 (_SDL_LockSurface(($16|0))|0);
 $17 = ((($agg$result)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($agg$result)) + 12|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($agg$result)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 _SDL_UnlockSurface(($23|0));
 $24 = $0;
 $25 = $1;
 $26 = Math_imul($24, $25)|0;
 $27 = (_calloc($26,4)|0);
 $28 = ((($agg$result)) + 20|0);
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function __Z4initR4Game($game) {
 $game = $game|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3504|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $2 = sp + 56|0;
 $3 = sp + 80|0;
 $4 = sp + 96|0;
 $5 = sp + 112|0;
 $6 = sp + 128|0;
 $7 = sp + 144|0;
 $1 = $game;
 _srand(1337);
 $8 = (_SDL_Init(48)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  __Z9sdl_errorPKc(256);
  $0 = 0;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 (_printf((272|0),($vararg_buffer|0))|0);
 $10 = (_SDL_SetVideoMode(160,90,32,134217729)|0);
 $11 = $1;
 HEAP32[$11>>2] = $10;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  __Z9sdl_errorPKc(288);
  $0 = 0;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 } else {
  (_printf((312|0),($vararg_buffer1|0))|0);
  $15 = $1;
  $16 = ((($15)) + 4|0);
  __Z18create_framebufferii($2,160,90);
  ;HEAP32[$16>>2]=HEAP32[$2>>2]|0;HEAP32[$16+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[$2+20>>2]|0;
  (_printf((336|0),($vararg_buffer3|0))|0);
  $17 = $1;
  $18 = ((($17)) + 4|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($20|0));
  $22 = 1.0 / $21;
  $23 = $1;
  $24 = ((($23)) + 28|0);
  $25 = ((($24)) + 32|0);
  HEAPF32[$25>>2] = $22;
  $26 = $1;
  $27 = ((($26)) + 28|0);
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  HEAPF32[$29>>2] = 0.10000000149011612;
  $30 = $1;
  $31 = ((($30)) + 28|0);
  $32 = ((($31)) + 24|0);
  HEAPF32[$32>>2] = -0.10000000149011612;
  $33 = $1;
  $34 = ((($33)) + 28|0);
  $35 = ((($34)) + 40|0);
  HEAPF32[$35>>2] = 4.0;
  $36 = $1;
  $37 = ((($36)) + 28|0);
  $38 = ((($37)) + 44|0);
  HEAPF32[$38>>2] = 4.0;
  $39 = $1;
  $40 = ((($39)) + 28|0);
  $41 = ((($40)) + 48|0);
  HEAPF32[$41>>2] = 20.0;
  $42 = $1;
  $43 = ((($42)) + 28|0);
  $44 = ((($43)) + 52|0);
  HEAPF32[$44>>2] = 20.0;
  (_printf((368|0),($vararg_buffer5|0))|0);
  __Z21load_bitmap_from_filePKc($3,392);
  ;HEAP32[8>>2]=HEAP32[$3>>2]|0;HEAP32[8+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[8+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[8+12>>2]=HEAP32[$3+12>>2]|0;
  __Z21load_bitmap_from_filePKc($4,408);
  ;HEAP32[24>>2]=HEAP32[$4>>2]|0;HEAP32[24+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[24+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[24+12>>2]=HEAP32[$4+12>>2]|0;
  __Z21load_bitmap_from_filePKc($5,424);
  ;HEAP32[40>>2]=HEAP32[$5>>2]|0;HEAP32[40+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[40+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[40+12>>2]=HEAP32[$5+12>>2]|0;
  __Z21load_bitmap_from_filePKc($6,440);
  ;HEAP32[56>>2]=HEAP32[$6>>2]|0;HEAP32[56+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[56+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[56+12>>2]=HEAP32[$6+12>>2]|0;
  (_printf((456|0),($vararg_buffer7|0))|0);
  $45 = $1;
  $46 = ((($45)) + 104|0);
  __Z20load_level_from_filePKc($7,480);
  _memcpy(($46|0),($7|0),3356)|0;
  $47 = $1;
  $48 = ((($47)) + 104|0);
  $49 = $1;
  $50 = ((($49)) + 3460|0);
  HEAP32[$50>>2] = $48;
  (_printf((496|0),($vararg_buffer9|0))|0);
  $51 = $1;
  $52 = ((($51)) + 3460|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 12|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $1;
  $57 = ((($56)) + 28|0);
  $58 = ((($57)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  HEAPF32[$59>>2] = $55;
  $60 = $1;
  $61 = ((($60)) + 3460|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 12|0);
  $64 = ((($63)) + 4|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $1;
  $67 = ((($66)) + 28|0);
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  HEAPF32[$69>>2] = $65;
  $70 = $1;
  $71 = ((($70)) + 28|0);
  $72 = ((($71)) + 56|0);
  HEAP32[$72>>2] = 0;
  $73 = $1;
  $74 = ((($73)) + 28|0);
  $75 = ((($74)) + 60|0);
  HEAP32[$75>>2] = 0;
  $76 = $1;
  $77 = ((($76)) + 3508|0);
  HEAP32[$77>>2] = 0;
  $78 = $1;
  $79 = ((($78)) + 3468|0);
  HEAP32[$79>>2] = 1;
  $80 = $1;
  $81 = ((($80)) + 3464|0);
  HEAP32[$81>>2] = 1;
  (_printf((520|0),($vararg_buffer11|0))|0);
  $0 = 1;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function __Z12add_particleR4GameRK8Particle($game,$particle) {
 $game = $game|0;
 $particle = $particle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $game;
 $1 = $particle;
 $2 = $0;
 $3 = ((($2)) + 3508|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(256);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 3508|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = ((($9)) + 3512|0);
 $11 = (($10) + (($8*40)|0)|0);
 $12 = $1;
 dest=$11; src=$12; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $13 = $0;
 $14 = ((($13)) + 3508|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function __Z11update_gameR4Gamef($game,$dt) {
 $game = $game|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $game;
 $1 = $dt;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = ((($3)) + 40|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 <= 0.0;
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 3472|0);
  HEAP32[$8>>2] = 1;
 }
 $9 = $0;
 $10 = ((($9)) + 3472|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 3460|0);
 $15 = HEAP32[$14>>2]|0;
 $level = $15;
 $16 = $0;
 $17 = $1;
 __ZL13update_playerR4Gamef($16,$17);
 $18 = $0;
 $19 = $1;
 __ZL13update_spellsR4Gamef($18,$19);
 $20 = $0;
 $21 = $1;
 __ZL16update_particlesR4Gamef($20,$21);
 $22 = $0;
 $23 = $level;
 $24 = $1;
 __ZL15update_entitiesR4GameR5Levelf($22,$23,$24);
 $25 = $0;
 $26 = $level;
 __ZL20remove_dead_entitiesR4GameR5Level($25,$26);
 $27 = $0;
 $28 = $1;
 __Z17handle_collisionsR4Gamef($27,$28);
 STACKTOP = sp;return;
}
function __Z17handle_collisionsR4Gamef($game,$dt) {
 $game = $game|0;
 $dt = +$dt;
 var $$byval_copy = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $9 = 0, $e = 0, $i = 0, $level = 0, $player_pos = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 128|0;
 $$byval_copy = sp + 112|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $2 = sp + 16|0;
 $3 = sp + 40|0;
 $4 = sp + 56|0;
 $5 = sp + 72|0;
 $6 = sp + 80|0;
 $0 = $game;
 $1 = $dt;
 $7 = $0;
 $8 = ((($7)) + 3460|0);
 $9 = HEAP32[$8>>2]|0;
 $level = $9;
 $10 = $0;
 $11 = ((($10)) + 28|0);
 $player_pos = $11;
 $12 = $player_pos;
 $13 = $level;
 $14 = $player_pos;
 __Z11entity_rectRK7Vector2($3,$14);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 __ZL15check_collisionRK5Level4Rect($2,$13,$$byval_copy);
 (__ZpLR7Vector2RKS_($12,$2)|0);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $level;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = $level;
  $22 = ((($21)) + 28|0);
  $23 = (($22) + (($20*52)|0)|0);
  $e = $23;
  $24 = $e;
  $25 = ((($24)) + 8|0);
  $26 = $player_pos;
  __ZmiRK7Vector3S1_($4,$25,$26);
  $27 = (+__Z6lengthRK7Vector3($4));
  $28 = $27 > 6.0;
  if (!($28)) {
   $29 = $e;
   $30 = ((($29)) + 8|0);
   $31 = $level;
   $32 = $e;
   $33 = ((($32)) + 8|0);
   __Z11entity_rectRK7Vector2($6,$33);
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$6+12>>2]|0;
   __ZL15check_collisionRK5Level4Rect($5,$31,$$byval_copy3);
   (__ZpLR7Vector2RKS_($30,$5)|0);
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $36 = $0;
 $37 = ((($36)) + 28|0);
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = +HEAPF32[$39>>2];
 $41 = $40 < 0.0;
 if (!($41)) {
  $42 = $0;
  $43 = ((($42)) + 28|0);
  $44 = ((($43)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = +HEAPF32[$45>>2];
  $47 = $46 < 0.0;
  if (!($47)) {
   $48 = $0;
   $49 = ((($48)) + 28|0);
   $50 = ((($49)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = +HEAPF32[$51>>2];
   $53 = $level;
   $54 = HEAP32[$53>>2]|0;
   $55 = (+($54|0));
   $56 = $52 >= $55;
   if (!($56)) {
    $57 = $0;
    $58 = ((($57)) + 28|0);
    $59 = ((($58)) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = +HEAPF32[$60>>2];
    $62 = $level;
    $63 = ((($62)) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (+($64|0));
    $66 = $61 >= $65;
    if (!($66)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $67 = $level;
 $68 = ((($67)) + 12|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $0;
 $71 = ((($70)) + 28|0);
 $72 = ((($71)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 HEAPF32[$73>>2] = $69;
 $74 = $level;
 $75 = ((($74)) + 12|0);
 $76 = ((($75)) + 4|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $0;
 $79 = ((($78)) + 28|0);
 $80 = ((($79)) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 HEAPF32[$81>>2] = $77;
 (_printf((536|0),($vararg_buffer|0))|0);
 (_printf((576|0),($vararg_buffer1|0))|0);
 STACKTOP = sp;return;
}
function __Z13clear_buffersR11Framebuffer5Color($display,$clear_color) {
 $display = $display|0;
 $clear_color = $clear_color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $display;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($5, $8)|0;
 $10 = $9<<2;
 _memset(($3|0),0,($10|0))|0;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = Math_imul($13, $16)|0;
  $18 = ($11|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<2)|0);
  ;HEAP32[$23>>2]=HEAP32[$clear_color>>2]|0;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 STACKTOP = sp;return;
}
function __Z15render_entitiesR4Game($game) {
 $game = $game|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $i = 0, $level = 0, $player_pos = 0, $radius = 0.0, $tex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $player_pos = sp + 4|0;
 $1 = sp + 28|0;
 $0 = $game;
 $radius = 6.0;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = +HEAPF32[$5>>2];
 HEAPF32[$player_pos>>2] = $6;
 $7 = ((($player_pos)) + 4|0);
 $8 = $0;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$7>>2] = $12;
 $13 = ((($player_pos)) + 8|0);
 $14 = $0;
 $15 = ((($14)) + 28|0);
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = +HEAPF32[$17>>2];
 HEAPF32[$13>>2] = $18;
 $19 = $0;
 $20 = ((($19)) + 3460|0);
 $21 = HEAP32[$20>>2]|0;
 $level = $21;
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $level;
  $24 = ((($23)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = $level;
  $29 = ((($28)) + 28|0);
  $30 = (($29) + (($27*52)|0)|0);
  $e = $30;
  $31 = $e;
  $32 = ((($31)) + 8|0);
  __ZmiRK7Vector3S1_($1,$32,$player_pos);
  $33 = (+__Z6lengthRK7Vector3($1));
  $34 = $radius;
  $35 = $33 > $34;
  if (!($35)) {
   $tex = 0;
   $36 = $e;
   $37 = HEAP32[$36>>2]|0;
   switch ($37|0) {
   case 66:  {
    $tex = 32;
    break;
   }
   case 258:  {
    $tex = 16;
    break;
   }
   case 5:  {
    $tex = 0;
    break;
   }
   case 9:  {
    $tex = 48;
    break;
   }
   case 17:  {
    $tex = 49;
    break;
   }
   case 33:  {
    $tex = 50;
    break;
   }
   case 514:  {
    $tex = 64;
    break;
   }
   default: {
   }
   }
   $38 = $0;
   $39 = $tex;
   $40 = $e;
   $41 = ((($40)) + 8|0);
   __Z13render_spriteR4GameRK6BitmapiRK7Vector3RK7Vector2($38,24,$39,$41,624);
  }
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 STACKTOP = sp;return;
}
function __Z13render_spriteR4GameRK6BitmapiRK7Vector3RK7Vector2($game,$spritesheet,$tex,$position,$scale) {
 $game = $game|0;
 $spritesheet = $spritesheet|0;
 $tex = $tex|0;
 $position = $position|0;
 $scale = $scale|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $a = 0.0, $cos_theta = 0.0, $depth = 0.0, $dst = 0, $fz = 0.0, $height = 0;
 var $sin_theta = 0.0, $src = 0, $width = 0, $x_center = 0.0, $xc = 0.0, $xp = 0, $xp0 = 0, $xp1 = 0, $xpixel = 0.0, $xpixel0 = 0.0, $xpixel1 = 0.0, $xpt = 0.0, $xt = 0, $xx = 0.0, $y_center = 0.0, $yc = 0.0, $yp = 0, $yp0 = 0, $yp1 = 0, $ypixel = 0.0;
 var $ypixel0 = 0.0, $ypixel1 = 0.0, $ypt = 0.0, $yt = 0, $yy = 0.0, $zz = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $src = sp + 60|0;
 $dst = sp + 64|0;
 $0 = $game;
 $1 = $spritesheet;
 $2 = $tex;
 $3 = $position;
 $4 = $scale;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $width = $7;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $height = $11;
 $12 = $width;
 $13 = (+($12|0));
 $14 = 0.5 * $13;
 $x_center = $14;
 $15 = $0;
 $16 = ((($15)) + 28|0);
 $17 = ((($16)) + 24|0);
 $18 = +HEAPF32[$17>>2];
 $19 = 0.5 + $18;
 $20 = $height;
 $21 = (+($20|0));
 $22 = $19 * $21;
 $y_center = $22;
 $23 = $0;
 $24 = ((($23)) + 28|0);
 $25 = ((($24)) + 28|0);
 $26 = +HEAPF32[$25>>2];
 $27 = (+Math_cos((+$26)));
 $cos_theta = $27;
 $28 = $0;
 $29 = ((($28)) + 28|0);
 $30 = ((($29)) + 28|0);
 $31 = +HEAPF32[$30>>2];
 $32 = (+Math_sin((+$31)));
 $sin_theta = $32;
 $33 = $0;
 $34 = ((($33)) + 28|0);
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = +HEAPF32[$36>>2];
 $38 = $3;
 $39 = +HEAPF32[$38>>2];
 $40 = $37 - $39;
 $41 = 2.0 * $40;
 $xc = $41;
 $42 = $0;
 $43 = ((($42)) + 28|0);
 $44 = ((($43)) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = +HEAPF32[$45>>2];
 $47 = $3;
 $48 = ((($47)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $46 - $49;
 $51 = -2.0 * $50;
 $yc = $51;
 $52 = $0;
 $53 = ((($52)) + 28|0);
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = +HEAPF32[$55>>2];
 $57 = $3;
 $58 = ((($57)) + 8|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $56 - $59;
 $61 = 2.0 * $60;
 $yy = $61;
 $62 = $xc;
 $63 = $cos_theta;
 $64 = $62 * $63;
 $65 = $yc;
 $66 = $sin_theta;
 $67 = $65 * $66;
 $68 = $64 + $67;
 $xx = $68;
 $69 = $yc;
 $70 = $cos_theta;
 $71 = $69 * $70;
 $72 = $xc;
 $73 = $sin_theta;
 $74 = $72 * $73;
 $75 = $71 - $74;
 $zz = $75;
 $76 = $zz;
 $77 = $76 < 0.0010000000474974513;
 if ($77) {
  STACKTOP = sp;return;
 }
 $78 = $0;
 $79 = ((($78)) + 28|0);
 $80 = ((($79)) + 32|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $zz;
 $83 = $81 * $82;
 $84 = 1.0 / $83;
 $fz = $84;
 $85 = $x_center;
 $86 = $xx;
 $87 = $fz;
 $88 = $86 * $87;
 $89 = $85 - $88;
 $xpixel = $89;
 $90 = $y_center;
 $91 = $yy;
 $92 = $fz;
 $93 = $91 * $92;
 $94 = $90 + $93;
 $ypixel = $94;
 $95 = $xpixel;
 $96 = $4;
 $97 = +HEAPF32[$96>>2];
 $98 = $fz;
 $99 = $97 * $98;
 $100 = $95 - $99;
 $xpixel0 = $100;
 $101 = $xpixel;
 $102 = $4;
 $103 = +HEAPF32[$102>>2];
 $104 = $fz;
 $105 = $103 * $104;
 $106 = $101 + $105;
 $xpixel1 = $106;
 $107 = $ypixel;
 $108 = $4;
 $109 = ((($108)) + 4|0);
 $110 = +HEAPF32[$109>>2];
 $111 = $fz;
 $112 = $110 * $111;
 $113 = $107 - $112;
 $ypixel0 = $113;
 $114 = $ypixel;
 $115 = $4;
 $116 = ((($115)) + 4|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $fz;
 $119 = $117 * $118;
 $120 = $114 + $119;
 $ypixel1 = $120;
 $121 = $xpixel0;
 $122 = $121;
 $123 = (+Math_ceil((+$122)));
 $124 = $123;
 $125 = $width;
 $126 = (+($125|0));
 $127 = (+__Z5clampfff($124,0.0,$126));
 $128 = (~~(($127)));
 $xp0 = $128;
 $129 = $xpixel1;
 $130 = $129;
 $131 = (+Math_ceil((+$130)));
 $132 = $131;
 $133 = $width;
 $134 = (+($133|0));
 $135 = (+__Z5clampfff($132,0.0,$134));
 $136 = (~~(($135)));
 $xp1 = $136;
 $137 = $ypixel0;
 $138 = $137;
 $139 = (+Math_ceil((+$138)));
 $140 = $139;
 $141 = $height;
 $142 = (+($141|0));
 $143 = (+__Z5clampfff($140,0.0,$142));
 $144 = (~~(($143)));
 $yp0 = $144;
 $145 = $ypixel1;
 $146 = $145;
 $147 = (+Math_ceil((+$146)));
 $148 = $147;
 $149 = $height;
 $150 = (+($149|0));
 $151 = (+__Z5clampfff($148,0.0,$150));
 $152 = (~~(($151)));
 $yp1 = $152;
 $153 = $zz;
 $154 = 1.0 / $153;
 $depth = $154;
 $155 = $yp0;
 $yp = $155;
 while(1) {
  $156 = $yp;
  $157 = $yp1;
  $158 = ($156|0)<($157|0);
  if (!($158)) {
   break;
  }
  $159 = $yp;
  $160 = (+($159|0));
  $161 = $ypixel0;
  $162 = $160 - $161;
  $163 = $ypixel1;
  $164 = $ypixel0;
  $165 = $163 - $164;
  $166 = $162 / $165;
  $ypt = $166;
  $167 = $ypt;
  $168 = 16.0 * $167;
  $169 = $2;
  $170 = (($169|0) / 16)&-1;
  $171 = $170<<4;
  $172 = (+($171|0));
  $173 = $168 + $172;
  $174 = (~~(($173)));
  $yt = $174;
  $175 = $xp0;
  $xp = $175;
  while(1) {
   $176 = $xp;
   $177 = $xp1;
   $178 = ($176|0)<($177|0);
   if (!($178)) {
    break;
   }
   $179 = $xp;
   $180 = $yp;
   $181 = $width;
   $182 = Math_imul($180, $181)|0;
   $183 = (($179) + ($182))|0;
   $184 = $0;
   $185 = ((($184)) + 4|0);
   $186 = ((($185)) + 20|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + ($183<<2)|0);
   $189 = +HEAPF32[$188>>2];
   $190 = $depth;
   $191 = $189 > $190;
   if (!($191)) {
    $192 = $xp;
    $193 = (+($192|0));
    $194 = $xpixel0;
    $195 = $193 - $194;
    $196 = $xpixel1;
    $197 = $xpixel0;
    $198 = $196 - $197;
    $199 = $195 / $198;
    $xpt = $199;
    $200 = $xpt;
    $201 = 16.0 * $200;
    $202 = $2;
    $203 = (($202|0) % 16)&-1;
    $204 = $203<<4;
    $205 = (+($204|0));
    $206 = $201 + $205;
    $207 = (~~(($206)));
    $xt = $207;
    $208 = $1;
    $209 = $xt;
    $210 = $yt;
    __Z16get_bitmap_pixelRK6Bitmapii($src,$208,$209,$210);
    $211 = ((($src)) + 3|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = $212&255;
    $214 = ($213|0)<(128);
    if (!($214)) {
     $215 = $xp;
     $216 = $yp;
     $217 = $width;
     $218 = Math_imul($216, $217)|0;
     $219 = (($215) + ($218))|0;
     $220 = $0;
     $221 = ((($220)) + 4|0);
     $222 = ((($221)) + 12|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (($223) + ($219<<2)|0);
     ;HEAP32[$dst>>2]=HEAP32[$224>>2]|0;
     $225 = ((($src)) + 3|0);
     $226 = HEAP8[$225>>0]|0;
     $227 = $226&255;
     $228 = (+($227|0));
     $229 = $228 / 255.0;
     $a = $229;
     $230 = HEAP8[$src>>0]|0;
     $231 = $230&255;
     $232 = (+($231|0));
     $233 = $a;
     $234 = $232 * $233;
     $235 = HEAP8[$dst>>0]|0;
     $236 = $235&255;
     $237 = (+($236|0));
     $238 = $a;
     $239 = 1.0 - $238;
     $240 = $237 * $239;
     $241 = $234 + $240;
     $242 = (~~(($241))&255);
     HEAP8[$src>>0] = $242;
     $243 = ((($src)) + 1|0);
     $244 = HEAP8[$243>>0]|0;
     $245 = $244&255;
     $246 = (+($245|0));
     $247 = $a;
     $248 = $246 * $247;
     $249 = ((($dst)) + 1|0);
     $250 = HEAP8[$249>>0]|0;
     $251 = $250&255;
     $252 = (+($251|0));
     $253 = $a;
     $254 = 1.0 - $253;
     $255 = $252 * $254;
     $256 = $248 + $255;
     $257 = (~~(($256))&255);
     $258 = ((($src)) + 1|0);
     HEAP8[$258>>0] = $257;
     $259 = ((($src)) + 2|0);
     $260 = HEAP8[$259>>0]|0;
     $261 = $260&255;
     $262 = (+($261|0));
     $263 = $a;
     $264 = $262 * $263;
     $265 = ((($dst)) + 2|0);
     $266 = HEAP8[$265>>0]|0;
     $267 = $266&255;
     $268 = (+($267|0));
     $269 = $a;
     $270 = 1.0 - $269;
     $271 = $268 * $270;
     $272 = $264 + $271;
     $273 = (~~(($272))&255);
     $274 = ((($src)) + 2|0);
     HEAP8[$274>>0] = $273;
     $275 = ((($src)) + 3|0);
     $276 = HEAP8[$275>>0]|0;
     $277 = $276&255;
     $278 = (+($277|0));
     $279 = ((($dst)) + 3|0);
     $280 = HEAP8[$279>>0]|0;
     $281 = $280&255;
     $282 = (+($281|0));
     $283 = $a;
     $284 = 1.0 - $283;
     $285 = $282 * $284;
     $286 = $278 + $285;
     $287 = (~~(($286))&255);
     $288 = ((($src)) + 3|0);
     HEAP8[$288>>0] = $287;
     $289 = $xp;
     $290 = $yp;
     $291 = $width;
     $292 = Math_imul($290, $291)|0;
     $293 = (($289) + ($292))|0;
     $294 = $0;
     $295 = ((($294)) + 4|0);
     $296 = ((($295)) + 12|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = (($297) + ($293<<2)|0);
     ;HEAP32[$298>>2]=HEAP32[$src>>2]|0;
     $299 = $depth;
     $300 = $xp;
     $301 = $yp;
     $302 = $width;
     $303 = Math_imul($301, $302)|0;
     $304 = (($300) + ($303))|0;
     $305 = $0;
     $306 = ((($305)) + 4|0);
     $307 = ((($306)) + 20|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = (($308) + ($304<<2)|0);
     HEAPF32[$309>>2] = $299;
    }
   }
   $310 = $xp;
   $311 = (($310) + 1)|0;
   $xp = $311;
  }
  $312 = $yp;
  $313 = (($312) + 1)|0;
  $yp = $313;
 }
 STACKTOP = sp;return;
}
function __Z12render_levelR4Game($game) {
 $game = $game|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $center = 0, $east = 0, $level = 0, $north = 0, $offset = 0, $radius = 0, $south = 0, $tex = 0, $west = 0, $x = 0, $x_center = 0, $y = 0, $y_center = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $center = sp + 180|0;
 $east = sp + 164|0;
 $west = sp + 168|0;
 $north = sp + 172|0;
 $south = sp + 176|0;
 $1 = sp + 120|0;
 $2 = sp + 112|0;
 $3 = sp + 40|0;
 $4 = sp;
 $5 = sp + 8|0;
 $6 = sp + 16|0;
 $7 = sp + 24|0;
 $8 = sp + 32|0;
 $9 = sp + 48|0;
 $10 = sp + 56|0;
 $11 = sp + 64|0;
 $12 = sp + 72|0;
 $13 = sp + 80|0;
 $14 = sp + 88|0;
 $15 = sp + 96|0;
 $16 = sp + 104|0;
 $0 = $game;
 $17 = $0;
 $18 = ((($17)) + 3460|0);
 $19 = HEAP32[$18>>2]|0;
 $level = $19;
 $20 = $0;
 __Z13render_floorsR4Gamei($20,1);
 $radius = 6;
 $21 = $0;
 $22 = ((($21)) + 28|0);
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = +HEAPF32[$24>>2];
 $26 = (~~(($25)));
 $x_center = $26;
 $27 = $0;
 $28 = ((($27)) + 28|0);
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = +HEAPF32[$30>>2];
 $32 = (~~(($31)));
 $y_center = $32;
 $33 = $y_center;
 $34 = $radius;
 $35 = (($33) - ($34))|0;
 $y = $35;
 while(1) {
  $36 = $y;
  $37 = $y_center;
  $38 = $radius;
  $39 = (($37) + ($38))|0;
  $40 = ($36|0)<=($39|0);
  if (!($40)) {
   break;
  }
  $41 = $x_center;
  $42 = $radius;
  $43 = (($41) - ($42))|0;
  $x = $43;
  while(1) {
   $44 = $x;
   $45 = $x_center;
   $46 = $radius;
   $47 = (($45) + ($46))|0;
   $48 = ($44|0)<=($47|0);
   if (!($48)) {
    break;
   }
   $49 = $level;
   $50 = $x;
   $51 = $y;
   __Z8get_tileRK5Levelii($center,$49,$50,$51);
   $52 = $level;
   $53 = $x;
   $54 = (($53) + 1)|0;
   $55 = $y;
   __Z8get_tileRK5Levelii($east,$52,$54,$55);
   $56 = $level;
   $57 = $x;
   $58 = (($57) - 1)|0;
   $59 = $y;
   __Z8get_tileRK5Levelii($west,$56,$58,$59);
   $60 = $level;
   $61 = $x;
   $62 = $y;
   $63 = (($62) - 1)|0;
   __Z8get_tileRK5Levelii($north,$60,$61,$63);
   $64 = $level;
   $65 = $x;
   $66 = $y;
   $67 = (($66) + 1)|0;
   __Z8get_tileRK5Levelii($south,$64,$65,$67);
   $tex = 32;
   $68 = ((($center)) + 2|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = ($70|0)==(1);
   do {
    if ($71) {
     $72 = $x;
     $73 = (($72) + 1)|0;
     $74 = $y;
     $75 = (($74) + 1)|0;
     $76 = Math_imul($73, $75)|0;
     $77 = $x;
     $78 = ($77*7)|0;
     $79 = (($76) + ($78))|0;
     $80 = $y;
     $81 = ($80*6)|0;
     $82 = (($79) + ($81))|0;
     $83 = (($82) - 7)|0;
     $84 = $83 & 15;
     $offset = $84;
     $85 = ((($east)) + 2|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = ($87|0)!=(1);
     do {
      if ($88) {
       $89 = ((($east)) + 2|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = $90&255;
       if ((($91|0) == 2)) {
        $92 = $offset;
        $93 = (($92|0) % 2)&-1;
        $94 = (32 + ($93))|0;
        $tex = $94;
       } else if ((($91|0) == 10)) {
        $95 = $offset;
        $96 = (($95|0) % 4)&-1;
        $97 = (48 + ($96))|0;
        $tex = $97;
       } else if ((($91|0) == 19)) {
        $tex = 64;
       } else if ((($91|0) == 5)) {
        $tex = 34;
       }
       $98 = ((($east)) + 2|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = $99&255;
       $101 = ($100|0)==(19);
       $102 = $0;
       $103 = $tex;
       if ($101) {
        $104 = $x;
        $105 = (($104) + 1)|0;
        $106 = (+($105|0));
        HEAPF32[$1>>2] = $106;
        $107 = ((($1)) + 4|0);
        $108 = $y;
        $109 = (($108) + 1)|0;
        $110 = (+($109|0));
        HEAPF32[$107>>2] = $110;
        $111 = $x;
        $112 = (($111) + 1)|0;
        $113 = (+($112|0));
        HEAPF32[$2>>2] = $113;
        $114 = ((($2)) + 4|0);
        $115 = $y;
        $116 = (+($115|0));
        HEAPF32[$114>>2] = $116;
        __Z11render_wallR4GameiRK7Vector2S3_($102,$103,$1,$2);
        break;
       } else {
        $117 = $x;
        $118 = (($117) + 1)|0;
        $119 = (+($118|0));
        HEAPF32[$3>>2] = $119;
        $120 = ((($3)) + 4|0);
        $121 = $y;
        $122 = (($121) + 1)|0;
        $123 = (+($122|0));
        HEAPF32[$120>>2] = $123;
        $124 = $x;
        $125 = (($124) + 1)|0;
        $126 = (+($125|0));
        HEAPF32[$4>>2] = $126;
        $127 = ((($4)) + 4|0);
        $128 = $y;
        $129 = (+($128|0));
        HEAPF32[$127>>2] = $129;
        __Z11render_wallR4GameiRK7Vector2S3_($102,$103,$3,$4);
        break;
       }
      }
     } while(0);
     $130 = ((($west)) + 2|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = $131&255;
     $133 = ($132|0)!=(1);
     do {
      if ($133) {
       $134 = ((($west)) + 2|0);
       $135 = HEAP8[$134>>0]|0;
       $136 = $135&255;
       if ((($136|0) == 5)) {
        $tex = 34;
       } else if ((($136|0) == 2)) {
        $137 = $offset;
        $138 = (($137|0) % 2)&-1;
        $139 = (32 + ($138))|0;
        $tex = $139;
       } else if ((($136|0) == 10)) {
        $140 = $offset;
        $141 = (($140|0) % 4)&-1;
        $142 = (48 + ($141))|0;
        $tex = $142;
       } else if ((($136|0) == 19)) {
        $tex = 64;
       }
       $143 = ((($west)) + 2|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = $144&255;
       $146 = ($145|0)==(19);
       $147 = $0;
       $148 = $tex;
       if ($146) {
        $149 = $x;
        $150 = (+($149|0));
        HEAPF32[$5>>2] = $150;
        $151 = ((($5)) + 4|0);
        $152 = $y;
        $153 = (+($152|0));
        HEAPF32[$151>>2] = $153;
        $154 = $x;
        $155 = (+($154|0));
        HEAPF32[$6>>2] = $155;
        $156 = ((($6)) + 4|0);
        $157 = $y;
        $158 = (($157) + 1)|0;
        $159 = (+($158|0));
        HEAPF32[$156>>2] = $159;
        __Z11render_wallR4GameiRK7Vector2S3_($147,$148,$5,$6);
        break;
       } else {
        $160 = $x;
        $161 = (+($160|0));
        HEAPF32[$7>>2] = $161;
        $162 = ((($7)) + 4|0);
        $163 = $y;
        $164 = (+($163|0));
        HEAPF32[$162>>2] = $164;
        $165 = $x;
        $166 = (+($165|0));
        HEAPF32[$8>>2] = $166;
        $167 = ((($8)) + 4|0);
        $168 = $y;
        $169 = (($168) + 1)|0;
        $170 = (+($169|0));
        HEAPF32[$167>>2] = $170;
        __Z11render_wallR4GameiRK7Vector2S3_($147,$148,$7,$8);
        break;
       }
      }
     } while(0);
     $171 = ((($north)) + 2|0);
     $172 = HEAP8[$171>>0]|0;
     $173 = $172&255;
     $174 = ($173|0)!=(1);
     do {
      if ($174) {
       $175 = ((($north)) + 2|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       if ((($177|0) == 2)) {
        $178 = $offset;
        $179 = (($178|0) % 2)&-1;
        $180 = (32 + ($179))|0;
        $tex = $180;
       } else if ((($177|0) == 5)) {
        $tex = 34;
       } else if ((($177|0) == 10)) {
        $181 = $offset;
        $182 = (($181|0) % 4)&-1;
        $183 = (48 + ($182))|0;
        $tex = $183;
       } else if ((($177|0) == 19)) {
        $tex = 64;
       }
       $184 = ((($north)) + 2|0);
       $185 = HEAP8[$184>>0]|0;
       $186 = $185&255;
       $187 = ($186|0)==(19);
       $188 = $0;
       $189 = $tex;
       if ($187) {
        $190 = $x;
        $191 = (($190) + 1)|0;
        $192 = (+($191|0));
        HEAPF32[$9>>2] = $192;
        $193 = ((($9)) + 4|0);
        $194 = $y;
        $195 = (+($194|0));
        HEAPF32[$193>>2] = $195;
        $196 = $x;
        $197 = (+($196|0));
        HEAPF32[$10>>2] = $197;
        $198 = ((($10)) + 4|0);
        $199 = $y;
        $200 = (+($199|0));
        HEAPF32[$198>>2] = $200;
        __Z11render_wallR4GameiRK7Vector2S3_($188,$189,$9,$10);
        break;
       } else {
        $201 = $x;
        $202 = (($201) + 1)|0;
        $203 = (+($202|0));
        HEAPF32[$11>>2] = $203;
        $204 = ((($11)) + 4|0);
        $205 = $y;
        $206 = (+($205|0));
        HEAPF32[$204>>2] = $206;
        $207 = $x;
        $208 = (+($207|0));
        HEAPF32[$12>>2] = $208;
        $209 = ((($12)) + 4|0);
        $210 = $y;
        $211 = (+($210|0));
        HEAPF32[$209>>2] = $211;
        __Z11render_wallR4GameiRK7Vector2S3_($188,$189,$11,$12);
        break;
       }
      }
     } while(0);
     $212 = ((($south)) + 2|0);
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = ($214|0)!=(1);
     if ($215) {
      $216 = ((($south)) + 2|0);
      $217 = HEAP8[$216>>0]|0;
      $218 = $217&255;
      if ((($218|0) == 10)) {
       $222 = $offset;
       $223 = (($222|0) % 4)&-1;
       $224 = (48 + ($223))|0;
       $tex = $224;
      } else if ((($218|0) == 5)) {
       $tex = 34;
      } else if ((($218|0) == 19)) {
       $tex = 64;
      } else if ((($218|0) == 2)) {
       $219 = $offset;
       $220 = (($219|0) % 2)&-1;
       $221 = (32 + ($220))|0;
       $tex = $221;
      }
      $225 = ((($south)) + 2|0);
      $226 = HEAP8[$225>>0]|0;
      $227 = $226&255;
      $228 = ($227|0)==(19);
      $229 = $0;
      $230 = $tex;
      if ($228) {
       $231 = $x;
       $232 = (+($231|0));
       HEAPF32[$13>>2] = $232;
       $233 = ((($13)) + 4|0);
       $234 = $y;
       $235 = (($234) + 1)|0;
       $236 = (+($235|0));
       HEAPF32[$233>>2] = $236;
       $237 = $x;
       $238 = (($237) + 1)|0;
       $239 = (+($238|0));
       HEAPF32[$14>>2] = $239;
       $240 = ((($14)) + 4|0);
       $241 = $y;
       $242 = (($241) + 1)|0;
       $243 = (+($242|0));
       HEAPF32[$240>>2] = $243;
       __Z11render_wallR4GameiRK7Vector2S3_($229,$230,$13,$14);
       break;
      } else {
       $244 = $x;
       $245 = (+($244|0));
       HEAPF32[$15>>2] = $245;
       $246 = ((($15)) + 4|0);
       $247 = $y;
       $248 = (($247) + 1)|0;
       $249 = (+($248|0));
       HEAPF32[$246>>2] = $249;
       $250 = $x;
       $251 = (($250) + 1)|0;
       $252 = (+($251|0));
       HEAPF32[$16>>2] = $252;
       $253 = ((($16)) + 4|0);
       $254 = $y;
       $255 = (($254) + 1)|0;
       $256 = (+($255|0));
       HEAPF32[$253>>2] = $256;
       __Z11render_wallR4GameiRK7Vector2S3_($229,$230,$15,$16);
       break;
      }
     }
    }
   } while(0);
   $257 = $x;
   $258 = (($257) + 1)|0;
   $x = $258;
  }
  $259 = $y;
  $260 = (($259) + 1)|0;
  $y = $260;
 }
 $261 = $0;
 __Z15render_entitiesR4Game($261);
 $262 = $0;
 __ZL16render_particlesR4Game($262);
 STACKTOP = sp;return;
}
function __Z13render_floorsR4Gamei($game,$draw_ceiling) {
 $game = $game|0;
 $draw_ceiling = $draw_ceiling|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $ceiling_mode = 0, $color = 0, $cos_yaw = 0.0, $dd = 0.0, $depth = 0.0, $dx = 0.0;
 var $dy = 0.0, $height = 0, $level = 0, $or$cond = 0, $row = 0, $sin_yaw = 0.0, $tex = 0, $tile = 0, $width = 0, $x = 0, $x_center = 0.0, $x_tex = 0, $xp = 0, $xtile = 0, $xtt = 0, $xx = 0.0, $y = 0, $y_center = 0.0, $y_tex = 0, $yp = 0;
 var $ytile = 0, $ytt = 0, $yy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tile = sp + 116|0;
 $color = sp + 56|0;
 $0 = $game;
 $1 = $draw_ceiling;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $width = $4;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $height = $8;
 $9 = $width;
 $10 = (+($9|0));
 $11 = 0.5 * $10;
 $x_center = $11;
 $12 = $0;
 $13 = ((($12)) + 28|0);
 $14 = ((($13)) + 24|0);
 $15 = +HEAPF32[$14>>2];
 $16 = 0.5 + $15;
 $17 = $height;
 $18 = (+($17|0));
 $19 = $16 * $18;
 $y_center = $19;
 $20 = $0;
 $21 = ((($20)) + 28|0);
 $22 = ((($21)) + 28|0);
 $23 = +HEAPF32[$22>>2];
 $24 = (+Math_cos((+$23)));
 $cos_yaw = $24;
 $25 = $0;
 $26 = ((($25)) + 28|0);
 $27 = ((($26)) + 28|0);
 $28 = +HEAPF32[$27>>2];
 $29 = (+Math_sin((+$28)));
 $sin_yaw = $29;
 $30 = $0;
 $31 = ((($30)) + 3460|0);
 $32 = HEAP32[$31>>2]|0;
 $level = $32;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (0 - ($39))|0;
 $41 = (($36) + ($40<<2)|0);
 $row = $41;
 $y = 0;
 while(1) {
  $42 = $y;
  $43 = $height;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $row;
  $49 = (($48) + ($47<<2)|0);
  $row = $49;
  $50 = $y;
  $51 = (+($50>>>0));
  $52 = $51 + 0.5;
  $53 = $y_center;
  $54 = $52 - $53;
  $55 = $0;
  $56 = ((($55)) + 28|0);
  $57 = ((($56)) + 32|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $54 * $58;
  $dy = $59;
  $dd = 0.0;
  $ceiling_mode = 0;
  $60 = $dy;
  $61 = $60 > 0.0;
  $62 = $0;
  $63 = ((($62)) + 28|0);
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = +HEAPF32[$65>>2];
  if ($61) {
   $67 = $66 + 0.5;
   $68 = 16.0 * $67;
   $69 = $dy;
   $70 = $68 / $69;
   $dd = $70;
  } else {
   $71 = $66 - 0.5;
   $72 = 16.0 * $71;
   $73 = $dy;
   $74 = $72 / $73;
   $dd = $74;
   $ceiling_mode = 1;
  }
  $75 = $dd;
  $76 = 1.0 / $75;
  $depth = $76;
  $x = 0;
  while(1) {
   $77 = $x;
   $78 = $width;
   $79 = ($77>>>0)<($78>>>0);
   if (!($79)) {
    break;
   }
   $80 = $x;
   $81 = $y;
   $82 = $width;
   $83 = Math_imul($81, $82)|0;
   $84 = (($80) + ($83))|0;
   $85 = $0;
   $86 = ((($85)) + 4|0);
   $87 = ((($86)) + 20|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + ($84<<2)|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $depth;
   $92 = $90 > $91;
   L11: do {
    if (!($92)) {
     $93 = $dd;
     $94 = $x;
     $95 = (+($94>>>0));
     $96 = $x_center;
     $97 = $95 - $96;
     $98 = $93 * $97;
     $99 = $0;
     $100 = ((($99)) + 28|0);
     $101 = ((($100)) + 32|0);
     $102 = +HEAPF32[$101>>2];
     $103 = $98 * $102;
     $dx = $103;
     $104 = $dx;
     $105 = $cos_yaw;
     $106 = $104 * $105;
     $107 = $dd;
     $108 = $sin_yaw;
     $109 = $107 * $108;
     $110 = $106 + $109;
     $111 = $0;
     $112 = ((($111)) + 28|0);
     $113 = ((($112)) + 12|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = +HEAPF32[$114>>2];
     $116 = $115 + 0.5;
     $117 = $116 * 16.0;
     $118 = $110 + $117;
     $xx = $118;
     $119 = $dd;
     $120 = $cos_yaw;
     $121 = $119 * $120;
     $122 = $dx;
     $123 = $sin_yaw;
     $124 = $122 * $123;
     $125 = $121 - $124;
     $126 = $0;
     $127 = ((($126)) + 28|0);
     $128 = ((($127)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = +HEAPF32[$129>>2];
     $131 = $130 + 0.5;
     $132 = $131 * 16.0;
     $133 = $125 + $132;
     $yy = $133;
     $134 = $xx;
     $135 = (~~(($134)));
     $xp = $135;
     $136 = $yy;
     $137 = (~~(($136)));
     $yp = $137;
     $138 = $xp;
     $139 = $138 >> 4;
     $xtile = $139;
     $140 = $yp;
     $141 = $140 >> 4;
     $ytile = $141;
     $142 = $xx;
     $143 = $142 < 0.0;
     if ($143) {
      $144 = $xp;
      $145 = (($144) + -1)|0;
      $xp = $145;
     }
     $146 = $yy;
     $147 = $146 < 0.0;
     if ($147) {
      $148 = $yp;
      $149 = (($148) + -1)|0;
      $yp = $149;
     }
     $tex = 0;
     $150 = $xp;
     $151 = $150 & 15;
     $xtt = $151;
     $152 = $yp;
     $153 = $152 & 15;
     $ytt = $153;
     $154 = $xtile;
     $155 = ($154|0)>=(0);
     $156 = $ytile;
     $157 = ($156|0)>=(0);
     $or$cond = $155 & $157;
     do {
      if ($or$cond) {
       $158 = $xtile;
       $159 = $level;
       $160 = HEAP32[$159>>2]|0;
       $161 = ($158|0)<($160|0);
       if ($161) {
        $162 = $ytile;
        $163 = $level;
        $164 = ((($163)) + 4|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ($162|0)<($165|0);
        if ($166) {
         $167 = $xtile;
         $168 = $ytile;
         $169 = $level;
         $170 = HEAP32[$169>>2]|0;
         $171 = Math_imul($168, $170)|0;
         $172 = (($167) + ($171))|0;
         $173 = $level;
         $174 = ((($173)) + 8|0);
         $175 = HEAP32[$174>>2]|0;
         $176 = (($175) + ($172<<2)|0);
         ;HEAP8[$tile>>0]=HEAP8[$176>>0]|0;HEAP8[$tile+1>>0]=HEAP8[$176+1>>0]|0;HEAP8[$tile+2>>0]=HEAP8[$176+2>>0]|0;HEAP8[$tile+3>>0]=HEAP8[$176+3>>0]|0;
         $177 = ((($tile)) + 2|0);
         $178 = HEAP8[$177>>0]|0;
         $179 = $178&255;
         $180 = ($179|0)!=(1);
         if ($180) {
          $181 = ((($tile)) + 2|0);
          $182 = HEAP8[$181>>0]|0;
          $183 = $182&255;
          $184 = ($183|0)!=(19);
          if ($184) {
           break L11;
          }
         }
         $185 = $ceiling_mode;
         $186 = ($185|0)!=(0);
         if ($186) {
          $187 = ((($tile)) + 1|0);
          $188 = HEAP8[$187>>0]|0;
          $189 = $188&255;
          $tex = $189;
          break;
         }
         $190 = HEAP8[$tile>>0]|0;
         $191 = $190&255;
         $tex = $191;
         $192 = $xtile;
         $193 = $ytile;
         $194 = Math_imul($192, $193)|0;
         $195 = $xtile;
         $196 = ($195*3)|0;
         $197 = (($194) + ($196))|0;
         $198 = (($197) - 7)|0;
         $199 = $198 & 7;
         $200 = ($199|0)==(0);
         if ($200) {
          $201 = $tex;
          $202 = (($201) + 1)|0;
          $tex = $202;
         }
        }
       }
      }
     } while(0);
     $203 = $tex;
     $204 = (($203|0) % 16)&-1;
     $205 = $204<<4;
     $x_tex = $205;
     $206 = $tex;
     $207 = (($206|0) / 16)&-1;
     $208 = $207<<4;
     $y_tex = $208;
     $209 = $x_tex;
     $210 = $xtt;
     $211 = (($209) + ($210))|0;
     $212 = $y_tex;
     $213 = $ytt;
     $214 = (($212) + ($213))|0;
     __Z16get_bitmap_pixelRK6Bitmapii($color,8,$211,$214);
     $215 = $x;
     $216 = $row;
     $217 = (($216) + ($215<<2)|0);
     ;HEAP32[$217>>2]=HEAP32[$color>>2]|0;
     $218 = $depth;
     $219 = 8.0 * $218;
     $220 = $x;
     $221 = $y;
     $222 = $width;
     $223 = Math_imul($221, $222)|0;
     $224 = (($220) + ($223))|0;
     $225 = $0;
     $226 = ((($225)) + 4|0);
     $227 = ((($226)) + 20|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (($228) + ($224<<2)|0);
     HEAPF32[$229>>2] = $219;
    }
   } while(0);
   $230 = $x;
   $231 = (($230) + 1)|0;
   $x = $231;
  }
  $232 = $y;
  $233 = (($232) + 1)|0;
  $y = $233;
 }
 STACKTOP = sp;return;
}
function __Z11render_wallR4GameiRK7Vector2S3_($game,$tex,$p0,$p1) {
 $game = $game|0;
 $tex = $tex|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $color = 0, $cos_theta = 0.0, $depth = 0.0, $depth_clip = 0.0, $height = 0, $iz0 = 0.0, $iz1 = 0.0, $l0 = 0.0, $l1 = 0.0;
 var $or$cond = 0, $sin_theta = 0.0, $t = 0.0, $t1 = 0.0, $tx = 0.0, $ty = 0.0, $u0 = 0.0, $u1 = 0.0, $width = 0, $x = 0, $x_center = 0.0, $x_tex = 0, $xc0 = 0.0, $xc1 = 0.0, $xp0 = 0, $xp1 = 0, $xpixel0 = 0.0, $xpixel1 = 0.0, $xt0 = 0.0, $xt1 = 0.0;
 var $xx0 = 0.0, $xx1 = 0.0, $y = 0, $y_center = 0.0, $y_tex = 0, $yc0 = 0.0, $yc1 = 0.0, $yp0 = 0, $yp1 = 0, $ypixel0 = 0.0, $ypixel00 = 0.0, $ypixel01 = 0.0, $ypixel1 = 0.0, $ypixel10 = 0.0, $ypixel11 = 0.0, $zz0 = 0.0, $zz1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color = sp + 92|0;
 $0 = $game;
 $1 = $tex;
 $2 = $p0;
 $3 = $p1;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $width = $6;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $height = $10;
 $11 = $width;
 $12 = (+($11|0));
 $13 = 0.5 * $12;
 $x_center = $13;
 $14 = $0;
 $15 = ((($14)) + 28|0);
 $16 = ((($15)) + 24|0);
 $17 = +HEAPF32[$16>>2];
 $18 = 0.5 + $17;
 $19 = $height;
 $20 = (+($19|0));
 $21 = $18 * $20;
 $y_center = $21;
 $22 = $0;
 $23 = ((($22)) + 28|0);
 $24 = ((($23)) + 28|0);
 $25 = +HEAPF32[$24>>2];
 $26 = (+Math_cos((+$25)));
 $cos_theta = $26;
 $27 = $0;
 $28 = ((($27)) + 28|0);
 $29 = ((($28)) + 28|0);
 $30 = +HEAPF32[$29>>2];
 $31 = (+Math_sin((+$30)));
 $sin_theta = $31;
 $32 = $2;
 $33 = +HEAPF32[$32>>2];
 $34 = $0;
 $35 = ((($34)) + 28|0);
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = +HEAPF32[$37>>2];
 $39 = $33 - $38;
 $40 = 2.0 * $39;
 $41 = $40 - 1.0;
 $xc0 = $41;
 $42 = $2;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $0;
 $46 = ((($45)) + 28|0);
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = +HEAPF32[$48>>2];
 $50 = $44 - $49;
 $51 = 2.0 * $50;
 $52 = $51 - 1.0;
 $yc0 = $52;
 $53 = $xc0;
 $54 = $cos_theta;
 $55 = $53 * $54;
 $56 = $yc0;
 $57 = $sin_theta;
 $58 = $56 * $57;
 $59 = $55 - $58;
 $xx0 = $59;
 $60 = $0;
 $61 = ((($60)) + 28|0);
 $62 = ((($61)) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = +HEAPF32[$63>>2];
 $65 = 2.0 * $64;
 $66 = $65 - 1.0;
 $u0 = $66;
 $67 = $0;
 $68 = ((($67)) + 28|0);
 $69 = ((($68)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = +HEAPF32[$70>>2];
 $72 = 2.0 * $71;
 $73 = $72 + 1.0;
 $l0 = $73;
 $74 = $yc0;
 $75 = $cos_theta;
 $76 = $74 * $75;
 $77 = $xc0;
 $78 = $sin_theta;
 $79 = $77 * $78;
 $80 = $76 + $79;
 $zz0 = $80;
 $81 = $3;
 $82 = +HEAPF32[$81>>2];
 $83 = $0;
 $84 = ((($83)) + 28|0);
 $85 = ((($84)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = +HEAPF32[$86>>2];
 $88 = $82 - $87;
 $89 = 2.0 * $88;
 $90 = $89 - 1.0;
 $xc1 = $90;
 $91 = $3;
 $92 = ((($91)) + 4|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $0;
 $95 = ((($94)) + 28|0);
 $96 = ((($95)) + 16|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = +HEAPF32[$97>>2];
 $99 = $93 - $98;
 $100 = 2.0 * $99;
 $101 = $100 - 1.0;
 $yc1 = $101;
 $102 = $xc1;
 $103 = $cos_theta;
 $104 = $102 * $103;
 $105 = $yc1;
 $106 = $sin_theta;
 $107 = $105 * $106;
 $108 = $104 - $107;
 $xx1 = $108;
 $109 = $0;
 $110 = ((($109)) + 28|0);
 $111 = ((($110)) + 20|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = +HEAPF32[$112>>2];
 $114 = 2.0 * $113;
 $115 = $114 - 1.0;
 $u1 = $115;
 $116 = $0;
 $117 = ((($116)) + 28|0);
 $118 = ((($117)) + 20|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = +HEAPF32[$119>>2];
 $121 = 2.0 * $120;
 $122 = $121 + 1.0;
 $l1 = $122;
 $123 = $yc1;
 $124 = $cos_theta;
 $125 = $123 * $124;
 $126 = $xc1;
 $127 = $sin_theta;
 $128 = $126 * $127;
 $129 = $125 + $128;
 $zz1 = $129;
 $xt0 = 0.0;
 $xt1 = 16.0;
 $depth_clip = 0.0010000000474974513;
 $130 = $zz0;
 $131 = $130 < 0.0010000000474974513;
 $132 = $zz1;
 $133 = $132 < 0.0010000000474974513;
 $or$cond = $131 & $133;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $134 = $zz0;
 $135 = $134 < 0.0010000000474974513;
 if ($135) {
  $136 = $zz0;
  $137 = 0.0010000000474974513 - $136;
  $138 = $zz1;
  $139 = $zz0;
  $140 = $138 - $139;
  $141 = $137 / $140;
  $t = $141;
  $142 = $zz0;
  $143 = $zz1;
  $144 = $t;
  $145 = (+__Z4lerpfff($142,$143,$144));
  $zz0 = $145;
  $146 = $xx0;
  $147 = $xx1;
  $148 = $t;
  $149 = (+__Z4lerpfff($146,$147,$148));
  $xx0 = $149;
  $150 = $xt0;
  $151 = $xt1;
  $152 = $t;
  $153 = (+__Z4lerpfff($150,$151,$152));
  $xt0 = $153;
 }
 $154 = $zz1;
 $155 = $154 < 0.0010000000474974513;
 if ($155) {
  $156 = $zz0;
  $157 = 0.0010000000474974513 - $156;
  $158 = $zz1;
  $159 = $zz0;
  $160 = $158 - $159;
  $161 = $157 / $160;
  $t1 = $161;
  $162 = $zz0;
  $163 = $zz1;
  $164 = $t1;
  $165 = (+__Z4lerpfff($162,$163,$164));
  $zz1 = $165;
  $166 = $xx0;
  $167 = $xx1;
  $168 = $t1;
  $169 = (+__Z4lerpfff($166,$167,$168));
  $xx1 = $169;
  $170 = $xt0;
  $171 = $xt1;
  $172 = $t1;
  $173 = (+__Z4lerpfff($170,$171,$172));
  $xt1 = $173;
 }
 $174 = $xx0;
 $175 = $zz0;
 $176 = $174 / $175;
 $177 = $0;
 $178 = ((($177)) + 28|0);
 $179 = ((($178)) + 32|0);
 $180 = +HEAPF32[$179>>2];
 $181 = $176 / $180;
 $182 = $x_center;
 $183 = $181 + $182;
 $xpixel0 = $183;
 $184 = $xx1;
 $185 = $zz1;
 $186 = $184 / $185;
 $187 = $0;
 $188 = ((($187)) + 28|0);
 $189 = ((($188)) + 32|0);
 $190 = +HEAPF32[$189>>2];
 $191 = $186 / $190;
 $192 = $x_center;
 $193 = $191 + $192;
 $xpixel1 = $193;
 $194 = $xpixel0;
 $195 = $xpixel1;
 $196 = $194 >= $195;
 if ($196) {
  STACKTOP = sp;return;
 }
 $197 = $xpixel0;
 $198 = $197;
 $199 = (+Math_ceil((+$198)));
 $200 = (~~(($199)));
 $xp0 = $200;
 $201 = $xpixel1;
 $202 = $201;
 $203 = (+Math_ceil((+$202)));
 $204 = (~~(($203)));
 $xp1 = $204;
 $205 = $xp0;
 $206 = ($205|0)<(0);
 if ($206) {
  $xp0 = 0;
 }
 $207 = $xp1;
 $208 = $width;
 $209 = ($207|0)>=($208|0);
 if ($209) {
  $210 = $width;
  $211 = (($210) - 1)|0;
  $xp1 = $211;
 }
 $212 = $u0;
 $213 = $zz0;
 $214 = $212 / $213;
 $215 = $0;
 $216 = ((($215)) + 28|0);
 $217 = ((($216)) + 32|0);
 $218 = +HEAPF32[$217>>2];
 $219 = $214 / $218;
 $220 = $y_center;
 $221 = $219 + $220;
 $ypixel00 = $221;
 $222 = $l0;
 $223 = $zz0;
 $224 = $222 / $223;
 $225 = $0;
 $226 = ((($225)) + 28|0);
 $227 = ((($226)) + 32|0);
 $228 = +HEAPF32[$227>>2];
 $229 = $224 / $228;
 $230 = $y_center;
 $231 = $229 + $230;
 $ypixel01 = $231;
 $232 = $u1;
 $233 = $zz1;
 $234 = $232 / $233;
 $235 = $0;
 $236 = ((($235)) + 28|0);
 $237 = ((($236)) + 32|0);
 $238 = +HEAPF32[$237>>2];
 $239 = $234 / $238;
 $240 = $y_center;
 $241 = $239 + $240;
 $ypixel10 = $241;
 $242 = $l1;
 $243 = $zz1;
 $244 = $242 / $243;
 $245 = $0;
 $246 = ((($245)) + 28|0);
 $247 = ((($246)) + 32|0);
 $248 = +HEAPF32[$247>>2];
 $249 = $244 / $248;
 $250 = $y_center;
 $251 = $249 + $250;
 $ypixel11 = $251;
 $252 = $zz0;
 $253 = 1.0 / $252;
 $iz0 = $253;
 $254 = $zz1;
 $255 = 1.0 / $254;
 $iz1 = $255;
 $256 = $xp0;
 $x = $256;
 while(1) {
  $257 = $x;
  $258 = $xp1;
  $259 = ($257|0)<=($258|0);
  if (!($259)) {
   break;
  }
  $260 = $x;
  $261 = (+($260|0));
  $262 = $xpixel0;
  $263 = $261 - $262;
  $264 = $xpixel1;
  $265 = $xpixel0;
  $266 = $264 - $265;
  $267 = $263 / $266;
  $tx = $267;
  $268 = $iz0;
  $269 = $iz1;
  $270 = $tx;
  $271 = (+__Z4lerpfff($268,$269,$270));
  $depth = $271;
  $272 = $xt0;
  $273 = $iz0;
  $274 = $272 * $273;
  $275 = $xt1;
  $276 = $iz1;
  $277 = $275 * $276;
  $278 = $tx;
  $279 = (+__Z4lerpfff($274,$277,$278));
  $280 = $depth;
  $281 = $279 / $280;
  $282 = (~~(($281)));
  $x_tex = $282;
  $283 = $ypixel00;
  $284 = $ypixel10;
  $285 = $tx;
  $286 = (+__Z4lerpfff($283,$284,$285));
  $ypixel0 = $286;
  $287 = $ypixel01;
  $288 = $ypixel11;
  $289 = $tx;
  $290 = (+__Z4lerpfff($287,$288,$289));
  $ypixel1 = $290;
  $291 = $ypixel0;
  $292 = (~~(($291)));
  $yp0 = $292;
  $293 = $ypixel1;
  $294 = (~~(($293)));
  $yp1 = $294;
  $295 = $yp0;
  $296 = ($295|0)<(0);
  if ($296) {
   $yp0 = 0;
  }
  $297 = $yp1;
  $298 = $height;
  $299 = ($297|0)>=($298|0);
  if ($299) {
   $300 = $height;
   $301 = (($300) - 1)|0;
   $yp1 = $301;
  }
  $302 = $yp0;
  $y = $302;
  while(1) {
   $303 = $y;
   $304 = $yp1;
   $305 = ($303|0)<=($304|0);
   if (!($305)) {
    break;
   }
   $306 = $y;
   $307 = (+($306|0));
   $308 = $ypixel0;
   $309 = $307 - $308;
   $310 = $ypixel1;
   $311 = $ypixel0;
   $312 = $310 - $311;
   $313 = $309 / $312;
   $ty = $313;
   $314 = $ty;
   $315 = $314 * 16.0;
   $316 = (~~(($315)));
   $y_tex = $316;
   $317 = $x;
   $318 = $y;
   $319 = $width;
   $320 = Math_imul($318, $319)|0;
   $321 = (($317) + ($320))|0;
   $322 = $0;
   $323 = ((($322)) + 4|0);
   $324 = ((($323)) + 20|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($325) + ($321<<2)|0);
   $327 = +HEAPF32[$326>>2];
   $328 = $depth;
   $329 = $327 > $328;
   if (!($329)) {
    $330 = $x_tex;
    $331 = (($330|0) % 16)&-1;
    $332 = $1;
    $333 = (($332|0) % 16)&-1;
    $334 = $333<<4;
    $335 = (($331) + ($334))|0;
    $336 = $y_tex;
    $337 = (($336|0) % 16)&-1;
    $338 = $1;
    $339 = (($338|0) / 16)&-1;
    $340 = $339<<4;
    $341 = (($337) + ($340))|0;
    __Z16get_bitmap_pixelRK6Bitmapii($color,8,$335,$341);
    $342 = ((($color)) + 3|0);
    $343 = HEAP8[$342>>0]|0;
    $344 = $343&255;
    $345 = ($344|0)<(128);
    if (!($345)) {
     $346 = $x;
     $347 = $y;
     $348 = $width;
     $349 = Math_imul($347, $348)|0;
     $350 = (($346) + ($349))|0;
     $351 = $0;
     $352 = ((($351)) + 4|0);
     $353 = ((($352)) + 12|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = (($354) + ($350<<2)|0);
     ;HEAP32[$355>>2]=HEAP32[$color>>2]|0;
     $356 = $depth;
     $357 = $x;
     $358 = $y;
     $359 = $width;
     $360 = Math_imul($358, $359)|0;
     $361 = (($357) + ($360))|0;
     $362 = $0;
     $363 = ((($362)) + 4|0);
     $364 = ((($363)) + 20|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($365) + ($361<<2)|0);
     HEAPF32[$366>>2] = $356;
    }
   }
   $367 = $y;
   $368 = (($367) + 1)|0;
   $y = $368;
  }
  $369 = $x;
  $370 = (($369) + 1)|0;
  $x = $370;
 }
 STACKTOP = sp;return;
}
function __Z9render_uiR4Game($game) {
 $game = $game|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0;
 var $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0;
 var $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0.0, $296 = 0, $297 = 0, $298 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $hp = 0, $mana = 0, $spell_color = 0, $spell_name = 0, $ss = 0.0, $vararg_buffer = 0, $xx = 0, $xx0 = 0, $xx01 = 0, $xx1 = 0, $xx12 = 0, $xx2 = 0, $xx3 = 0, $xx4 = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy21 = sp + 560|0;
 $$byval_copy20 = sp + 544|0;
 $$byval_copy19 = sp + 536|0;
 $$byval_copy18 = sp + 520|0;
 $$byval_copy17 = sp + 512|0;
 $$byval_copy16 = sp + 496|0;
 $$byval_copy15 = sp + 488|0;
 $$byval_copy14 = sp + 472|0;
 $$byval_copy13 = sp + 464|0;
 $$byval_copy12 = sp + 448|0;
 $$byval_copy11 = sp + 440|0;
 $$byval_copy10 = sp + 424|0;
 $$byval_copy9 = sp + 416|0;
 $$byval_copy8 = sp + 400|0;
 $$byval_copy7 = sp + 392|0;
 $$byval_copy6 = sp + 384|0;
 $$byval_copy5 = sp + 380|0;
 $$byval_copy4 = sp + 376|0;
 $$byval_copy3 = sp + 372|0;
 $$byval_copy2 = sp + 368|0;
 $$byval_copy1 = sp + 364|0;
 $$byval_copy = sp + 360|0;
 $vararg_buffer = sp;
 $1 = sp + 344|0;
 $2 = sp + 340|0;
 $3 = sp + 328|0;
 $4 = sp + 324|0;
 $5 = sp + 312|0;
 $6 = sp + 308|0;
 $7 = sp + 296|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 108|0;
 $11 = sp + 96|0;
 $12 = sp + 92|0;
 $13 = sp + 80|0;
 $14 = sp + 72|0;
 $15 = sp + 32|0;
 $16 = sp + 8|0;
 $17 = sp + 24|0;
 $18 = sp + 56|0;
 $19 = sp + 128|0;
 $20 = sp + 136|0;
 $21 = sp + 152|0;
 $22 = sp + 160|0;
 $23 = sp + 176|0;
 $24 = sp + 184|0;
 $25 = sp + 200|0;
 $26 = sp + 208|0;
 $27 = sp + 224|0;
 $28 = sp + 232|0;
 $spell_color = sp + 252|0;
 $29 = sp + 256|0;
 $30 = sp + 260|0;
 $31 = sp + 264|0;
 $32 = sp + 280|0;
 $33 = sp + 288|0;
 $0 = $game;
 $34 = $0;
 $35 = ((($34)) + 28|0);
 $36 = ((($35)) + 40|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $37 <= 0.0;
 $39 = $0;
 if ($38) {
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) - 138)|0;
  $43 = (($42|0) / 2)&-1;
  $xx0 = $43;
  $44 = $0;
  $45 = $xx0;
  $46 = (+($45|0));
  HEAPF32[$1>>2] = $46;
  $47 = ((($1)) + 4|0);
  HEAPF32[$47>>2] = 30.0;
  ;HEAP32[$2>>2]=HEAP32[184>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  __Z11render_textR4GamePKcRK7Vector25Color($44,632,$1,$$byval_copy);
  $48 = $0;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) - 120)|0;
  $52 = (($51|0) / 2)&-1;
  $xx1 = $52;
  $53 = $0;
  $54 = $xx1;
  $55 = (+($54|0));
  HEAPF32[$3>>2] = $55;
  $56 = ((($3)) + 4|0);
  HEAPF32[$56>>2] = 60.0;
  ;HEAP32[$4>>2]=HEAP32[184>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;
  __Z11render_textR4GamePKcRK7Vector25Color($53,656,$3,$$byval_copy1);
  STACKTOP = sp;return;
 }
 $57 = ((($39)) + 3472|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0);
 $60 = $0;
 if ($59) {
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) - 144)|0;
  $64 = (($63|0) / 2)&-1;
  $xx01 = $64;
  $65 = $0;
  $66 = $xx01;
  $67 = (+($66|0));
  HEAPF32[$5>>2] = $67;
  $68 = ((($5)) + 4|0);
  HEAPF32[$68>>2] = 10.0;
  ;HEAP32[$6>>2]=HEAP32[184>>2]|0;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$6>>2]|0;
  __Z11render_textR4GamePKcRK7Vector25Color($65,680,$5,$$byval_copy2);
  $69 = $0;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) - 72)|0;
  $73 = (($72|0) / 2)&-1;
  $xx12 = $73;
  $74 = $0;
  $75 = $xx12;
  $76 = (+($75|0));
  HEAPF32[$7>>2] = $76;
  $77 = ((($7)) + 4|0);
  HEAPF32[$77>>2] = 19.0;
  ;HEAP32[$8>>2]=HEAP32[184>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$8>>2]|0;
  __Z11render_textR4GamePKcRK7Vector25Color($74,712,$7,$$byval_copy3);
  $78 = $0;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) - 114)|0;
  $82 = (($81|0) / 2)&-1;
  $xx2 = $82;
  $83 = $0;
  $84 = $xx2;
  $85 = (+($84|0));
  HEAPF32[$9>>2] = $85;
  $86 = ((($9)) + 4|0);
  HEAPF32[$86>>2] = 40.0;
  ;HEAP32[$10>>2]=HEAP32[184>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$10>>2]|0;
  __Z11render_textR4GamePKcRK7Vector25Color($83,728,$9,$$byval_copy4);
  $87 = $0;
  $88 = ((($87)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) - 156)|0;
  $91 = (($90|0) / 2)&-1;
  $xx3 = $91;
  $92 = $0;
  $93 = $xx3;
  $94 = (+($93|0));
  HEAPF32[$11>>2] = $94;
  $95 = ((($11)) + 4|0);
  HEAPF32[$95>>2] = 49.0;
  ;HEAP32[$12>>2]=HEAP32[184>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$12>>2]|0;
  __Z11render_textR4GamePKcRK7Vector25Color($92,752,$11,$$byval_copy5);
  $96 = $0;
  $97 = ((($96)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) - 132)|0;
  $100 = (($99|0) / 2)&-1;
  $xx4 = $100;
  $101 = $0;
  $102 = $xx4;
  $103 = (+($102|0));
  HEAPF32[$13>>2] = $103;
  $104 = ((($13)) + 4|0);
  HEAPF32[$104>>2] = 58.0;
  ;HEAP32[$14>>2]=HEAP32[184>>2]|0;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$14>>2]|0;
  __Z11render_textR4GamePKcRK7Vector25Color($101,784,$13,$$byval_copy6);
  STACKTOP = sp;return;
 }
 $105 = ((($60)) + 3488|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (+($106>>>0));
 $108 = $107 / 400.0;
 $109 = (+Math_sin((+$108)));
 $ss = $109;
 $110 = $0;
 $111 = ((($110)) + 28|0);
 $112 = ((($111)) + 40|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $0;
 $115 = ((($114)) + 28|0);
 $116 = ((($115)) + 44|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $113 / $117;
 $119 = 1.0 - $118;
 $120 = $119 * 17.0;
 $121 = (~~(($120)));
 $hp = $121;
 $122 = $0;
 $123 = ((($122)) + 28|0);
 $124 = ((($123)) + 48|0);
 $125 = +HEAPF32[$124>>2];
 $126 = $0;
 $127 = ((($126)) + 28|0);
 $128 = ((($127)) + 52|0);
 $129 = +HEAPF32[$128>>2];
 $130 = $125 / $129;
 $131 = 1.0 - $130;
 $132 = $131 * 17.0;
 $133 = (~~(($132)));
 $mana = $133;
 $134 = $0;
 $135 = ((($134)) + 4|0);
 HEAPF32[$15>>2] = 40.0;
 $136 = ((($15)) + 4|0);
 $137 = $hp;
 $138 = (74 + ($137))|0;
 $139 = (+($138|0));
 HEAPF32[$136>>2] = $139;
 HEAPF32[$16>>2] = 0.0;
 $140 = ((($16)) + 4|0);
 $141 = $hp;
 $142 = (240 + ($141))|0;
 $143 = (+($142|0));
 HEAPF32[$140>>2] = $143;
 $144 = ((($16)) + 8|0);
 HEAPF32[$144>>2] = 16.0;
 $145 = ((($16)) + 12|0);
 $146 = $hp;
 $147 = (16 - ($146))|0;
 $148 = (+($147|0));
 HEAPF32[$145>>2] = $148;
 ;HEAP32[$$byval_copy7>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$15+4>>2]|0;
 ;HEAP32[$$byval_copy8>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$16+12>>2]|0;
 __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($135,24,$$byval_copy7,$$byval_copy8);
 $149 = $0;
 $150 = ((($149)) + 4|0);
 HEAPF32[$17>>2] = 103.0;
 $151 = ((($17)) + 4|0);
 $152 = $mana;
 $153 = (74 + ($152))|0;
 $154 = (+($153|0));
 HEAPF32[$151>>2] = $154;
 HEAPF32[$18>>2] = 16.0;
 $155 = ((($18)) + 4|0);
 $156 = $mana;
 $157 = (240 + ($156))|0;
 $158 = (+($157|0));
 HEAPF32[$155>>2] = $158;
 $159 = ((($18)) + 8|0);
 HEAPF32[$159>>2] = 16.0;
 $160 = ((($18)) + 12|0);
 $161 = $mana;
 $162 = (16 + ($161))|0;
 $163 = (+($162|0));
 HEAPF32[$160>>2] = $163;
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP32[$$byval_copy10>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$18+12>>2]|0;
 __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($150,24,$$byval_copy9,$$byval_copy10);
 $164 = $0;
 $165 = ((($164)) + 4|0);
 HEAPF32[$19>>2] = 35.0;
 $166 = ((($19)) + 4|0);
 HEAPF32[$166>>2] = 77.0;
 HEAPF32[$20>>2] = 60.0;
 $167 = ((($20)) + 4|0);
 HEAPF32[$167>>2] = 243.0;
 $168 = ((($20)) + 8|0);
 HEAPF32[$168>>2] = 89.0;
 $169 = ((($20)) + 12|0);
 HEAPF32[$169>>2] = 13.0;
 ;HEAP32[$$byval_copy11>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$19+4>>2]|0;
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$20+12>>2]|0;
 __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($165,24,$$byval_copy11,$$byval_copy12);
 $170 = $0;
 $171 = ((($170)) + 28|0);
 $172 = ((($171)) + 56|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ($173|0)>=(1);
 if ($174) {
  $175 = $0;
  $176 = ((($175)) + 4|0);
  HEAPF32[$21>>2] = 57.0;
  $177 = ((($21)) + 4|0);
  HEAPF32[$177>>2] = 80.0;
  HEAPF32[$22>>2] = 0.0;
  $178 = ((($22)) + 4|0);
  $179 = $0;
  $180 = ((($179)) + 28|0);
  $181 = ((($180)) + 60|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ($182|0)==(1);
  $184 = $183 ? 16 : 0;
  $185 = (192 + ($184))|0;
  $186 = (+($185|0));
  HEAPF32[$178>>2] = $186;
  $187 = ((($22)) + 8|0);
  HEAPF32[$187>>2] = 8.0;
  $188 = ((($22)) + 12|0);
  HEAPF32[$188>>2] = 8.0;
  ;HEAP32[$$byval_copy13>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$21+4>>2]|0;
  ;HEAP32[$$byval_copy14>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy14+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy14+12>>2]=HEAP32[$22+12>>2]|0;
  __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($176,24,$$byval_copy13,$$byval_copy14);
 }
 $189 = $0;
 $190 = ((($189)) + 28|0);
 $191 = ((($190)) + 56|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = ($192|0)>=(2);
 if ($193) {
  $194 = $0;
  $195 = ((($194)) + 4|0);
  HEAPF32[$23>>2] = 69.0;
  $196 = ((($23)) + 4|0);
  HEAPF32[$196>>2] = 80.0;
  HEAPF32[$24>>2] = 16.0;
  $197 = ((($24)) + 4|0);
  $198 = $0;
  $199 = ((($198)) + 28|0);
  $200 = ((($199)) + 60|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)==(2);
  $203 = $202 ? 16 : 0;
  $204 = (192 + ($203))|0;
  $205 = (+($204|0));
  HEAPF32[$197>>2] = $205;
  $206 = ((($24)) + 8|0);
  HEAPF32[$206>>2] = 8.0;
  $207 = ((($24)) + 12|0);
  HEAPF32[$207>>2] = 8.0;
  ;HEAP32[$$byval_copy15>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$23+4>>2]|0;
  ;HEAP32[$$byval_copy16>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy16+12>>2]=HEAP32[$24+12>>2]|0;
  __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($195,24,$$byval_copy15,$$byval_copy16);
 }
 $208 = $0;
 $209 = ((($208)) + 28|0);
 $210 = ((($209)) + 56|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = ($211|0)>=(3);
 if ($212) {
  $213 = $0;
  $214 = ((($213)) + 4|0);
  HEAPF32[$25>>2] = 81.0;
  $215 = ((($25)) + 4|0);
  HEAPF32[$215>>2] = 80.0;
  HEAPF32[$26>>2] = 32.0;
  $216 = ((($26)) + 4|0);
  $217 = $0;
  $218 = ((($217)) + 28|0);
  $219 = ((($218)) + 60|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = ($220|0)==(3);
  $222 = $221 ? 16 : 0;
  $223 = (192 + ($222))|0;
  $224 = (+($223|0));
  HEAPF32[$216>>2] = $224;
  $225 = ((($26)) + 8|0);
  HEAPF32[$225>>2] = 8.0;
  $226 = ((($26)) + 12|0);
  HEAPF32[$226>>2] = 8.0;
  ;HEAP32[$$byval_copy17>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy17+4>>2]=HEAP32[$25+4>>2]|0;
  ;HEAP32[$$byval_copy18>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[$26+12>>2]|0;
  __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($214,24,$$byval_copy17,$$byval_copy18);
 }
 $227 = $0;
 $228 = ((($227)) + 28|0);
 $229 = ((($228)) + 56|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = ($230|0)>=(4);
 if ($231) {
  $232 = $0;
  $233 = ((($232)) + 4|0);
  HEAPF32[$27>>2] = 93.0;
  $234 = ((($27)) + 4|0);
  HEAPF32[$234>>2] = 80.0;
  HEAPF32[$28>>2] = 48.0;
  $235 = ((($28)) + 4|0);
  $236 = $0;
  $237 = ((($236)) + 28|0);
  $238 = ((($237)) + 60|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = ($239|0)==(4);
  $241 = $240 ? 16 : 0;
  $242 = (192 + ($241))|0;
  $243 = (+($242|0));
  HEAPF32[$235>>2] = $243;
  $244 = ((($28)) + 8|0);
  HEAPF32[$244>>2] = 8.0;
  $245 = ((($28)) + 12|0);
  HEAPF32[$245>>2] = 8.0;
  ;HEAP32[$$byval_copy19>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$27+4>>2]|0;
  ;HEAP32[$$byval_copy20>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy20+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy20+12>>2]=HEAP32[$28+12>>2]|0;
  __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($233,24,$$byval_copy19,$$byval_copy20);
 }
 $246 = $0;
 $247 = ((($246)) + 28|0);
 $248 = ((($247)) + 72|0);
 $249 = +HEAPF32[$248>>2];
 $250 = $249 > 0.0;
 if (!($250)) {
  STACKTOP = sp;return;
 }
 $spell_name = 808;
 ;HEAP32[$spell_color>>2]=HEAP32[824>>2]|0;
 $251 = $0;
 $252 = ((($251)) + 28|0);
 $253 = ((($252)) + 56|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($254|0)==(2);
 do {
  if ($255) {
   $spell_name = 832;
   HEAP8[$29>>0] = 0;
   $256 = ((($29)) + 1|0);
   HEAP8[$256>>0] = -56;
   $257 = ((($29)) + 2|0);
   HEAP8[$257>>0] = 50;
   $258 = ((($29)) + 3|0);
   HEAP8[$258>>0] = -1;
   ;HEAP32[$spell_color>>2]=HEAP32[$29>>2]|0;
  } else {
   $259 = $0;
   $260 = ((($259)) + 28|0);
   $261 = ((($260)) + 56|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = ($262|0)==(3);
   if ($263) {
    $spell_name = 848;
    HEAP8[$30>>0] = 0;
    $264 = ((($30)) + 1|0);
    HEAP8[$264>>0] = 20;
    $265 = ((($30)) + 2|0);
    HEAP8[$265>>0] = -56;
    $266 = ((($30)) + 3|0);
    HEAP8[$266>>0] = -1;
    ;HEAP32[$spell_color>>2]=HEAP32[$30>>2]|0;
    break;
   }
   $267 = $0;
   $268 = ((($267)) + 28|0);
   $269 = ((($268)) + 56|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = ($270|0)==(4);
   if ($271) {
    $spell_name = 864;
    HEAP8[$31>>0] = -18;
    $272 = ((($31)) + 1|0);
    HEAP8[$272>>0] = -18;
    $273 = ((($31)) + 2|0);
    HEAP8[$273>>0] = -18;
    $274 = ((($31)) + 3|0);
    HEAP8[$274>>0] = -1;
    ;HEAP32[$spell_color>>2]=HEAP32[$31>>2]|0;
   }
  }
 } while(0);
 $275 = $spell_name;
 HEAP32[$vararg_buffer>>2] = $275;
 (_snprintf(880,256,1136,$vararg_buffer)|0);
 $276 = $0;
 $277 = ((($276)) + 4|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $spell_name;
 $280 = (_strlen(($279|0))|0);
 $281 = (11 + ($280))|0;
 $282 = ($281*6)|0;
 $283 = (($278) - ($282))|0;
 $xx = $283;
 $284 = $xx;
 $285 = (($284|0) / 2)&-1;
 $xx = $285;
 $286 = $0;
 $287 = ((($286)) + 4|0);
 $288 = ((($287)) + 4|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (($289) - 8)|0;
 $yy = $290;
 $291 = $yy;
 $292 = (($291|0) / 3)&-1;
 $yy = $292;
 $293 = $0;
 $294 = $xx;
 $295 = (+($294|0));
 HEAPF32[$32>>2] = $295;
 $296 = ((($32)) + 4|0);
 $297 = $yy;
 $298 = (+($297|0));
 HEAPF32[$296>>2] = $298;
 ;HEAP32[$33>>2]=HEAP32[$spell_color>>2]|0;
 ;HEAP32[$$byval_copy21>>2]=HEAP32[$33>>2]|0;
 __Z11render_textR4GamePKcRK7Vector25Color($293,880,$32,$$byval_copy21);
 STACKTOP = sp;return;
}
function __Z11render_textR4GamePKcRK7Vector25Color($game,$str,$position,$color) {
 $game = $game|0;
 $str = $str|0;
 $position = $position|0;
 $color = $color|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ch = 0, $i = 0, $length = 0, $pixel = 0, $x = 0, $xx = 0, $y = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $pixel = sp;
 $3 = sp + 20|0;
 $0 = $game;
 $1 = $str;
 $2 = $position;
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $length = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $length;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $1;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = (__Z14get_char_indexc($12)|0);
  $ch = $13;
  $14 = $ch;
  $15 = ($14|0)<(0);
  L4: do {
   if (!($15)) {
    $16 = $ch;
    $17 = (($16|0) % 26)&-1;
    $xx = $17;
    $18 = $ch;
    $19 = (($18|0) / 26)&-1;
    $yy = $19;
    $y = 0;
    while(1) {
     $20 = $y;
     $21 = ($20|0)<(8);
     if (!($21)) {
      break L4;
     }
     $x = 0;
     while(1) {
      $22 = $x;
      $23 = ($22|0)<(5);
      if (!($23)) {
       break;
      }
      $24 = $xx;
      $25 = ($24*6)|0;
      $26 = $x;
      $27 = (($25) + ($26))|0;
      $28 = $yy;
      $29 = $28<<3;
      $30 = $y;
      $31 = (($29) + ($30))|0;
      __Z16get_bitmap_pixelRK6Bitmapii($pixel,56,$27,$31);
      $32 = HEAP32[$pixel>>2]|0;
      $33 = HEAP32[184>>2]|0;
      $34 = ($32|0)!=($33|0);
      if (!($34)) {
       $35 = $0;
       $36 = ((($35)) + 4|0);
       ;HEAP32[$3>>2]=HEAP32[$color>>2]|0;
       $37 = $x;
       $38 = (+($37|0));
       $39 = $2;
       $40 = +HEAPF32[$39>>2];
       $41 = $38 + $40;
       $42 = $i;
       $43 = ($42*6)|0;
       $44 = (+($43|0));
       $45 = $41 + $44;
       $46 = (~~(($45)));
       $47 = $y;
       $48 = (+($47|0));
       $49 = $2;
       $50 = ((($49)) + 4|0);
       $51 = +HEAPF32[$50>>2];
       $52 = $48 + $51;
       $53 = (~~(($52)));
       ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
       __Z16set_bitmap_pixelR6Bitmap5Colorii($36,$$byval_copy,$46,$53);
      }
      $54 = $x;
      $55 = (($54) + 1)|0;
      $x = $55;
     }
     $56 = $y;
     $57 = (($56) + 1)|0;
     $y = $57;
    }
   }
  } while(0);
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 STACKTOP = sp;return;
}
function __Z13apply_post_fxR11Framebufferf($display,$fog_strength) {
 $display = $display|0;
 $fog_strength = +$fog_strength;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $DEPTH_VALUES = 0, $brightness = 0.0, $c = 0, $color = 0, $depth = 0.0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color = sp + 8|0;
 $c = sp + 24|0;
 $0 = $display;
 $1 = $fog_strength;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = Math_imul($4, $7)|0;
  $9 = ($2|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = $0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  ;HEAP32[$color>>2]=HEAP32[$14>>2]|0;
  $15 = ((($color)) + 3|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = $i;
   $20 = $0;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($19<<2)|0);
   $24 = +HEAPF32[$23>>2];
   $depth = $24;
   $DEPTH_VALUES = 32;
   $25 = $1;
   $26 = -$25;
   $27 = $depth;
   $28 = $26 / $27;
   $29 = $28;
   $30 = (+_exp2($29));
   $31 = 32.0 * $30;
   $32 = $31;
   $brightness = $32;
   $33 = $brightness;
   $34 = (+__Z5clampfff($33,0.0,32.0));
   $35 = $34 + 0.5;
   $36 = (~~(($35)));
   $37 = (+($36|0));
   $38 = $37 / 32.0;
   $brightness = $38;
   ;HEAP32[$c>>2]=HEAP32[$color>>2]|0;
   $39 = $brightness;
   $40 = HEAP8[$c>>0]|0;
   $41 = (+($40&255));
   $42 = $41 * $39;
   $43 = (~~(($42))&255);
   HEAP8[$c>>0] = $43;
   $44 = $brightness;
   $45 = ((($c)) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (+($46&255));
   $48 = $47 * $44;
   $49 = (~~(($48))&255);
   HEAP8[$45>>0] = $49;
   $50 = $brightness;
   $51 = ((($c)) + 2|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = (+($52&255));
   $54 = $53 * $50;
   $55 = (~~(($54))&255);
   HEAP8[$51>>0] = $55;
   $56 = $i;
   $57 = $0;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($56<<2)|0);
   ;HEAP32[$60>>2]=HEAP32[$c>>2]|0;
  }
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 STACKTOP = sp;return;
}
function __Z13handle_eventsR4Game($game) {
 $game = $game|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $event = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $event = sp;
 $0 = $game;
 while(1) {
  $1 = (_SDL_PollEvent(($event|0))|0);
  $2 = ($1|0)!=(0);
  if (!($2)) {
   label = 9;
   break;
  }
  $3 = HEAP32[$event>>2]|0;
  $4 = ($3|0)==(256);
  if ($4) {
   break;
  }
  $7 = HEAP32[$event>>2]|0;
  $8 = ($7|0)==(512);
  if (!($8)) {
   continue;
  }
  $9 = ((($event)) + 8|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  if ((($11|0) == 12)) {
   $14 = $0;
   $15 = ((($14)) + 3468|0);
   HEAP32[$15>>2] = 1;
   $16 = (_SDL_GetTicks()|0);
   $17 = $0;
   $18 = ((($17)) + 3496|0);
   HEAP32[$18>>2] = $16;
   $19 = $0;
   $20 = ((($19)) + 3484|0);
   HEAP32[$20>>2] = $16;
   $21 = $0;
   $22 = ((($21)) + 3500|0);
   HEAP32[$22>>2] = 0;
   continue;
  } else if ((($11|0) == 13)) {
   $12 = $0;
   $13 = ((($12)) + 3468|0);
   HEAP32[$13>>2] = 0;
   continue;
  } else {
   continue;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 3464|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _main_loop($game_ptr) {
 $game_ptr = $game_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $dt = 0.0, $game = 0, $ms = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = $game_ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  (_printf((1152|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $3 = $0;
 $game = $3;
 $4 = $game;
 __Z13handle_eventsR4Game($4);
 $5 = $game;
 $6 = ((($5)) + 3464|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  (_printf((1208|0),($vararg_buffer1|0))|0);
  _emscripten_force_exit(0);
  STACKTOP = sp;return;
 }
 $9 = $game;
 $10 = ((($9)) + 3488|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $game;
 $13 = ((($12)) + 3484|0);
 HEAP32[$13>>2] = $11;
 $14 = (_SDL_GetTicks()|0);
 $15 = $game;
 $16 = ((($15)) + 3488|0);
 HEAP32[$16>>2] = $14;
 $17 = $game;
 $18 = ((($17)) + 3488|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $game;
 $21 = ((($20)) + 3484|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19>>>0)<($22>>>0);
 if ($23) {
  $24 = $game;
  $25 = ((($24)) + 3484|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $game;
  $28 = ((($27)) + 3488|0);
  HEAP32[$28>>2] = $26;
 }
 $29 = $game;
 $30 = ((($29)) + 3488|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $game;
 $33 = ((($32)) + 3484|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($31) - ($34))|0;
 $36 = (+($35>>>0));
 $37 = 0.001 * $36;
 $38 = $game;
 $39 = ((($38)) + 3492|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $40;
 $42 = $41 + $37;
 $43 = $42;
 HEAPF32[$39>>2] = $43;
 while(1) {
  $44 = $game;
  $45 = ((($44)) + 3492|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $46 >= 0.01666666753590107;
  $48 = $game;
  if (!($47)) {
   break;
  }
  $49 = ((($48)) + 3492|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 - 0.01666666753590107;
  HEAPF32[$49>>2] = $51;
  $52 = $game;
  __Z13handle_eventsR4Game($52);
  $53 = $game;
  __ZL6updateR4Gamef($53,0.01666666753590107);
 }
 __ZL6renderR4Game($48);
 $54 = $game;
 $55 = ((($54)) + 3500|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 1)|0;
 HEAP32[$55>>2] = $57;
 $58 = $game;
 $59 = ((($58)) + 3488|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $game;
 $62 = ((($61)) + 3496|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($60) - ($63))|0;
 $65 = ($64>>>0)>=(1000);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $game;
 $67 = ((($66)) + 3488|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $game;
 $70 = ((($69)) + 3496|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($68) - ($71))|0;
 $73 = (+($72>>>0));
 $dt = $73;
 $74 = $dt;
 $75 = $game;
 $76 = ((($75)) + 3500|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (+($77>>>0));
 $79 = $74 / $78;
 $ms = $79;
 $80 = $ms;
 $81 = $80;
 HEAPF64[$vararg_buffer3>>3] = $81;
 (_snprintf(1224,8,1232,$vararg_buffer3)|0);
 $82 = $game;
 $83 = ((($82)) + 3500|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $game;
 $86 = ((($85)) + 3504|0);
 HEAP32[$86>>2] = $84;
 $87 = $game;
 $88 = ((($87)) + 3500|0);
 HEAP32[$88>>2] = 0;
 $89 = (_SDL_GetTicks()|0);
 $90 = $game;
 $91 = ((($90)) + 3496|0);
 HEAP32[$91>>2] = $89;
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $game = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 13776|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $game = sp + 16|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 _memset(($game|0),0,13752)|0;
 $3 = ((($game)) + 28|0);
 __ZN6PlayerC2Ev($3);
 $4 = ((($game)) + 104|0);
 $5 = ((($4)) + 28|0);
 $6 = ((($5)) + 3328|0);
 $8 = $5;
 while(1) {
  $7 = ((($8)) + 52|0);
  $9 = ($7|0)==($6|0);
  if ($9) {
   break;
  } else {
   $8 = $7;
  }
 }
 $10 = ((($game)) + 3512|0);
 $11 = ((($10)) + 10240|0);
 $13 = $10;
 while(1) {
  $12 = ((($13)) + 40|0);
  $14 = ($12|0)==($11|0);
  if ($14) {
   break;
  } else {
   $13 = $12;
  }
 }
 $15 = (__Z4initR4Game($game)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  _emscripten_set_main_loop_arg((20|0),($game|0),0,1);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $17 = HEAP32[_stderr>>2]|0;
  (_fprintf(($17|0),(1240|0),($vararg_buffer|0))|0);
  $0 = 1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZL11stbi__fopenPKcS0_($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filename;
 $1 = $mode;
 $2 = $0;
 $3 = $1;
 $4 = (_fopen(($2|0),($3|0))|0);
 $f = $4;
 $5 = $f;
 STACKTOP = sp;return ($5|0);
}
function __ZL9stbi__errPKc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 HEAP32[72>>2] = $1;
 STACKTOP = sp;return 0;
}
function __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $f;
 $2 = $0;
 $3 = $1;
 __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($2,5048,$3);
 STACKTOP = sp;return;
}
function __ZL15stbi__load_flipP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $col = 0, $depth = 0, $h = 0, $or$cond = 0, $result = 0;
 var $row = 0, $temp = 0, $w = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL15stbi__load_mainP13stbi__contextPiS1_S1_i($5,$6,$7,$8,$9)|0);
 $result = $10;
 $11 = HEAP32[80>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $result;
 $14 = ($13|0)!=(0|0);
 $or$cond = $12 & $14;
 if (!($or$cond)) {
  $94 = $result;
  STACKTOP = sp;return ($94|0);
 }
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $w = $16;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $h = $18;
 $19 = $4;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $4;
  $24 = $21;
 } else {
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
 }
 $depth = $24;
 $row = 0;
 while(1) {
  $25 = $row;
  $26 = $h;
  $27 = $26 >> 1;
  $28 = ($25|0)<($27|0);
  if (!($28)) {
   break;
  }
  $col = 0;
  while(1) {
   $29 = $col;
   $30 = $w;
   $31 = ($29|0)<($30|0);
   if (!($31)) {
    break;
   }
   $z = 0;
   while(1) {
    $32 = $z;
    $33 = $depth;
    $34 = ($32|0)<($33|0);
    if (!($34)) {
     break;
    }
    $35 = $row;
    $36 = $w;
    $37 = Math_imul($35, $36)|0;
    $38 = $col;
    $39 = (($37) + ($38))|0;
    $40 = $depth;
    $41 = Math_imul($39, $40)|0;
    $42 = $z;
    $43 = (($41) + ($42))|0;
    $44 = $result;
    $45 = (($44) + ($43)|0);
    $46 = HEAP8[$45>>0]|0;
    $temp = $46;
    $47 = $h;
    $48 = $row;
    $49 = (($47) - ($48))|0;
    $50 = (($49) - 1)|0;
    $51 = $w;
    $52 = Math_imul($50, $51)|0;
    $53 = $col;
    $54 = (($52) + ($53))|0;
    $55 = $depth;
    $56 = Math_imul($54, $55)|0;
    $57 = $z;
    $58 = (($56) + ($57))|0;
    $59 = $result;
    $60 = (($59) + ($58)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $row;
    $63 = $w;
    $64 = Math_imul($62, $63)|0;
    $65 = $col;
    $66 = (($64) + ($65))|0;
    $67 = $depth;
    $68 = Math_imul($66, $67)|0;
    $69 = $z;
    $70 = (($68) + ($69))|0;
    $71 = $result;
    $72 = (($71) + ($70)|0);
    HEAP8[$72>>0] = $61;
    $73 = $temp;
    $74 = $h;
    $75 = $row;
    $76 = (($74) - ($75))|0;
    $77 = (($76) - 1)|0;
    $78 = $w;
    $79 = Math_imul($77, $78)|0;
    $80 = $col;
    $81 = (($79) + ($80))|0;
    $82 = $depth;
    $83 = Math_imul($81, $82)|0;
    $84 = $z;
    $85 = (($83) + ($84))|0;
    $86 = $result;
    $87 = (($86) + ($85)|0);
    HEAP8[$87>>0] = $73;
    $88 = $z;
    $89 = (($88) + 1)|0;
    $z = $89;
   }
   $90 = $col;
   $91 = (($90) + 1)|0;
   $col = $91;
  }
  $92 = $row;
  $93 = (($92) + 1)|0;
  $row = $93;
 }
 $94 = $result;
 STACKTOP = sp;return ($94|0);
}
function __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($s,$c,$user) {
 $s = $s|0;
 $c = $c|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $c;
 $2 = $user;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = $1;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $0;
 $8 = ((($7)) + 28|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 $10 = ((($9)) + 36|0);
 HEAP32[$10>>2] = 128;
 $11 = $0;
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = 1;
 $13 = $0;
 $14 = ((($13)) + 40|0);
 $15 = $0;
 $16 = ((($15)) + 176|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 __ZL19stbi__refill_bufferP13stbi__context($17);
 STACKTOP = sp;return;
}
function __ZL14stbi__hdr_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL19stbi__hdr_test_coreP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL12stbi__mallocj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = (_malloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZL13stbi__do_zlibP10stbi__zbufPciii($a,$obuf,$olen,$exp,$parse_header) {
 $a = $a|0;
 $obuf = $obuf|0;
 $olen = $olen|0;
 $exp = $exp|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $obuf;
 $2 = $olen;
 $3 = $exp;
 $4 = $parse_header;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 20|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = $2;
 $13 = (($11) + ($12)|0);
 $14 = $0;
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = $13;
 $16 = $3;
 $17 = $0;
 $18 = ((($17)) + 28|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = $4;
 $21 = (__ZL16stbi__parse_zlibP10stbi__zbufi($19,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __Z16get_bitmap_pixelRK6Bitmapii($agg$result,$bitmap,$x,$y) {
 $agg$result = $agg$result|0;
 $bitmap = $bitmap|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bitmap;
 $1 = $x;
 $2 = $y;
 $3 = $1;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = $1;
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)>=($7|0);
  $9 = $2;
  $10 = ($9|0)<(0);
  $or$cond = $8 | $10;
  if (!($or$cond)) {
   $11 = $2;
   $12 = $0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($11|0)>=($14|0);
   if (!($15)) {
    $16 = $1;
    $17 = $2;
    $18 = $0;
    $19 = HEAP32[$18>>2]|0;
    $20 = Math_imul($17, $19)|0;
    $21 = (($16) + ($20))|0;
    $22 = $0;
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + ($21<<2)|0);
    ;HEAP32[$agg$result>>2]=HEAP32[$25>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[1416>>2]|0;
 STACKTOP = sp;return;
}
function __Z16set_bitmap_pixelR6Bitmap5Colorii($bitmap,$color,$x,$y) {
 $bitmap = $bitmap|0;
 $color = $color|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bitmap;
 $1 = $x;
 $2 = $y;
 $3 = $1;
 $4 = ($3|0)<(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)>=($7|0);
 $9 = $2;
 $10 = ($9|0)<(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)>=($14|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = $2;
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($17, $19)|0;
 $21 = (($16) + ($20))|0;
 $22 = $0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($21<<2)|0);
 ;HEAP32[$25>>2]=HEAP32[$color>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4impl7deferFnIZ21load_bitmap_from_filePKcE3__0EENS_5DeferIT_EEOS5_($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $fn;
 $2 = $1;
 $3 = (__ZNSt3__17forwardIZ21load_bitmap_from_filePKcE3__0EEOT_RNS_16remove_referenceIS4_E4typeE($2)|0);
 __ZN4impl5DeferIZ21load_bitmap_from_filePKcE3__0EC2EOS3_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4impl5DeferIZ21load_bitmap_from_filePKcE3__0ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(21,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __Zeq5ColorS_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __Zne5ColorS_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = ($0|0)!=($1|0);
 return ($2|0);
}
function __Z9sdl_errorPKc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $str;
 $1 = HEAP32[_stderr>>2]|0;
 $2 = $0;
 $3 = (_SDL_GetError()|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 (_fprintf(($1|0),(1392|0),($vararg_buffer|0))|0);
 _emscripten_force_exit(1);
 STACKTOP = sp;return;
}
function __ZL13update_playerR4Gamef($game,$dt) {
 $game = $game|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $MOVE_SPEED = 0.0, $YAW_SPEED = 0.0, $forwards = 0, $keys = 0, $player = 0;
 var $sidewards = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $forwards = sp + 24|0;
 $sidewards = sp + 32|0;
 $0 = $game;
 $1 = $dt;
 $MOVE_SPEED = 2.0;
 $YAW_SPEED = 3.0;
 $2 = $0;
 $3 = ((($2)) + 3476|0);
 $4 = HEAP32[$3>>2]|0;
 $keys = $4;
 $5 = $0;
 $6 = ((($5)) + 28|0);
 $player = $6;
 $7 = $keys;
 $8 = ((($7)) + 1104|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 if ($10) {
  $11 = $1;
  $12 = 3.0 * $11;
  $13 = $player;
  $14 = ((($13)) + 28|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $15 - $12;
  HEAPF32[$14>>2] = $16;
 }
 $17 = $keys;
 $18 = ((($17)) + 1103|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)!=(0);
 if ($20) {
  $21 = $1;
  $22 = 3.0 * $21;
  $23 = $player;
  $24 = ((($23)) + 28|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $25 + $22;
  HEAPF32[$24>>2] = $26;
 }
 $27 = $player;
 $28 = ((($27)) + 28|0);
 $29 = +HEAPF32[$28>>2];
 $30 = (+Math_sin((+$29)));
 HEAPF32[$forwards>>2] = $30;
 $31 = ((($forwards)) + 4|0);
 $32 = $player;
 $33 = ((($32)) + 28|0);
 $34 = +HEAPF32[$33>>2];
 $35 = (+Math_cos((+$34)));
 HEAPF32[$31>>2] = $35;
 $36 = $player;
 $37 = ((($36)) + 28|0);
 $38 = +HEAPF32[$37>>2];
 $39 = (+Math_cos((+$38)));
 HEAPF32[$sidewards>>2] = $39;
 $40 = ((($sidewards)) + 4|0);
 $41 = $player;
 $42 = ((($41)) + 28|0);
 $43 = +HEAPF32[$42>>2];
 $44 = (+Math_sin((+$43)));
 $45 = -$44;
 HEAPF32[$40>>2] = $45;
 $46 = $keys;
 $47 = ((($46)) + 1106|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ($48<<24>>24)!=(0);
 if ($49) {
  $50 = +HEAPF32[$forwards>>2];
  $51 = 2.0 * $50;
  $52 = $1;
  $53 = $51 * $52;
  $54 = $player;
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = +HEAPF32[$56>>2];
  $58 = $57 + $53;
  HEAPF32[$56>>2] = $58;
  $59 = ((($forwards)) + 4|0);
  $60 = +HEAPF32[$59>>2];
  $61 = 2.0 * $60;
  $62 = $1;
  $63 = $61 * $62;
  $64 = $player;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = +HEAPF32[$66>>2];
  $68 = $67 + $63;
  HEAPF32[$66>>2] = $68;
  $69 = $player;
  $70 = ((($69)) + 36|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
 }
 $73 = $keys;
 $74 = ((($73)) + 1105|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = ($75<<24>>24)!=(0);
 if ($76) {
  $77 = +HEAPF32[$forwards>>2];
  $78 = 2.0 * $77;
  $79 = $1;
  $80 = $78 * $79;
  $81 = $player;
  $82 = ((($81)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = +HEAPF32[$83>>2];
  $85 = $84 - $80;
  HEAPF32[$83>>2] = $85;
  $86 = ((($forwards)) + 4|0);
  $87 = +HEAPF32[$86>>2];
  $88 = 2.0 * $87;
  $89 = $1;
  $90 = $88 * $89;
  $91 = $player;
  $92 = ((($91)) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = +HEAPF32[$93>>2];
  $95 = $94 - $90;
  HEAPF32[$93>>2] = $95;
  $96 = $player;
  $97 = ((($96)) + 36|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) - 1)|0;
  HEAP32[$97>>2] = $99;
 }
 $100 = $player;
 $101 = ((($100)) + 36|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (+($102|0));
 $104 = $103 / 8.0;
 $105 = (+Math_sin((+$104)));
 $106 = (+__Z3absf($105));
 $107 = 0.019999999552965164 * $106;
 $108 = $107;
 $109 = 0.090000001490116124 + $108;
 $110 = $109;
 $111 = $player;
 $112 = ((($111)) + 20|0);
 $113 = HEAP32[$112>>2]|0;
 HEAPF32[$113>>2] = $110;
 $114 = $1;
 $115 = 1.0 * $114;
 $116 = $player;
 $117 = ((($116)) + 40|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $118 + $115;
 HEAPF32[$117>>2] = $119;
 $120 = $1;
 $121 = 1.0 * $120;
 $122 = $player;
 $123 = ((($122)) + 48|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $124 + $121;
 HEAPF32[$123>>2] = $125;
 $126 = $1;
 $127 = $player;
 $128 = ((($127)) + 72|0);
 $129 = +HEAPF32[$128>>2];
 $130 = $129 - $126;
 HEAPF32[$128>>2] = $130;
 $131 = $player;
 $132 = ((($131)) + 40|0);
 $133 = +HEAPF32[$132>>2];
 $134 = $player;
 $135 = ((($134)) + 44|0);
 $136 = +HEAPF32[$135>>2];
 $137 = (+__Z5clampfff($133,0.0,$136));
 $138 = $player;
 $139 = ((($138)) + 40|0);
 HEAPF32[$139>>2] = $137;
 $140 = $player;
 $141 = ((($140)) + 48|0);
 $142 = +HEAPF32[$141>>2];
 $143 = $player;
 $144 = ((($143)) + 52|0);
 $145 = +HEAPF32[$144>>2];
 $146 = (+__Z5clampfff($142,0.0,$145));
 $147 = $player;
 $148 = ((($147)) + 48|0);
 HEAPF32[$148>>2] = $146;
 $149 = $player;
 $150 = ((($149)) + 72|0);
 $151 = +HEAPF32[$150>>2];
 $152 = $151 < 0.0;
 if (!($152)) {
  STACKTOP = sp;return;
 }
 $153 = $player;
 $154 = ((($153)) + 72|0);
 HEAPF32[$154>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZL13update_spellsR4Gamef($game,$dt) {
 $game = $game|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $affect = 0.0, $cos_theta = 0.0, $distance = 0.0, $dpos = 0, $e = 0, $forwards = 0, $health_usage = 0.0, $i = 0, $keys = 0, $level = 0;
 var $mana_usage = 0.0, $or$cond = 0, $p = 0, $player = 0, $pos = 0, $sidewards = 0, $tex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $forwards = sp + 256|0;
 $sidewards = sp + 248|0;
 $pos = sp + 224|0;
 $2 = sp + 216|0;
 $3 = sp + 208|0;
 $p = sp + 160|0;
 $4 = sp + 152|0;
 $5 = sp + 144|0;
 $6 = sp + 136|0;
 $dpos = sp;
 $7 = sp + 24|0;
 $8 = sp + 32|0;
 $9 = sp + 40|0;
 $10 = sp + 56|0;
 $11 = sp + 64|0;
 $12 = sp + 72|0;
 $13 = sp + 80|0;
 $14 = sp + 88|0;
 $15 = sp + 96|0;
 $16 = sp + 104|0;
 $17 = sp + 112|0;
 $18 = sp + 120|0;
 $0 = $game;
 $1 = $dt;
 $19 = $0;
 $20 = ((($19)) + 3476|0);
 $21 = HEAP32[$20>>2]|0;
 $keys = $21;
 $22 = $0;
 $23 = ((($22)) + 28|0);
 $player = $23;
 $24 = $0;
 $25 = ((($24)) + 3460|0);
 $26 = HEAP32[$25>>2]|0;
 $level = $26;
 $27 = $player;
 $28 = ((($27)) + 28|0);
 $29 = +HEAPF32[$28>>2];
 $30 = (+Math_sin((+$29)));
 HEAPF32[$forwards>>2] = $30;
 $31 = ((($forwards)) + 4|0);
 $32 = $player;
 $33 = ((($32)) + 28|0);
 $34 = +HEAPF32[$33>>2];
 $35 = (+Math_cos((+$34)));
 HEAPF32[$31>>2] = $35;
 $36 = $player;
 $37 = ((($36)) + 28|0);
 $38 = +HEAPF32[$37>>2];
 $39 = (+Math_cos((+$38)));
 HEAPF32[$sidewards>>2] = $39;
 $40 = ((($sidewards)) + 4|0);
 $41 = $player;
 $42 = ((($41)) + 28|0);
 $43 = +HEAPF32[$42>>2];
 $44 = (+Math_sin((+$43)));
 $45 = -$44;
 HEAPF32[$40>>2] = $45;
 $46 = $1;
 $47 = $player;
 $48 = ((($47)) + 68|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $49 - $46;
 HEAPF32[$48>>2] = $50;
 $51 = $keys;
 $52 = ((($51)) + 49|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = ($53<<24>>24)!=(0);
 if ($54) {
  $55 = $player;
  $56 = ((($55)) + 56|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)>=(1);
  if ($58) {
   $59 = $player;
   $60 = ((($59)) + 60|0);
   HEAP32[$60>>2] = 1;
  }
 }
 $61 = $keys;
 $62 = ((($61)) + 50|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = ($63<<24>>24)!=(0);
 if ($64) {
  $65 = $player;
  $66 = ((($65)) + 56|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)>=(2);
  if ($68) {
   $69 = $player;
   $70 = ((($69)) + 60|0);
   HEAP32[$70>>2] = 2;
  }
 }
 $71 = $keys;
 $72 = ((($71)) + 51|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = ($73<<24>>24)!=(0);
 if ($74) {
  $75 = $player;
  $76 = ((($75)) + 56|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)>=(3);
  if ($78) {
   $79 = $player;
   $80 = ((($79)) + 60|0);
   HEAP32[$80>>2] = 3;
  }
 }
 $81 = $keys;
 $82 = ((($81)) + 52|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = ($83<<24>>24)!=(0);
 if ($84) {
  $85 = $player;
  $86 = ((($85)) + 56|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)>=(4);
  if ($88) {
   $89 = $player;
   $90 = ((($89)) + 60|0);
   HEAP32[$90>>2] = 4;
  }
 }
 $91 = $player;
 $92 = ((($91)) + 64|0);
 HEAP32[$92>>2] = 0;
 $93 = $keys;
 $94 = ((($93)) + 32|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)!=(0);
 if ($96) {
  $health_usage = 0.0;
  $mana_usage = 0.0;
  $97 = $player;
  $98 = ((($97)) + 60|0);
  $99 = HEAP32[$98>>2]|0;
  if ((($99|0) == 1)) {
   $health_usage = 1.5;
   $mana_usage = 5.0;
  } else if ((($99|0) == 3)) {
   $health_usage = 0.5;
   $mana_usage = 7.0;
  } else if ((($99|0) == 4)) {
   $health_usage = 0.5;
   $mana_usage = 7.0;
  } else if ((($99|0) == 2)) {
   $health_usage = 0.5;
   $mana_usage = 8.0;
  }
  $100 = $player;
  $101 = ((($100)) + 48|0);
  $102 = +HEAPF32[$101>>2];
  $103 = $mana_usage;
  $104 = $1;
  $105 = $103 * $104;
  $106 = $105 * 10.0;
  $107 = $102 >= $106;
  $108 = $mana_usage;
  $109 = $108 > 0.0;
  $or$cond = $107 & $109;
  if ($or$cond) {
   $110 = $player;
   $111 = ((($110)) + 68|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $112 <= 0.0;
   if ($113) {
    $114 = $player;
    ;HEAP32[$pos>>2]=HEAP32[$114>>2]|0;HEAP32[$pos+4>>2]=HEAP32[$114+4>>2]|0;HEAP32[$pos+8>>2]=HEAP32[$114+8>>2]|0;
    $115 = $1;
    __ZmlRK7Vector2f($2,$forwards,$115);
    (__ZpLR7Vector2RKS_($pos,$2)|0);
    __ZmlfRK7Vector2($3,0.10000000149011612,$sidewards);
    (__ZpLR7Vector2RKS_($pos,$3)|0);
    $116 = ((($pos)) + 8|0);
    HEAPF32[$116>>2] = 0.10000000149011612;
    $117 = $player;
    $118 = ((($117)) + 60|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) - 1)|0;
    $121 = $120<<4;
    $tex = $121;
    $122 = (_rand()|0);
    $123 = $122 & 7;
    $124 = $tex;
    $125 = (($124) + ($123))|0;
    $tex = $125;
    $126 = $tex;
    __ZL21create_smoke_particleiRK7Vector3($p,$126,$pos);
    $127 = ((($p)) + 12|0);
    __ZmlfRK7Vector2($4,3.0,$forwards);
    (__ZpLR7Vector2RKS_($127,$4)|0);
    $128 = $0;
    __Z12add_particleR4GameRK8Particle($128,$p);
    $129 = $health_usage;
    $130 = $1;
    $131 = $129 * $130;
    $132 = $player;
    $133 = ((($132)) + 40|0);
    $134 = +HEAPF32[$133>>2];
    $135 = $134 - $131;
    HEAPF32[$133>>2] = $135;
    $136 = $mana_usage;
    $137 = $1;
    $138 = $136 * $137;
    $139 = $player;
    $140 = ((($139)) + 48|0);
    $141 = +HEAPF32[$140>>2];
    $142 = $141 - $138;
    HEAPF32[$140>>2] = $142;
    $143 = $player;
    $144 = ((($143)) + 64|0);
    HEAP32[$144>>2] = 1;
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
  if ((label|0) == 22) {
   $145 = $player;
   $146 = ((($145)) + 64|0);
   HEAP32[$146>>2] = 0;
  }
  $147 = $player;
  $148 = ((($147)) + 48|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $149 <= 0.0;
  if ($150) {
   $151 = $player;
   $152 = ((($151)) + 68|0);
   HEAPF32[$152>>2] = 3.0;
  }
 }
 $153 = $player;
 $154 = ((($153)) + 64|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0);
 if (!($156)) {
  STACKTOP = sp;return;
 }
 $157 = $player;
 __ZmlfRK7Vector2($6,0.5,$forwards);
 $158 = $1;
 __ZmlRK7Vector2f($5,$6,$158);
 (__ZmIR7Vector2RKS_($157,$5)|0);
 $i = 0;
 while(1) {
  $159 = $i;
  $160 = $level;
  $161 = ((($160)) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($159|0)<($162|0);
  if (!($163)) {
   break;
  }
  $164 = $i;
  $165 = $level;
  $166 = ((($165)) + 28|0);
  $167 = (($166) + (($164*52)|0)|0);
  $e = $167;
  $168 = $e;
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 & 2;
  $171 = ($170|0)!=(0);
  if ($171) {
   $172 = $e;
   $173 = ((($172)) + 8|0);
   $174 = $player;
   __ZmiRK7Vector2S1_($dpos,$173,$174);
   $175 = (+__Z6lengthRK7Vector2($dpos));
   $distance = $175;
   $176 = $distance;
   $177 = $176 > 6.0;
   if (!($177)) {
    $178 = (+__Z3dotRK7Vector2S1_($dpos,$forwards));
    $cos_theta = $178;
    $179 = $cos_theta;
    $180 = $distance;
    $181 = $distance;
    $182 = $180 * $181;
    $183 = $182 + 1.0;
    $184 = $179 / $183;
    $affect = $184;
    $185 = $player;
    $186 = ((($185)) + 60|0);
    $187 = HEAP32[$186>>2]|0;
    if ((($187|0) == 2)) {
     $200 = $e;
     $201 = ((($200)) + 8|0);
     __ZmlfRK7Vector2($12,5.0,$forwards);
     $202 = $affect;
     __ZmlRK7Vector2f($11,$12,$202);
     $203 = $1;
     __ZmlRK7Vector2f($10,$11,$203);
     (__ZpLR7Vector2RKS_($201,$10)|0);
     $204 = $affect;
     $205 = 5.0 * $204;
     $206 = $1;
     $207 = $205 * $206;
     $208 = $e;
     $209 = ((($208)) + 28|0);
     $210 = +HEAPF32[$209>>2];
     $211 = $210 - $207;
     HEAPF32[$209>>2] = $211;
     $212 = $e;
     $213 = ((($212)) + 44|0);
     $214 = +HEAPF32[$213>>2];
     $215 = $214 <= 0.0;
     if ($215) {
      $216 = $e;
      $217 = ((($216)) + 44|0);
      HEAPF32[$217>>2] = 2.0;
     }
    } else if ((($187|0) == 3)) {
     $218 = $e;
     $219 = ((($218)) + 8|0);
     __ZmlfRK7Vector2($15,8.0,$forwards);
     $220 = $affect;
     __ZmlRK7Vector2f($14,$15,$220);
     $221 = $1;
     __ZmlRK7Vector2f($13,$14,$221);
     (__ZpLR7Vector2RKS_($219,$13)|0);
     $222 = $affect;
     $223 = 7.0 * $222;
     $224 = $1;
     $225 = $223 * $224;
     $226 = $e;
     $227 = ((($226)) + 28|0);
     $228 = +HEAPF32[$227>>2];
     $229 = $228 - $225;
     HEAPF32[$227>>2] = $229;
     $230 = $e;
     $231 = ((($230)) + 48|0);
     $232 = +HEAPF32[$231>>2];
     $233 = $232 <= 0.0;
     if ($233) {
      $234 = $e;
      $235 = ((($234)) + 48|0);
      HEAPF32[$235>>2] = 3.0;
     }
    } else if ((($187|0) == 1)) {
     $188 = $e;
     $189 = ((($188)) + 8|0);
     __ZmlfRK7Vector2($9,10.0,$forwards);
     $190 = $affect;
     __ZmlRK7Vector2f($8,$9,$190);
     $191 = $1;
     __ZmlRK7Vector2f($7,$8,$191);
     (__ZpLR7Vector2RKS_($189,$7)|0);
     $192 = $affect;
     $193 = 10.0 * $192;
     $194 = $1;
     $195 = $193 * $194;
     $196 = $e;
     $197 = ((($196)) + 28|0);
     $198 = +HEAPF32[$197>>2];
     $199 = $198 - $195;
     HEAPF32[$197>>2] = $199;
    } else if ((($187|0) == 4)) {
     $236 = $e;
     $237 = ((($236)) + 8|0);
     __ZmlfRK7Vector2($18,20.0,$forwards);
     $238 = $affect;
     __ZmlRK7Vector2f($17,$18,$238);
     $239 = $1;
     __ZmlRK7Vector2f($16,$17,$239);
     (__ZpLR7Vector2RKS_($237,$16)|0);
     $240 = $affect;
     $241 = 3.0 * $240;
     $242 = $1;
     $243 = $241 * $242;
     $244 = $e;
     $245 = ((($244)) + 28|0);
     $246 = +HEAPF32[$245>>2];
     $247 = $246 - $243;
     HEAPF32[$245>>2] = $247;
    }
   }
  }
  $248 = $i;
  $249 = (($248) + 1)|0;
  $i = $249;
 }
 STACKTOP = sp;return;
}
function __ZL16update_particlesR4Gamef($game,$dt) {
 $game = $game|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $dpos = 0, $dside = 0, $e = 0, $i = 0, $i1 = 0, $i3 = 0, $level = 0, $p = 0, $p2 = 0, $p5 = 0, $p6 = 0, $p_pos = 0, $p_pos4 = 0, $player_pos = 0, $pos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 276|0;
 $player_pos = sp + 252|0;
 $dpos = sp + 232|0;
 $dside = sp + 224|0;
 $3 = sp + 48|0;
 $4 = sp;
 $p_pos = sp + 12|0;
 $5 = sp + 24|0;
 $6 = sp + 40|0;
 $7 = sp + 56|0;
 $p_pos4 = sp + 96|0;
 $8 = sp + 108|0;
 $9 = sp + 120|0;
 $p5 = sp + 128|0;
 $pos = sp + 168|0;
 $p6 = sp + 184|0;
 $0 = $game;
 $1 = $dt;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $0;
  $12 = ((($11)) + 3508|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $0;
  $17 = ((($16)) + 3512|0);
  $18 = (($17) + (($15*40)|0)|0);
  $p = $18;
  $19 = $1;
  $20 = $p;
  $21 = ((($20)) + 36|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $22 - $19;
  HEAPF32[$21>>2] = $23;
  $24 = $p;
  $25 = $p;
  $26 = ((($25)) + 12|0);
  $27 = $1;
  __ZmlRK7Vector3f($2,$26,$27);
  (__ZpLR7Vector3RKS_($24,$2)|0);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $i1 = 0;
 while(1) {
  $30 = $i1;
  $31 = $0;
  $32 = ((($31)) + 3508|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $i1;
  $36 = $0;
  $37 = ((($36)) + 3512|0);
  $38 = (($37) + (($35*40)|0)|0);
  $p2 = $38;
  $39 = $p2;
  $40 = ((($39)) + 36|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $41 <= 0.0;
  $43 = $i1;
  if ($42) {
   $44 = $0;
   $45 = ((($44)) + 3512|0);
   $46 = (($45) + (($43*40)|0)|0);
   $47 = $0;
   $48 = ((($47)) + 3508|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) - 1)|0;
   $51 = $0;
   $52 = ((($51)) + 3512|0);
   $53 = (($52) + (($50*40)|0)|0);
   dest=$46; src=$53; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $54 = $0;
   $55 = ((($54)) + 3508|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + -1)|0;
   HEAP32[$55>>2] = $57;
   continue;
  } else {
   $58 = (($43) + 1)|0;
   $i1 = $58;
   continue;
  }
 }
 $59 = $0;
 $60 = ((($59)) + 3460|0);
 $61 = HEAP32[$60>>2]|0;
 $level = $61;
 $62 = $0;
 $63 = ((($62)) + 28|0);
 $64 = ((($63)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = +HEAPF32[$65>>2];
 HEAPF32[$player_pos>>2] = $66;
 $67 = ((($player_pos)) + 4|0);
 $68 = $0;
 $69 = ((($68)) + 28|0);
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = +HEAPF32[$71>>2];
 HEAPF32[$67>>2] = $72;
 $73 = ((($player_pos)) + 8|0);
 $74 = $0;
 $75 = ((($74)) + 28|0);
 $76 = ((($75)) + 20|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = +HEAPF32[$77>>2];
 HEAPF32[$73>>2] = $78;
 $i3 = 0;
 while(1) {
  $79 = $i3;
  $80 = $level;
  $81 = ((($80)) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($79|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $i3;
  $85 = $level;
  $86 = ((($85)) + 28|0);
  $87 = (($86) + (($84*52)|0)|0);
  $e = $87;
  $88 = $e;
  $89 = ((($88)) + 8|0);
  __ZmiRK7Vector3S1_($dpos,$player_pos,$89);
  $90 = ((($dpos)) + 4|0);
  $91 = +HEAPF32[$90>>2];
  $92 = -$91;
  HEAPF32[$3>>2] = $92;
  $93 = ((($3)) + 4|0);
  $94 = +HEAPF32[$dpos>>2];
  HEAPF32[$93>>2] = $94;
  __Z9normalizeRK7Vector2($dside,$3);
  $95 = (+__Z6lengthRK7Vector3($dpos));
  $96 = $95 > 6.0;
  do {
   if (!($96)) {
    __Z9normalizeRK7Vector3($4,$dpos);
    ;HEAP32[$dpos>>2]=HEAP32[$4>>2]|0;HEAP32[$dpos+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$dpos+8>>2]=HEAP32[$4+8>>2]|0;
    $97 = $e;
    $98 = HEAP32[$97>>2]|0;
    if ((($98|0) == 258)) {
     $99 = (_rand()|0);
     $100 = (($99|0) % 8)&-1;
     $101 = ($100|0)!=(0);
     if ($101) {
      break;
     }
     $102 = $e;
     $103 = ((($102)) + 8|0);
     __ZmlfRK7Vector3($5,0.10000000149011612,$dpos);
     __ZplRK7Vector3S1_($p_pos,$103,$5);
     __ZmlfRK7Vector2($6,0.30000001192092896,$dside);
     (__ZpLR7Vector2RKS_($p_pos,$6)|0);
     $104 = ((($p_pos)) + 8|0);
     $105 = +HEAPF32[$104>>2];
     $106 = $105 + 0.20000000298023224;
     HEAPF32[$104>>2] = $106;
     $107 = $0;
     $108 = (_rand()|0);
     $109 = $108 & 7;
     $110 = (16 + ($109))|0;
     __ZL21create_smoke_particleiRK7Vector3($7,$110,$p_pos);
     __Z12add_particleR4GameRK8Particle($107,$7);
     break;
    } else if ((($98|0) == 514)) {
     $111 = (_rand()|0);
     $112 = (($111|0) % 8)&-1;
     $113 = ($112|0)!=(0);
     if ($113) {
      break;
     }
     $114 = $e;
     $115 = ((($114)) + 8|0);
     __ZmlfRK7Vector3($8,0.10000000149011612,$dpos);
     __ZplRK7Vector3S1_($p_pos4,$115,$8);
     __ZmlfRK7Vector2($9,0.30000001192092896,$dside);
     (__ZmIR7Vector2RKS_($p_pos4,$9)|0);
     $116 = ((($p_pos4)) + 8|0);
     $117 = +HEAPF32[$116>>2];
     $118 = $117 + 0.20000000298023224;
     HEAPF32[$116>>2] = $118;
     $119 = (_rand()|0);
     $120 = $119 & 7;
     $121 = (80 + ($120))|0;
     __ZL21create_smoke_particleiRK7Vector3($p5,$121,$p_pos4);
     $122 = ((($p5)) + 12|0);
     (__ZmLR7Vector3f($122,2.0)|0);
     $123 = $0;
     __Z12add_particleR4GameRK8Particle($123,$p5);
     break;
    } else if ((($98|0) == 5)) {
     $124 = $level;
     $125 = ((($124)) + 20|0);
     $126 = +HEAPF32[$125>>2];
     $127 = $126 <= 0.0;
     if ($127) {
      break;
     }
     $128 = $e;
     $129 = ((($128)) + 8|0);
     ;HEAP32[$pos>>2]=HEAP32[$129>>2]|0;HEAP32[$pos+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$pos+8>>2]=HEAP32[$129+8>>2]|0;
     $130 = (_rand()|0);
     $131 = $130 & 15;
     $132 = (+($131|0));
     $133 = $132 / 32.0;
     $134 = $133 - 0.25;
     $135 = +HEAPF32[$pos>>2];
     $136 = $135 + $134;
     HEAPF32[$pos>>2] = $136;
     $137 = (_rand()|0);
     $138 = $137 & 15;
     $139 = (+($138|0));
     $140 = $139 / 32.0;
     $141 = $140 - 0.25;
     $142 = ((($pos)) + 4|0);
     $143 = +HEAPF32[$142>>2];
     $144 = $143 + $141;
     HEAPF32[$142>>2] = $144;
     $145 = (_rand()|0);
     $146 = $145 & 15;
     $147 = (+($146|0));
     $148 = $147 / 32.0;
     $149 = $148 - 0.25;
     $150 = ((($pos)) + 8|0);
     $151 = +HEAPF32[$150>>2];
     $152 = $151 + $149;
     HEAPF32[$150>>2] = $152;
     $153 = (_rand()|0);
     $154 = $153 & 7;
     $155 = (64 + ($154))|0;
     __ZL21create_smoke_particleiRK7Vector3($p6,$155,$pos);
     $156 = ((($p6)) + 12|0);
     (__ZmLR7Vector3f($156,3.0)|0);
     $157 = $0;
     __Z12add_particleR4GameRK8Particle($157,$p6);
     break;
    } else {
     break;
    }
   }
  } while(0);
  $158 = $i3;
  $159 = (($158) + 1)|0;
  $i3 = $159;
 }
 STACKTOP = sp;return;
}
function __ZL15update_entitiesR4GameR5Levelf($game,$level,$dt) {
 $game = $game|0;
 $level = $level|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $damage = 0.0;
 var $damage6 = 0.0, $distance = 0.0, $dpos = 0, $e = 0, $forwards = 0, $i = 0, $i1 = 0, $i4 = 0, $p = 0, $p5 = 0, $portal = 0, $pos = 0, $pos2 = 0, $speed = 0.0, $tex = 0, $tex3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $forwards = sp + 328|0;
 $dpos = sp + 304|0;
 $3 = sp + 288|0;
 $4 = sp + 272|0;
 $5 = sp + 260|0;
 $pos = sp + 248|0;
 $p = sp + 200|0;
 $6 = sp + 40|0;
 $7 = sp + 8|0;
 $8 = sp + 16|0;
 $9 = sp + 24|0;
 $10 = sp + 32|0;
 $11 = sp + 56|0;
 $pos2 = sp + 64|0;
 $p5 = sp + 88|0;
 $12 = sp + 128|0;
 $portal = sp + 144|0;
 $0 = $game;
 $1 = $level;
 $2 = $dt;
 $13 = $2;
 $14 = $1;
 $15 = ((($14)) + 20|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 - $13;
 HEAPF32[$15>>2] = $17;
 $18 = $1;
 $19 = ((($18)) + 20|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 < 0.0;
 if ($21) {
  $22 = $1;
  $23 = ((($22)) + 20|0);
  HEAPF32[$23>>2] = 0.0;
 }
 $24 = $0;
 $25 = ((($24)) + 28|0);
 $26 = ((($25)) + 28|0);
 $27 = +HEAPF32[$26>>2];
 $28 = (+Math_sin((+$27)));
 HEAPF32[$forwards>>2] = $28;
 $29 = ((($forwards)) + 4|0);
 $30 = $0;
 $31 = ((($30)) + 28|0);
 $32 = ((($31)) + 28|0);
 $33 = +HEAPF32[$32>>2];
 $34 = (+Math_cos((+$33)));
 HEAPF32[$29>>2] = $34;
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = $1;
  $37 = ((($36)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $i;
  $41 = $1;
  $42 = ((($41)) + 28|0);
  $43 = (($42) + (($40*52)|0)|0);
  $e = $43;
  $44 = $2;
  $45 = $e;
  $46 = ((($45)) + 44|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $47 - $44;
  HEAPF32[$46>>2] = $48;
  $49 = $2;
  $50 = $e;
  $51 = ((($50)) + 48|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52 - $49;
  HEAPF32[$51>>2] = $53;
  $54 = $0;
  $55 = ((($54)) + 28|0);
  $56 = $e;
  $57 = ((($56)) + 8|0);
  __ZmiRK7Vector3S1_($dpos,$55,$57);
  $58 = (+__Z6lengthRK7Vector3($dpos));
  $distance = $58;
  $59 = $distance;
  $60 = $59 > 8.0;
  L7: do {
   if (!($60)) {
    __Z9normalizeRK7Vector3($3,$dpos);
    ;HEAP32[$dpos>>2]=HEAP32[$3>>2]|0;HEAP32[$dpos+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$dpos+8>>2]=HEAP32[$3+8>>2]|0;
    $61 = $e;
    $62 = HEAP32[$61>>2]|0;
    switch ($62|0) {
    case 258:  {
     $speed = 2.0;
     $63 = $e;
     $64 = ((($63)) + 44|0);
     $65 = +HEAPF32[$64>>2];
     $66 = $65 > 0.0;
     if ($66) {
      $67 = $speed;
      $68 = $67 * 0.20000000298023224;
      $speed = $68;
     }
     $69 = $distance;
     $70 = $69 > 1.0;
     if ($70) {
      $71 = $e;
      $72 = ((($71)) + 8|0);
      $73 = $speed;
      __ZmlfRK7Vector3($5,$73,$dpos);
      $74 = $2;
      __ZmlRK7Vector3f($4,$5,$74);
      (__ZpLR7Vector3RKS_($72,$4)|0);
     }
     $75 = $e;
     $76 = ((($75)) + 48|0);
     $77 = +HEAPF32[$76>>2];
     $78 = $77 > 0.0;
     if ($78) {
      $79 = (_rand()|0);
      $80 = $79 & 31;
      $81 = ($80|0)==(0);
      if ($81) {
       $82 = (+__Z6randomff(-1.0,1.0));
       $83 = $e;
       $84 = ((($83)) + 20|0);
       HEAPF32[$84>>2] = $82;
       $85 = (+__Z6randomff(-1.0,1.0));
       $86 = $e;
       $87 = ((($86)) + 20|0);
       $88 = ((($87)) + 4|0);
       HEAPF32[$88>>2] = $85;
       $89 = $e;
       $90 = ((($89)) + 20|0);
       (__ZmLR7Vector2f($90,3.0)|0);
      }
     }
     $91 = $distance;
     $92 = $91 < 10.0;
     if (!($92)) {
      break L7;
     }
     $93 = (+__Z6randomff(0.0,1.0));
     $94 = $93;
     $95 = $94 < 0.10000000000000001;
     if (!($95)) {
      break L7;
     }
     $96 = $e;
     $97 = ((($96)) + 8|0);
     ;HEAP32[$pos>>2]=HEAP32[$97>>2]|0;HEAP32[$pos+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$pos+8>>2]=HEAP32[$97+8>>2]|0;
     $98 = ((($pos)) + 8|0);
     HEAPF32[$98>>2] = 0.10000000149011612;
     $tex = 16;
     $99 = (_rand()|0);
     $100 = $99 & 7;
     $101 = $tex;
     $102 = (($101) + ($100))|0;
     $tex = $102;
     $i1 = 0;
     while(1) {
      $103 = $i1;
      $104 = ($103|0)<(3);
      if (!($104)) {
       break;
      }
      $105 = $tex;
      __ZL21create_smoke_particleiRK7Vector3($p,$105,$pos);
      $106 = ((($p)) + 12|0);
      __ZmlfRK7Vector3($6,10.0,$dpos);
      (__ZpLR7Vector3RKS_($106,$6)|0);
      $107 = (+__Z6randomff(-0.5,0.5));
      $108 = ((($p)) + 12|0);
      $109 = ((($108)) + 8|0);
      $110 = +HEAPF32[$109>>2];
      $111 = $110 + $107;
      HEAPF32[$109>>2] = $111;
      $112 = $0;
      __Z12add_particleR4GameRK8Particle($112,$p);
      $113 = $i1;
      $114 = (($113) + 1)|0;
      $i1 = $114;
     }
     $115 = (+__Z6randomff(3.0,6.0));
     $116 = $2;
     $117 = $115 * $116;
     $damage = $117;
     $118 = $damage;
     $119 = $0;
     $120 = ((($119)) + 28|0);
     $121 = ((($120)) + 40|0);
     $122 = +HEAPF32[$121>>2];
     $123 = $122 - $118;
     HEAPF32[$121>>2] = $123;
     break L7;
     break;
    }
    case 514:  {
     $124 = $distance;
     $125 = $124 < 1.0;
     if ($125) {
      $126 = $e;
      $127 = ((($126)) + 8|0);
      __ZmlfRK7Vector2($8,2.0,$dpos);
      $128 = $2;
      __ZmlRK7Vector2f($7,$8,$128);
      (__ZmIR7Vector2RKS_($127,$7)|0);
     }
     $129 = (_rand()|0);
     $130 = $129 & 31;
     $131 = ($130|0)==(0);
     if ($131) {
      $132 = (+__Z6randomff(-1.0,1.0));
      $133 = $e;
      $134 = ((($133)) + 20|0);
      HEAPF32[$134>>2] = $132;
      $135 = (+__Z6randomff(-1.0,1.0));
      $136 = $e;
      $137 = ((($136)) + 20|0);
      $138 = ((($137)) + 4|0);
      HEAPF32[$138>>2] = $135;
      $139 = $e;
      $140 = ((($139)) + 20|0);
      (__ZmLR7Vector2f($140,2.0)|0);
     }
     $141 = $e;
     $142 = ((($141)) + 48|0);
     $143 = +HEAPF32[$142>>2];
     $144 = $143 > 0.0;
     if ($144) {
      $145 = (_rand()|0);
      $146 = $145 & 31;
      $147 = ($146|0)==(0);
      if ($147) {
       $148 = (+__Z6randomff(-1.0,1.0));
       $149 = $e;
       $150 = ((($149)) + 20|0);
       HEAPF32[$150>>2] = $148;
       $151 = (+__Z6randomff(-1.0,1.0));
       $152 = $e;
       $153 = ((($152)) + 20|0);
       $154 = ((($153)) + 4|0);
       HEAPF32[$154>>2] = $151;
       $155 = $e;
       $156 = ((($155)) + 20|0);
       (__ZmLR7Vector2f($156,2.0)|0);
      }
     }
     $157 = $e;
     $158 = ((($157)) + 8|0);
     $159 = $e;
     $160 = ((($159)) + 20|0);
     $161 = $2;
     __ZmlRK7Vector2f($9,$160,$161);
     (__ZpLR7Vector2RKS_($158,$9)|0);
     $162 = $e;
     $163 = ((($162)) + 8|0);
     __ZmlfRK7Vector2($11,0.5,$dpos);
     $164 = $2;
     __ZmlRK7Vector2f($10,$11,$164);
     (__ZpLR7Vector2RKS_($163,$10)|0);
     $165 = $distance;
     $166 = $165 < 10.0;
     if ($166) {
      $167 = (+__Z6randomff(0.0,1.0));
      $168 = $167;
      $169 = $168 < 0.10000000000000001;
      if ($169) {
       $170 = $2;
       $171 = 1.0 * $170;
       $172 = $e;
       $173 = ((($172)) + 36|0);
       $174 = +HEAPF32[$173>>2];
       $175 = $174 - $171;
       HEAPF32[$173>>2] = $175;
       $176 = $e;
       $177 = ((($176)) + 36|0);
       $178 = +HEAPF32[$177>>2];
       $179 = $178 > 0.0;
       if ($179) {
        $180 = $e;
        $181 = ((($180)) + 8|0);
        ;HEAP32[$pos2>>2]=HEAP32[$181>>2]|0;HEAP32[$pos2+4>>2]=HEAP32[$181+4>>2]|0;HEAP32[$pos2+8>>2]=HEAP32[$181+8>>2]|0;
        $182 = ((($pos2)) + 8|0);
        HEAPF32[$182>>2] = 0.10000000149011612;
        $tex3 = 80;
        $183 = (_rand()|0);
        $184 = $183 & 7;
        $185 = $tex3;
        $186 = (($185) + ($184))|0;
        $tex3 = $186;
        $i4 = 0;
        while(1) {
         $187 = $i4;
         $188 = ($187|0)<(10);
         if (!($188)) {
          break;
         }
         $189 = $tex3;
         __ZL21create_smoke_particleiRK7Vector3($p5,$189,$pos2);
         $190 = ((($p5)) + 12|0);
         __ZmlfRK7Vector3($12,10.0,$dpos);
         (__ZpLR7Vector3RKS_($190,$12)|0);
         $191 = (+__Z6randomff(-0.5,0.5));
         $192 = ((($p5)) + 12|0);
         $193 = ((($192)) + 8|0);
         $194 = +HEAPF32[$193>>2];
         $195 = $194 + $191;
         HEAPF32[$193>>2] = $195;
         $196 = $0;
         __Z12add_particleR4GameRK8Particle($196,$p5);
         $197 = $i4;
         $198 = (($197) + 1)|0;
         $i4 = $198;
        }
        $199 = (+__Z6randomff(10.0,15.0));
        $200 = $2;
        $201 = $199 * $200;
        $damage6 = $201;
        $202 = $damage6;
        $203 = $0;
        $204 = ((($203)) + 28|0);
        $205 = ((($204)) + 40|0);
        $206 = +HEAPF32[$205>>2];
        $207 = $206 - $202;
        HEAPF32[$205>>2] = $207;
       }
      }
     }
     $208 = $2;
     $209 = 2.0 * $208;
     $210 = $e;
     $211 = ((($210)) + 36|0);
     $212 = +HEAPF32[$211>>2];
     $213 = $212 + $209;
     HEAPF32[$211>>2] = $213;
     $214 = $e;
     $215 = ((($214)) + 36|0);
     $216 = +HEAPF32[$215>>2];
     $217 = $e;
     $218 = ((($217)) + 40|0);
     $219 = +HEAPF32[$218>>2];
     $220 = (+__Z5clampfff($216,0.0,$219));
     $221 = $e;
     $222 = ((($221)) + 36|0);
     HEAPF32[$222>>2] = $220;
     break;
    }
    case 5:  {
     break;
    }
    case 9:  {
     $239 = $distance;
     $240 = $239 < 0.5;
     if ($240) {
      $241 = $e;
      $242 = ((($241)) + 28|0);
      HEAPF32[$242>>2] = -1000.0;
      $243 = $0;
      $244 = ((($243)) + 28|0);
      $245 = ((($244)) + 56|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = (($246) + 1)|0;
      HEAP32[$245>>2] = $247;
      $248 = $0;
      $249 = ((($248)) + 28|0);
      $250 = ((($249)) + 60|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = (($251) + 1)|0;
      $253 = $0;
      $254 = ((($253)) + 28|0);
      $255 = ((($254)) + 60|0);
      HEAP32[$255>>2] = $252;
      $256 = $0;
      $257 = ((($256)) + 28|0);
      $258 = ((($257)) + 72|0);
      HEAPF32[$258>>2] = 3.0;
      $259 = $0;
      $260 = ((($259)) + 28|0);
      $261 = ((($260)) + 44|0);
      $262 = +HEAPF32[$261>>2];
      $263 = $262 + 4.0;
      HEAPF32[$261>>2] = $263;
      $264 = $0;
      $265 = ((($264)) + 28|0);
      $266 = ((($265)) + 52|0);
      $267 = +HEAPF32[$266>>2];
      $268 = $267 + 4.0;
      HEAPF32[$266>>2] = $268;
     }
     $269 = $0;
     $270 = ((($269)) + 3488|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = (+($271>>>0));
     $273 = $272 / 600.0;
     $274 = (+Math_sin((+$273)));
     $275 = 0.05000000074505806 * $274;
     $276 = $e;
     $277 = ((($276)) + 8|0);
     $278 = ((($277)) + 8|0);
     HEAPF32[$278>>2] = $275;
     break L7;
     break;
    }
    case 17:  {
     $279 = $0;
     $280 = ((($279)) + 3488|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = (+($281>>>0));
     $283 = $282 / 600.0;
     $284 = (+Math_sin((+$283)));
     $285 = 0.05000000074505806 * $284;
     $286 = $e;
     $287 = ((($286)) + 8|0);
     $288 = ((($287)) + 8|0);
     HEAPF32[$288>>2] = $285;
     $289 = $distance;
     $290 = $289 < 0.5;
     if (!($290)) {
      break L7;
     }
     $291 = $e;
     $292 = ((($291)) + 28|0);
     HEAPF32[$292>>2] = -1000.0;
     $293 = $0;
     $294 = ((($293)) + 28|0);
     $295 = ((($294)) + 40|0);
     $296 = +HEAPF32[$295>>2];
     $297 = $296 + 5.0;
     HEAPF32[$295>>2] = $297;
     break L7;
     break;
    }
    case 33:  {
     $298 = $0;
     $299 = ((($298)) + 3488|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = (+($300>>>0));
     $302 = $301 / 600.0;
     $303 = (+Math_sin((+$302)));
     $304 = 0.05000000074505806 * $303;
     $305 = $e;
     $306 = ((($305)) + 8|0);
     $307 = ((($306)) + 8|0);
     HEAPF32[$307>>2] = $304;
     $308 = $distance;
     $309 = $308 < 0.5;
     if (!($309)) {
      break L7;
     }
     $310 = $e;
     $311 = ((($310)) + 28|0);
     HEAPF32[$311>>2] = -1000.0;
     $312 = $0;
     $313 = ((($312)) + 28|0);
     $314 = ((($313)) + 48|0);
     $315 = +HEAPF32[$314>>2];
     $316 = $315 + 5.0;
     HEAPF32[$314>>2] = $316;
     break L7;
     break;
    }
    default: {
     break L7;
    }
    }
    $223 = $distance;
    $224 = $223 < 0.5;
    if ($224) {
     $225 = $1;
     $226 = ((($225)) + 20|0);
     $227 = +HEAPF32[$226>>2];
     $228 = $227 <= 0.0;
     if ($228) {
      $229 = $1;
      $230 = $e;
      $231 = ((($230)) + 4|0);
      $232 = ((($231)) + 2|0);
      $233 = HEAP16[$232>>1]|0;
      __ZL17get_portal_entityR5Levelt($portal,$229,$233);
      $234 = $0;
      $235 = ((($234)) + 28|0);
      $236 = ((($portal)) + 8|0);
      ;HEAP32[$235>>2]=HEAP32[$236>>2]|0;HEAP32[$235+4>>2]=HEAP32[$236+4>>2]|0;HEAP32[$235+8>>2]=HEAP32[$236+8>>2]|0;
      $237 = $1;
      $238 = ((($237)) + 20|0);
      HEAPF32[$238>>2] = 3.0;
     }
    }
   }
  } while(0);
  $317 = $i;
  $318 = (($317) + 1)|0;
  $i = $318;
 }
 STACKTOP = sp;return;
}
function __ZL20remove_dead_entitiesR4GameR5Level($game,$level) {
 $game = $game|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $i = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $game;
 $1 = $level;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ((($3)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = ((($8)) + 28|0);
  $10 = (($9) + (($7*52)|0)|0);
  $11 = ((($10)) + 28|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $12 <= 0.0;
  $14 = $i;
  if (!($13)) {
   $47 = (($14) + 1)|0;
   $i = $47;
   continue;
  }
  $15 = $1;
  $16 = ((($15)) + 28|0);
  $17 = (($16) + (($14*52)|0)|0);
  $e = $17;
  $18 = $e;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(258);
  if ($20) {
   (_printf((1376|0),($vararg_buffer|0))|0);
  }
  $21 = $e;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(514);
  if ($23) {
   $24 = $0;
   $25 = ((($24)) + 3472|0);
   HEAP32[$25>>2] = 1;
  }
  $26 = $i;
  $27 = $1;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) - 1)|0;
  $31 = ($26|0)!=($30|0);
  if ($31) {
   $32 = $i;
   $33 = $1;
   $34 = ((($33)) + 28|0);
   $35 = (($34) + (($32*52)|0)|0);
   $36 = $1;
   $37 = ((($36)) + 24|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) - 1)|0;
   $40 = $1;
   $41 = ((($40)) + 28|0);
   $42 = (($41) + (($39*52)|0)|0);
   dest=$35; src=$42; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  }
  $43 = $1;
  $44 = ((($43)) + 24|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -1)|0;
  HEAP32[$44>>2] = $46;
 }
 STACKTOP = sp;return;
}
function __Z11entity_rectRK7Vector2($agg$result,$pos) {
 $agg$result = $agg$result|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pos;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = $2 + 0.30000001192092896;
 HEAPF32[$agg$result>>2] = $3;
 $4 = ((($agg$result)) + 4|0);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 + 0.30000001192092896;
 HEAPF32[$4>>2] = $8;
 $9 = ((($agg$result)) + 8|0);
 HEAPF32[$9>>2] = 0.40000000596046448;
 $10 = ((($agg$result)) + 12|0);
 HEAPF32[$10>>2] = 0.40000000596046448;
 STACKTOP = sp;return;
}
function __ZL15check_collisionRK5Level4Rect($agg$result,$level,$rect) {
 $agg$result = $agg$result|0;
 $level = $level|0;
 $rect = $rect|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $radius = 0, $t = 0, $tile_rect = 0, $x = 0, $x_center = 0, $y = 0, $y_center = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 104|0;
 $$byval_copy = sp + 88|0;
 $t = sp + 120|0;
 $tile_rect = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp;
 $3 = sp + 48|0;
 $0 = $level;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;
 $radius = 2;
 $4 = +HEAPF32[$rect>>2];
 $5 = $4;
 $6 = (+_round($5));
 $7 = (~~(($6)));
 $x_center = $7;
 $8 = ((($rect)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9;
 $11 = (+_round($10));
 $12 = (~~(($11)));
 $y_center = $12;
 $13 = $y_center;
 $14 = (($13) - 2)|0;
 $y = $14;
 while(1) {
  $15 = $y;
  $16 = $y_center;
  $17 = (($16) + 2)|0;
  $18 = ($15|0)<=($17|0);
  if (!($18)) {
   break;
  }
  $19 = $x_center;
  $20 = (($19) - 2)|0;
  $x = $20;
  while(1) {
   $21 = $x;
   $22 = $x_center;
   $23 = (($22) + 2)|0;
   $24 = ($21|0)<=($23|0);
   if (!($24)) {
    break;
   }
   $25 = $0;
   $26 = $x;
   $27 = $y;
   __Z8get_tileRK5Levelii($t,$25,$26,$27);
   $28 = ((($t)) + 2|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $30 & 2;
   $32 = ($31|0)!=(0);
   if ($32) {
    $33 = $x;
    $34 = (+($33|0));
    HEAPF32[$tile_rect>>2] = $34;
    $35 = ((($tile_rect)) + 4|0);
    $36 = $y;
    $37 = (+($36|0));
    HEAPF32[$35>>2] = $37;
    $38 = ((($tile_rect)) + 8|0);
    HEAPF32[$38>>2] = 1.0;
    $39 = ((($tile_rect)) + 12|0);
    HEAPF32[$39>>2] = 1.0;
    $40 = (__Z9intersectRK4RectS1_($rect,$tile_rect)|0);
    if ($40) {
     ;HEAP32[$2>>2]=HEAP32[$rect>>2]|0;HEAP32[$2+4>>2]=HEAP32[$rect+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$rect+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$rect+12>>2]|0;
     ;HEAP32[$3>>2]=HEAP32[$tile_rect>>2]|0;HEAP32[$3+4>>2]=HEAP32[$tile_rect+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$tile_rect+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$tile_rect+12>>2]|0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;
     __ZL20collision_adjustment4RectS_($1,$$byval_copy,$$byval_copy1);
     (__ZpLR7Vector2RKS_($agg$result,$1)|0);
    }
   }
   $41 = $x;
   $42 = (($41) + 1)|0;
   $x = $42;
  }
  $43 = $y;
  $44 = (($43) + 1)|0;
  $y = $44;
 }
 STACKTOP = sp;return;
}
function __ZpLR7Vector2RKS_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $a;
 $1 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 __ZplRK7Vector2S1_($2,$4,$5);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZmiRK7Vector3S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 HEAPF32[$agg$result>>2] = $6;
 $7 = ((($agg$result)) + 4|0);
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 - $13;
 HEAPF32[$7>>2] = $14;
 $15 = ((($agg$result)) + 8|0);
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $18 - $21;
 HEAPF32[$15>>2] = $22;
 STACKTOP = sp;return;
}
function __Z6lengthRK7Vector3($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = (+__Z14length_squaredRK7Vector3($1));
 $3 = (+Math_sqrt((+$2)));
 STACKTOP = sp;return (+$3);
}
function __Z5clampfff($x,$min,$max) {
 $x = +$x;
 $min = +$min;
 $max = +$max;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $min;
 $3 = $max;
 $4 = $1;
 $5 = $2;
 $6 = $4 < $5;
 do {
  if ($6) {
   $7 = $2;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = $3;
   $10 = $8 > $9;
   if ($10) {
    $11 = $3;
    $0 = $11;
    break;
   } else {
    $12 = $1;
    $0 = $12;
    break;
   }
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return (+$13);
}
function __Z8get_tileRK5Levelii($agg$result,$l,$x,$y) {
 $agg$result = $agg$result|0;
 $l = $l|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $x;
 $2 = $y;
 $3 = $1;
 $4 = ($3|0)<(0);
 $5 = $2;
 $6 = ($5|0)<(0);
 $or$cond = $4 | $6;
 if (!($or$cond)) {
  $7 = $1;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)>=($9|0);
  if (!($10)) {
   $11 = $2;
   $12 = $0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($11|0)>=($14|0);
   if (!($15)) {
    $19 = $1;
    $20 = $2;
    $21 = $0;
    $22 = HEAP32[$21>>2]|0;
    $23 = Math_imul($20, $22)|0;
    $24 = (($19) + ($23))|0;
    $25 = $0;
    $26 = ((($25)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + ($24<<2)|0);
    ;HEAP8[$agg$result>>0]=HEAP8[$28>>0]|0;HEAP8[$agg$result+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$agg$result+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$agg$result+3>>0]=HEAP8[$28+3>>0]|0;
    STACKTOP = sp;return;
   }
  }
 }
 HEAP8[$agg$result>>0] = 0;
 $16 = ((($agg$result)) + 1|0);
 HEAP8[$16>>0] = 0;
 $17 = ((($agg$result)) + 2|0);
 HEAP8[$17>>0] = 0;
 $18 = ((($agg$result)) + 3|0);
 HEAP8[$18>>0] = 0;
 STACKTOP = sp;return;
}
function __ZL16render_particlesR4Game($game) {
 $game = $game|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $d = 0.0, $i = 0, $p = 0, $player_pos = 0, $radius = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $player_pos = sp + 4|0;
 $1 = sp + 28|0;
 $0 = $game;
 $radius = 12.0;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = +HEAPF32[$5>>2];
 HEAPF32[$player_pos>>2] = $6;
 $7 = ((($player_pos)) + 4|0);
 $8 = $0;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$7>>2] = $12;
 $13 = ((($player_pos)) + 8|0);
 $14 = $0;
 $15 = ((($14)) + 28|0);
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = +HEAPF32[$17>>2];
 HEAPF32[$13>>2] = $18;
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = $0;
  $21 = ((($20)) + 3508|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $0;
  $26 = ((($25)) + 3512|0);
  $27 = (($26) + (($24*40)|0)|0);
  $p = $27;
  $28 = $p;
  __ZmiRK7Vector3S1_($1,$28,$player_pos);
  $29 = (+__Z6lengthRK7Vector3($1));
  $d = $29;
  $30 = $d;
  $31 = $30 < 12.0;
  if ($31) {
   $32 = $0;
   $33 = $p;
   $34 = ((($33)) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $p;
   $37 = $p;
   $38 = ((($37)) + 24|0);
   __Z13render_spriteR4GameRK6BitmapiRK7Vector3RK7Vector2($32,40,$35,$36,$38);
  }
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 STACKTOP = sp;return;
}
function __Z4lerpfff($x,$y,$t) {
 $x = +$x;
 $y = +$y;
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $t;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $4 - $5;
 $7 = $2;
 $8 = $6 * $7;
 $9 = $3 + $8;
 STACKTOP = sp;return (+$9);
}
function __ZL16render_ui_spriteR11FramebufferRK6Bitmap7Vector24Rect($display,$spritesheet,$pos,$rect) {
 $display = $display|0;
 $spritesheet = $spritesheet|0;
 $pos = $pos|0;
 $rect = $rect|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0;
 var $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0;
 var $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $a = 0.0, $dst = 0, $src = 0, $x = 0, $xx = 0, $y = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 40|0;
 $src = sp + 20|0;
 $dst = sp + 4|0;
 $2 = sp + 16|0;
 $0 = $display;
 $1 = $spritesheet;
 $3 = ((($rect)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (~~(($4)));
 $y = $5;
 while(1) {
  $6 = $y;
  $7 = (+($6|0));
  $8 = ((($rect)) + 4|0);
  $9 = +HEAPF32[$8>>2];
  $10 = ((($rect)) + 12|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 + $11;
  $13 = $7 < $12;
  if (!($13)) {
   break;
  }
  $14 = +HEAPF32[$rect>>2];
  $15 = (~~(($14)));
  $x = $15;
  while(1) {
   $16 = $x;
   $17 = (+($16|0));
   $18 = +HEAPF32[$rect>>2];
   $19 = ((($rect)) + 8|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $18 + $20;
   $22 = $17 < $21;
   if (!($22)) {
    break;
   }
   $23 = $1;
   $24 = $x;
   $25 = $y;
   __Z16get_bitmap_pixelRK6Bitmapii($src,$23,$24,$25);
   $26 = ((($src)) + 3|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = +HEAPF32[$pos>>2];
    $31 = $x;
    $32 = (+($31|0));
    $33 = $30 + $32;
    $34 = +HEAPF32[$rect>>2];
    $35 = $33 - $34;
    $36 = (~~(($35)));
    $xx = $36;
    $37 = ((($pos)) + 4|0);
    $38 = +HEAPF32[$37>>2];
    $39 = $y;
    $40 = (+($39|0));
    $41 = $38 + $40;
    $42 = ((($rect)) + 4|0);
    $43 = +HEAPF32[$42>>2];
    $44 = $41 - $43;
    $45 = (~~(($44)));
    $yy = $45;
    $46 = $xx;
    $47 = $yy;
    $48 = $0;
    $49 = HEAP32[$48>>2]|0;
    $50 = Math_imul($47, $49)|0;
    $51 = (($46) + ($50))|0;
    $52 = $0;
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + ($51<<2)|0);
    ;HEAP32[$dst>>2]=HEAP32[$55>>2]|0;
    $56 = ((($src)) + 3|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = (+($58|0));
    $60 = $59 / 255.0;
    $a = $60;
    $61 = HEAP8[$src>>0]|0;
    $62 = $61&255;
    $63 = (+($62|0));
    $64 = $a;
    $65 = $63 * $64;
    $66 = HEAP8[$dst>>0]|0;
    $67 = $66&255;
    $68 = (+($67|0));
    $69 = $a;
    $70 = 1.0 - $69;
    $71 = $68 * $70;
    $72 = $65 + $71;
    $73 = (~~(($72))&255);
    HEAP8[$src>>0] = $73;
    $74 = ((($src)) + 1|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = (+($76|0));
    $78 = $a;
    $79 = $77 * $78;
    $80 = ((($dst)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = (+($82|0));
    $84 = $a;
    $85 = 1.0 - $84;
    $86 = $83 * $85;
    $87 = $79 + $86;
    $88 = (~~(($87))&255);
    $89 = ((($src)) + 1|0);
    HEAP8[$89>>0] = $88;
    $90 = ((($src)) + 2|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = (+($92|0));
    $94 = $a;
    $95 = $93 * $94;
    $96 = ((($dst)) + 2|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = (+($98|0));
    $100 = $a;
    $101 = 1.0 - $100;
    $102 = $99 * $101;
    $103 = $95 + $102;
    $104 = (~~(($103))&255);
    $105 = ((($src)) + 2|0);
    HEAP8[$105>>0] = $104;
    $106 = ((($src)) + 3|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = (+($108|0));
    $110 = ((($dst)) + 3|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = (+($112|0));
    $114 = $a;
    $115 = 1.0 - $114;
    $116 = $113 * $115;
    $117 = $109 + $116;
    $118 = (~~(($117))&255);
    $119 = ((($src)) + 3|0);
    HEAP8[$119>>0] = $118;
    $120 = $0;
    ;HEAP32[$2>>2]=HEAP32[$src>>2]|0;
    $121 = $xx;
    $122 = $yy;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
    __Z16set_bitmap_pixelR6Bitmap5Colorii($120,$$byval_copy,$121,$122);
   }
   $123 = $x;
   $124 = (($123) + 1)|0;
   $x = $124;
  }
  $125 = $y;
  $126 = (($125) + 1)|0;
  $y = $126;
 }
 STACKTOP = sp;return;
}
function __Z14get_char_indexc($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(104);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $i;
  $5 = (1272 + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = $1;
  $9 = $8 << 24 >> 24;
  $10 = ($7|0)==($9|0);
  $11 = $i;
  if ($10) {
   label = 4;
   break;
  }
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 if ((label|0) == 4) {
  $0 = $11;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZL6updateR4Gamef($game,$dt) {
 $game = $game|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $game;
 $1 = $dt;
 $2 = (_SDL_GetKeyboardState((0|0))|0);
 $3 = $0;
 $4 = ((($3)) + 3476|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = $1;
 __Z11update_gameR4Gamef($5,$6);
 STACKTOP = sp;return;
}
function __ZL6renderR4Game($game) {
 $game = $game|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_defer_1 = 0;
 var $_defer_2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $_defer_1 = sp + 24|0;
 $1 = sp + 20|0;
 $_defer_2 = sp + 4|0;
 $4 = sp;
 $5 = sp + 12|0;
 $0 = $game;
 $6 = $0;
 HEAP32[$1>>2] = $6;
 $7 = (__ZN4impl7deferFnIZL6renderR4GameE3__1EENS_5DeferIT_EEOS5_($1)|0);
 HEAP32[$_defer_1>>2] = $7;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 (invoke_ii(22,($11|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = $0;
  HEAP32[$4>>2] = $14;
  __THREW__ = 0;
  $15 = (invoke_ii(23,($4|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   HEAP32[$_defer_2>>2] = $15;
   $18 = $0;
   $19 = ((($18)) + 4|0);
   ;HEAP32[$5>>2]=HEAP32[176>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
   invoke_vii(24,($19|0),($$byval_copy|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $22 = $0;
    __THREW__ = 0;
    invoke_vi(25,($22|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if (!($24)) {
     $25 = $0;
     $26 = ((($25)) + 4|0);
     __THREW__ = 0;
     invoke_vid(26,($26|0),0.30000001192092896);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $29 = $0;
      __THREW__ = 0;
      invoke_vi(27,($29|0));
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if (!($31)) {
       __ZN4impl5DeferIZL6renderR4GameE3__2ED2Ev($_defer_2);
       __ZN4impl5DeferIZL6renderR4GameE3__1ED2Ev($_defer_1);
       STACKTOP = sp;return;
      }
     }
    }
   }
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $2 = $34;
   $3 = $35;
   __ZN4impl5DeferIZL6renderR4GameE3__2ED2Ev($_defer_2);
   __ZN4impl5DeferIZL6renderR4GameE3__1ED2Ev($_defer_1);
   $36 = $2;
   $37 = $3;
   ___resumeException($36|0);
   // unreachable;
  }
 }
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $2 = $32;
 $3 = $33;
 __ZN4impl5DeferIZL6renderR4GameE3__1ED2Ev($_defer_1);
 $36 = $2;
 $37 = $3;
 ___resumeException($36|0);
 // unreachable;
}
function __ZN6PlayerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($1)) + 16|0);
 $4 = ((($1)) + 4|0);
 HEAP32[$3>>2] = $4;
 $5 = ((($1)) + 20|0);
 $6 = ((($1)) + 8|0);
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4impl7deferFnIZL6renderR4GameE3__1EENS_5DeferIT_EEOS5_($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $fn;
 $2 = $1;
 $3 = (__ZNSt3__17forwardIZL6renderR4GameE3__1EEOT_RNS_16remove_referenceIS4_E4typeE($2)|0);
 __ZN4impl5DeferIZL6renderR4GameE3__1EC2EOS3_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4impl7deferFnIZL6renderR4GameE3__2EENS_5DeferIT_EEOS5_($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $fn;
 $2 = $1;
 $3 = (__ZNSt3__17forwardIZL6renderR4GameE3__2EEOT_RNS_16remove_referenceIS4_E4typeE($2)|0);
 __ZN4impl5DeferIZL6renderR4GameE3__2EC2EOS3_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4impl5DeferIZL6renderR4GameE3__2ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(28,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4impl5DeferIZL6renderR4GameE3__1ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(29,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZZL6renderR4GameENK3__1clEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 (_SDL_UpperBlit(($5|0),(0|0),($7|0),(0|0))|0);
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 _SDL_UpdateRect(($9|0),0,0,($13|0),($17|0));
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZZL6renderR4GameENK3__2clEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _SDL_UnlockSurface(($5|0));
 STACKTOP = sp;return;
}
function __ZNSt3__17forwardIZL6renderR4GameE3__2EEOT_RNS_16remove_referenceIS4_E4typeE($__t) {
 $__t = $__t|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN4impl5DeferIZL6renderR4GameE3__2EC2EOS3_($this,$fn) {
 $this = $this|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fn;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNSt3__17forwardIZL6renderR4GameE3__2EEOT_RNS_16remove_referenceIS4_E4typeE($3)|0);
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__17forwardIZL6renderR4GameE3__1EEOT_RNS_16remove_referenceIS4_E4typeE($__t) {
 $__t = $__t|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN4impl5DeferIZL6renderR4GameE3__1EC2EOS3_($this,$fn) {
 $this = $this|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fn;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNSt3__17forwardIZL6renderR4GameE3__1EEOT_RNS_16remove_referenceIS4_E4typeE($3)|0);
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;
 STACKTOP = sp;return;
}
function __Z14length_squaredRK7Vector3($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $0;
 $3 = (+__Z3dotRK7Vector3S1_($1,$2));
 STACKTOP = sp;return (+$3);
}
function __Z3dotRK7Vector3S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $14 + $21;
 STACKTOP = sp;return (+$22);
}
function __ZplRK7Vector2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 HEAPF32[$agg$result>>2] = $6;
 $7 = ((($agg$result)) + 4|0);
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 + $13;
 HEAPF32[$7>>2] = $14;
 STACKTOP = sp;return;
}
function __Z9intersectRK4RectS1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = (~~(($6)));
 $8 = (_abs($7)|0);
 $9 = $8<<1;
 $10 = (+($9|0));
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $13 + $16;
 $18 = $10 < $17;
 if (!($18)) {
  $38 = 0;
  STACKTOP = sp;return ($38|0);
 }
 $19 = $0;
 $20 = ((($19)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $1;
 $23 = ((($22)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 - $24;
 $26 = (~~(($25)));
 $27 = (_abs($26)|0);
 $28 = $27<<1;
 $29 = (+($28|0));
 $30 = $0;
 $31 = ((($30)) + 12|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $32 + $35;
 $37 = $29 < $36;
 $38 = $37;
 STACKTOP = sp;return ($38|0);
}
function __ZL20collision_adjustment4RectS_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $8 = 0.0, $9 = 0, $a_max = 0, $a_min = 0, $b_max = 0, $b_min = 0, $bottom = 0.0;
 var $depth = 0, $left = 0.0, $or$cond = 0, $or$cond3 = 0, $right = 0.0, $top = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $depth = sp + 48|0;
 $a_min = sp + 40|0;
 $b_min = sp + 32|0;
 $a_max = sp + 24|0;
 $b_max = sp + 16|0;
 ;HEAP32[$depth>>2]=0|0;HEAP32[$depth+4>>2]=0|0;
 $0 = +HEAPF32[$a>>2];
 HEAPF32[$a_min>>2] = $0;
 $1 = ((($a_min)) + 4|0);
 $2 = ((($a)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 HEAPF32[$1>>2] = $3;
 $4 = +HEAPF32[$b>>2];
 HEAPF32[$b_min>>2] = $4;
 $5 = ((($b_min)) + 4|0);
 $6 = ((($b)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 HEAPF32[$5>>2] = $7;
 $8 = +HEAPF32[$a>>2];
 $9 = ((($a)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 + $10;
 HEAPF32[$a_max>>2] = $11;
 $12 = ((($a_max)) + 4|0);
 $13 = ((($a)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($a)) + 12|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 + $16;
 HEAPF32[$12>>2] = $17;
 $18 = +HEAPF32[$b>>2];
 $19 = ((($b)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $18 + $20;
 HEAPF32[$b_max>>2] = $21;
 $22 = ((($b_max)) + 4|0);
 $23 = ((($b)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = ((($b)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $24 + $26;
 HEAPF32[$22>>2] = $27;
 $28 = +HEAPF32[$b_min>>2];
 $29 = +HEAPF32[$a_max>>2];
 $30 = $28 - $29;
 $left = $30;
 $31 = +HEAPF32[$b_max>>2];
 $32 = +HEAPF32[$a_min>>2];
 $33 = $31 - $32;
 $right = $33;
 $34 = ((($b_min)) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($a_max)) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $35 - $37;
 $top = $38;
 $39 = ((($b_max)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = ((($a_min)) + 4|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $40 - $42;
 $bottom = $43;
 $44 = $left;
 $45 = $44 > 0.0;
 $46 = $right;
 $47 = $46 < 0.0;
 $or$cond = $45 | $47;
 if ($or$cond) {
  HEAPF32[$agg$result>>2] = 0.0;
  $48 = ((($agg$result)) + 4|0);
  HEAPF32[$48>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $49 = $top;
 $50 = $49 > 0.0;
 $51 = $bottom;
 $52 = $51 < 0.0;
 $or$cond3 = $50 | $52;
 if ($or$cond3) {
  HEAPF32[$agg$result>>2] = 0.0;
  $53 = ((($agg$result)) + 4|0);
  HEAPF32[$53>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $54 = $left;
 $55 = (+__Z3absf($54));
 $56 = $right;
 $57 = $55 < $56;
 if ($57) {
  $58 = $left;
  HEAPF32[$depth>>2] = $58;
 } else {
  $59 = $right;
  HEAPF32[$depth>>2] = $59;
 }
 $60 = $top;
 $61 = (+__Z3absf($60));
 $62 = $bottom;
 $63 = $61 < $62;
 if ($63) {
  $64 = $top;
  $65 = ((($depth)) + 4|0);
  HEAPF32[$65>>2] = $64;
 } else {
  $66 = $bottom;
  $67 = ((($depth)) + 4|0);
  HEAPF32[$67>>2] = $66;
 }
 $68 = +HEAPF32[$depth>>2];
 $69 = (+__Z3absf($68));
 $70 = ((($depth)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = (+__Z3absf($71));
 $73 = $69 < $72;
 if ($73) {
  $74 = ((($depth)) + 4|0);
  HEAPF32[$74>>2] = 0.0;
 } else {
  HEAPF32[$depth>>2] = 0.0;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$depth>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$depth+4>>2]|0;
 STACKTOP = sp;return;
}
function __Z3absf($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = (+Math_abs((+$1)));
 STACKTOP = sp;return (+$2);
}
function _abs($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = $1 >> 31;
 $mask = $2;
 $3 = $0;
 $4 = $mask;
 $5 = (($3) + ($4))|0;
 $6 = $mask;
 $7 = $5 ^ $6;
 STACKTOP = sp;return ($7|0);
}
function __Z9normalizeRK7Vector3($agg$result,$a) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = (+__Z6lengthRK7Vector3($1));
 $3 = $2 > 0.0;
 if ($3) {
  $4 = $0;
  $5 = $0;
  $6 = (+__Z6lengthRK7Vector3($5));
  $7 = 1.0 / $6;
  __ZmlRK7Vector3f($agg$result,$4,$7);
  STACKTOP = sp;return;
 } else {
  HEAPF32[$agg$result>>2] = 0.0;
  $8 = ((($agg$result)) + 4|0);
  HEAPF32[$8>>2] = 0.0;
  $9 = ((($agg$result)) + 8|0);
  HEAPF32[$9>>2] = 0.0;
  STACKTOP = sp;return;
 }
}
function __ZmlfRK7Vector3($agg$result,$f,$a) {
 $agg$result = $agg$result|0;
 $f = +$f;
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $a;
 $2 = $1;
 $3 = $0;
 __ZmlRK7Vector3f($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZmlRK7Vector3f($agg$result,$a,$f) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $f;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 * $4;
 HEAPF32[$agg$result>>2] = $5;
 $6 = ((($agg$result)) + 4|0);
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = $9 * $10;
 HEAPF32[$6>>2] = $11;
 $12 = ((($agg$result)) + 8|0);
 $13 = $0;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $1;
 $17 = $15 * $16;
 HEAPF32[$12>>2] = $17;
 STACKTOP = sp;return;
}
function __ZpLR7Vector3RKS_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $0 = $a;
 $1 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 __ZplRK7Vector3S1_($2,$4,$5);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __Z6randomff($min,$max) {
 $min = +$min;
 $max = +$max;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $min;
 $1 = $max;
 $2 = (_rand()|0);
 $3 = (+($2|0));
 $4 = $3 / 2147483648.0;
 $5 = $1;
 $6 = $0;
 $7 = $5 - $6;
 $8 = $4 * $7;
 $9 = $0;
 $10 = $8 + $9;
 STACKTOP = sp;return (+$10);
}
function __ZmLR7Vector2f($a,$b) {
 $a = $a|0;
 $b = +$b;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $a;
 $1 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 __ZmlRK7Vector2f($2,$4,$5);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZL21create_smoke_particleiRK7Vector3($agg$result,$tex,$position) {
 $agg$result = $agg$result|0;
 $tex = $tex|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $tex;
 $1 = $position;
 dest=$agg$result; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = $1;
 ;HEAP32[$agg$result>>2]=HEAP32[$3>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$3+8>>2]|0;
 $4 = (_rand()|0);
 $5 = (+($4|0));
 $6 = (+Math_sin((+$5)));
 $7 = 0.20000000298023224 * $6;
 $8 = ((($agg$result)) + 12|0);
 HEAPF32[$8>>2] = $7;
 $9 = (_rand()|0);
 $10 = (+($9|0));
 $11 = (+Math_sin((+$10)));
 $12 = 0.20000000298023224 * $11;
 $13 = ((($agg$result)) + 12|0);
 $14 = ((($13)) + 4|0);
 HEAPF32[$14>>2] = $12;
 $15 = (_rand()|0);
 $16 = (+($15|0));
 $17 = (+Math_sin((+$16)));
 $18 = 0.20000000298023224 * $17;
 $19 = ((($agg$result)) + 12|0);
 $20 = ((($19)) + 8|0);
 HEAPF32[$20>>2] = $18;
 $21 = ((($agg$result)) + 24|0);
 HEAPF32[$2>>2] = 0.25;
 $22 = ((($2)) + 4|0);
 HEAPF32[$22>>2] = 0.25;
 ;HEAP32[$21>>2]=HEAP32[$2>>2]|0;HEAP32[$21+4>>2]=HEAP32[$2+4>>2]|0;
 $23 = ((($agg$result)) + 24|0);
 $24 = (_rand()|0);
 $25 = (($24|0) % 8)&-1;
 $26 = (($25) - 4)|0;
 $27 = (+($26|0));
 $28 = $27 / 16.0;
 $29 = $28 + 1.0;
 (__ZmLR7Vector2f($23,$29)|0);
 $30 = $0;
 $31 = ((($agg$result)) + 32|0);
 HEAP32[$31>>2] = $30;
 $32 = (_rand()|0);
 $33 = (($32|0) % 8)&-1;
 $34 = (($33) - 4)|0;
 $35 = (+($34|0));
 $36 = $35 / 64.0;
 $37 = 1.0 + $36;
 $38 = ((($agg$result)) + 36|0);
 HEAPF32[$38>>2] = $37;
 STACKTOP = sp;return;
}
function __ZmlfRK7Vector2($agg$result,$f,$a) {
 $agg$result = $agg$result|0;
 $f = +$f;
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $a;
 $2 = $1;
 $3 = $0;
 __ZmlRK7Vector2f($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZmlRK7Vector2f($agg$result,$a,$f) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $f;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 * $4;
 HEAPF32[$agg$result>>2] = $5;
 $6 = ((($agg$result)) + 4|0);
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = $9 * $10;
 HEAPF32[$6>>2] = $11;
 STACKTOP = sp;return;
}
function __ZmIR7Vector2RKS_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $a;
 $1 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 __ZmiRK7Vector2S1_($2,$4,$5);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZL17get_portal_entityR5Levelt($agg$result,$level,$portal_id) {
 $agg$result = $agg$result|0;
 $level = $level|0;
 $portal_id = $portal_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $level;
 $1 = $portal_id;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $0;
  $4 = ((($3)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 28|0);
  $10 = (($9) + (($7*52)|0)|0);
  $e = $10;
  $11 = $e;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(5);
  if (!($13)) {
   $14 = $e;
   $15 = ((($14)) + 4|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $18 = $1;
   $19 = $18&65535;
   $20 = ($17|0)==($19|0);
   if ($20) {
    label = 5;
    break;
   }
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 if ((label|0) == 5) {
  $21 = $e;
  dest=$agg$result; src=$21; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  dest=$agg$result; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function __ZmiRK7Vector2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 HEAPF32[$agg$result>>2] = $6;
 $7 = ((($agg$result)) + 4|0);
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 - $13;
 HEAPF32[$7>>2] = $14;
 STACKTOP = sp;return;
}
function __ZplRK7Vector3S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 HEAPF32[$agg$result>>2] = $6;
 $7 = ((($agg$result)) + 4|0);
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 + $13;
 HEAPF32[$7>>2] = $14;
 $15 = ((($agg$result)) + 8|0);
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $18 + $21;
 HEAPF32[$15>>2] = $22;
 STACKTOP = sp;return;
}
function __Z9normalizeRK7Vector2($agg$result,$a) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = (+__Z6lengthRK7Vector2($1));
 $3 = $2 > 0.0;
 if ($3) {
  $4 = $0;
  $5 = $0;
  $6 = (+__Z6lengthRK7Vector2($5));
  $7 = 1.0 / $6;
  __ZmlRK7Vector2f($agg$result,$4,$7);
  STACKTOP = sp;return;
 } else {
  HEAPF32[$agg$result>>2] = 0.0;
  $8 = ((($agg$result)) + 4|0);
  HEAPF32[$8>>2] = 0.0;
  STACKTOP = sp;return;
 }
}
function __ZmLR7Vector3f($a,$b) {
 $a = $a|0;
 $b = +$b;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $0 = $a;
 $1 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 __ZmlRK7Vector3f($2,$4,$5);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __Z6lengthRK7Vector2($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $0;
 $3 = (+__Z3dotRK7Vector2S1_($1,$2));
 $4 = (+Math_sqrt((+$3)));
 STACKTOP = sp;return (+$4);
}
function __Z3dotRK7Vector2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 STACKTOP = sp;return (+$14);
}
function __ZZ21load_bitmap_from_filePKcENK3__0clEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 _stbi_image_free($3);
 STACKTOP = sp;return;
}
function __ZNSt3__17forwardIZ21load_bitmap_from_filePKcE3__0EEOT_RNS_16remove_referenceIS4_E4typeE($__t) {
 $__t = $__t|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN4impl5DeferIZ21load_bitmap_from_filePKcE3__0EC2EOS3_($this,$fn) {
 $this = $this|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fn;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNSt3__17forwardIZ21load_bitmap_from_filePKcE3__0EEOT_RNS_16remove_referenceIS4_E4typeE($3)|0);
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;
 STACKTOP = sp;return;
}
function __ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_($s,$x,$y,$comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $maxv = 0, $p = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 26|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $1;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $p = $7;
 $8 = $1;
 $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
 $t = $9;
 $10 = $p;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)!=(80);
 do {
  if (!($12)) {
   $13 = $t;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)!=(53);
   if ($15) {
    $16 = $t;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)!=(54);
    if ($18) {
     break;
    }
   }
   $20 = $t;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(54);
   $23 = $22 ? 3 : 1;
   $24 = $4;
   HEAP32[$24>>2] = $23;
   $25 = $1;
   $26 = (__ZL10stbi__get8P13stbi__context($25)|0);
   HEAP8[$c>>0] = $26;
   $27 = $1;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($27,$c);
   $28 = $1;
   $29 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($28,$c)|0);
   $30 = $2;
   HEAP32[$30>>2] = $29;
   $31 = $1;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($31,$c);
   $32 = $1;
   $33 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($32,$c)|0);
   $34 = $3;
   HEAP32[$34>>2] = $33;
   $35 = $1;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($35,$c);
   $36 = $1;
   $37 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($36,$c)|0);
   $maxv = $37;
   $38 = $maxv;
   $39 = ($38|0)>(255);
   if ($39) {
    $40 = (__ZL9stbi__errPKc(1504)|0);
    $0 = $40;
    $41 = $0;
    STACKTOP = sp;return ($41|0);
   } else {
    $0 = 1;
    $41 = $0;
    STACKTOP = sp;return ($41|0);
   }
  }
 } while(0);
 $19 = $1;
 __ZL12stbi__rewindP13stbi__context($19);
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function __ZL10stbi__get8P13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = ((($2)) + 168|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 172|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 168|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 1|0);
  HEAP32[$10>>2] = $12;
  $13 = HEAP8[$11>>0]|0;
  $0 = $13;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $14 = ((($9)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $1;
  __ZL19stbi__refill_bufferP13stbi__context($17);
  $18 = $1;
  $19 = ((($18)) + 168|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $21;
  $22 = HEAP8[$20>>0]|0;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZL12stbi__rewindP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = ((($1)) + 176|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 168|0);
 HEAP32[$5>>2] = $3;
 STACKTOP = sp;return;
}
function __ZL10stbi__skipP13stbi__contexti($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)<(0);
 $4 = $0;
 if ($3) {
  $5 = ((($4)) + 172|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $0;
  $8 = ((($7)) + 168|0);
  HEAP32[$8>>2] = $6;
  STACKTOP = sp;return;
 }
 $9 = ((($4)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 172|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = ((($15)) + 168|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $blen = $20;
  $21 = $blen;
  $22 = $1;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $24 = $0;
   $25 = ((($24)) + 172|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $0;
   $28 = ((($27)) + 168|0);
   HEAP32[$28>>2] = $26;
   $29 = $0;
   $30 = ((($29)) + 16|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $0;
   $34 = ((($33)) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = $blen;
   $38 = (($36) - ($37))|0;
   FUNCTION_TABLE_vii[$32 & 63]($35,$38);
   STACKTOP = sp;return;
  }
 }
 $39 = $1;
 $40 = $0;
 $41 = ((($40)) + 168|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($39)|0);
 HEAP32[$41>>2] = $43;
 STACKTOP = sp;return;
}
function __ZL13stbi__get16leP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL10stbi__get8P13stbi__context($1)|0);
 $3 = $2&255;
 $z = $3;
 $4 = $z;
 $5 = $0;
 $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
 $7 = $6&255;
 $8 = $7 << 8;
 $9 = (($4) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function __ZL19stbi__refill_bufferP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 40|0);
 $9 = $0;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$3 & 31]($6,$8,$11)|0);
 $n = $12;
 $13 = $n;
 $14 = ($13|0)==(0);
 $15 = $0;
 if ($14) {
  $16 = ((($15)) + 32|0);
  HEAP32[$16>>2] = 0;
  $17 = $0;
  $18 = ((($17)) + 40|0);
  $19 = $0;
  $20 = ((($19)) + 168|0);
  HEAP32[$20>>2] = $18;
  $21 = $0;
  $22 = ((($21)) + 40|0);
  $23 = ((($22)) + 1|0);
  $24 = $0;
  $25 = ((($24)) + 172|0);
  HEAP32[$25>>2] = $23;
  $26 = $0;
  $27 = ((($26)) + 168|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP8[$28>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $29 = ((($15)) + 40|0);
  $30 = $0;
  $31 = ((($30)) + 168|0);
  HEAP32[$31>>2] = $29;
  $32 = $0;
  $33 = ((($32)) + 40|0);
  $34 = $n;
  $35 = (($33) + ($34)|0);
  $36 = $0;
  $37 = ((($36)) + 172|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 }
}
function __ZL18stbi__hdr_gettokenP13stbi__contextPc($z,$buffer) {
 $z = $z|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $buffer;
 $len = 0;
 $c = 0;
 $2 = $0;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $c = $3;
 while(1) {
  $4 = $0;
  $5 = (__ZL12stbi__at_eofP13stbi__context($4)|0);
  $6 = ($5|0)!=(0);
  if ($6) {
   break;
  }
  $7 = $c;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(10);
  if (!($9)) {
   break;
  }
  $10 = $c;
  $11 = $len;
  $12 = (($11) + 1)|0;
  $len = $12;
  $13 = $1;
  $14 = (($13) + ($11)|0);
  HEAP8[$14>>0] = $10;
  $15 = $len;
  $16 = ($15|0)==(1023);
  if ($16) {
   label = 5;
   break;
  }
  $24 = $0;
  $25 = (__ZL10stbi__get8P13stbi__context($24)|0);
  $c = $25;
 }
 L6: do {
  if ((label|0) == 5) {
   while(1) {
    label = 0;
    $17 = $0;
    $18 = (__ZL12stbi__at_eofP13stbi__context($17)|0);
    $19 = ($18|0)!=(0);
    if ($19) {
     break L6;
    }
    $20 = $0;
    $21 = (__ZL10stbi__get8P13stbi__context($20)|0);
    $22 = $21&255;
    $23 = ($22|0)!=(10);
    if ($23) {
     label = 5;
    } else {
     break;
    }
   }
  }
 } while(0);
 $26 = $len;
 $27 = $1;
 $28 = (($27) + ($26)|0);
 HEAP8[$28>>0] = 0;
 $29 = $1;
 STACKTOP = sp;return ($29|0);
}
function __ZL12stbi__at_eofP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 16|0);
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_ii[$9 & 31]($12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $0 = 0;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
  $15 = $1;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $0 = 1;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
 }
 $19 = $1;
 $20 = ((($19)) + 168|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = ((($22)) + 172|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21>>>0)>=($24>>>0);
 $26 = $25&1;
 $0 = $26;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $c;
 while(1) {
  $2 = $0;
  $3 = (__ZL12stbi__at_eofP13stbi__context($2)|0);
  $4 = ($3|0)!=(0);
  if ($4) {
   label = 5;
   break;
  }
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = (__ZL17stbi__pnm_isspacec($6)|0);
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = $0;
  $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
  $11 = $1;
  HEAP8[$11>>0] = $10;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function __ZL20stbi__pnm_getintegerP13stbi__contextPc($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $c;
 $value = 0;
 while(1) {
  $2 = $0;
  $3 = (__ZL12stbi__at_eofP13stbi__context($2)|0);
  $4 = ($3|0)!=(0);
  if ($4) {
   $19 = 0;
  } else {
   $5 = $1;
   $6 = HEAP8[$5>>0]|0;
   $7 = (__ZL17stbi__pnm_isdigitc($6)|0);
   $8 = ($7|0)!=(0);
   $19 = $8;
  }
  $9 = $value;
  if (!($19)) {
   break;
  }
  $10 = ($9*10)|0;
  $11 = $1;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = (($13) - 48)|0;
  $15 = (($10) + ($14))|0;
  $value = $15;
  $16 = $0;
  $17 = (__ZL10stbi__get8P13stbi__context($16)|0);
  $18 = $1;
  HEAP8[$18>>0] = $17;
 }
 STACKTOP = sp;return ($9|0);
}
function __ZL17stbi__pnm_isdigitc($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)>=(48);
 if ($3) {
  $4 = $0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)<=(57);
  $8 = $6;
 } else {
  $8 = 0;
 }
 $7 = $8&1;
 STACKTOP = sp;return ($7|0);
}
function __ZL17stbi__pnm_isspacec($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)==(32);
 if ($3) {
  $20 = 1;
 } else {
  $4 = $0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)==(9);
  if ($6) {
   $20 = 1;
  } else {
   $7 = $0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)==(10);
   if ($9) {
    $20 = 1;
   } else {
    $10 = $0;
    $11 = $10 << 24 >> 24;
    $12 = ($11|0)==(11);
    if ($12) {
     $20 = 1;
    } else {
     $13 = $0;
     $14 = $13 << 24 >> 24;
     $15 = ($14|0)==(12);
     if ($15) {
      $20 = 1;
     } else {
      $16 = $0;
      $17 = $16 << 24 >> 24;
      $18 = ($17|0)==(13);
      $20 = $18;
     }
    }
   }
  }
 }
 $19 = $20&1;
 STACKTOP = sp;return ($19|0);
}
function __ZL13stbi__get16beP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL10stbi__get8P13stbi__context($1)|0);
 $3 = $2&255;
 $z = $3;
 $4 = $z;
 $5 = $4 << 8;
 $6 = $0;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = (($5) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function __ZL13stbi__get32beP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get16beP13stbi__context($1)|0);
 $z = $2;
 $3 = $z;
 $4 = $3 << 16;
 $5 = $0;
 $6 = (__ZL13stbi__get16beP13stbi__context($5)|0);
 $7 = (($4) + ($6))|0;
 STACKTOP = sp;return ($7|0);
}
function __ZL13stbi__get32leP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get16leP13stbi__context($1)|0);
 $z = $2;
 $3 = $z;
 $4 = $0;
 $5 = (__ZL13stbi__get16leP13stbi__context($4)|0);
 $6 = $5 << 16;
 $7 = (($3) + ($6))|0;
 STACKTOP = sp;return ($7|0);
}
function __ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii($s,$g,$comp,$is_info) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $is_info = $is_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $version = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $g;
 $3 = $comp;
 $4 = $is_info;
 $5 = $1;
 $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
 $7 = $6&255;
 $8 = ($7|0)!=(71);
 if (!($8)) {
  $9 = $1;
  $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
  $11 = $10&255;
  $12 = ($11|0)!=(73);
  if (!($12)) {
   $13 = $1;
   $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
   $15 = $14&255;
   $16 = ($15|0)!=(70);
   if (!($16)) {
    $17 = $1;
    $18 = (__ZL10stbi__get8P13stbi__context($17)|0);
    $19 = $18&255;
    $20 = ($19|0)!=(56);
    if (!($20)) {
     $22 = $1;
     $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
     $version = $23;
     $24 = $version;
     $25 = $24&255;
     $26 = ($25|0)!=(55);
     if ($26) {
      $27 = $version;
      $28 = $27&255;
      $29 = ($28|0)!=(57);
      if ($29) {
       $30 = (__ZL9stbi__errPKc(1520)|0);
       $0 = $30;
       $78 = $0;
       STACKTOP = sp;return ($78|0);
      }
     }
     $31 = $1;
     $32 = (__ZL10stbi__get8P13stbi__context($31)|0);
     $33 = $32&255;
     $34 = ($33|0)!=(97);
     if ($34) {
      $35 = (__ZL9stbi__errPKc(1520)|0);
      $0 = $35;
      $78 = $0;
      STACKTOP = sp;return ($78|0);
     }
     HEAP32[72>>2] = 1528;
     $36 = $1;
     $37 = (__ZL13stbi__get16leP13stbi__context($36)|0);
     $38 = $2;
     HEAP32[$38>>2] = $37;
     $39 = $1;
     $40 = (__ZL13stbi__get16leP13stbi__context($39)|0);
     $41 = $2;
     $42 = ((($41)) + 4|0);
     HEAP32[$42>>2] = $40;
     $43 = $1;
     $44 = (__ZL10stbi__get8P13stbi__context($43)|0);
     $45 = $44&255;
     $46 = $2;
     $47 = ((($46)) + 12|0);
     HEAP32[$47>>2] = $45;
     $48 = $1;
     $49 = (__ZL10stbi__get8P13stbi__context($48)|0);
     $50 = $49&255;
     $51 = $2;
     $52 = ((($51)) + 16|0);
     HEAP32[$52>>2] = $50;
     $53 = $1;
     $54 = (__ZL10stbi__get8P13stbi__context($53)|0);
     $55 = $54&255;
     $56 = $2;
     $57 = ((($56)) + 20|0);
     HEAP32[$57>>2] = $55;
     $58 = $2;
     $59 = ((($58)) + 24|0);
     HEAP32[$59>>2] = -1;
     $60 = $3;
     $61 = ($60|0)!=(0|0);
     if ($61) {
      $62 = $3;
      HEAP32[$62>>2] = 4;
     }
     $63 = $4;
     $64 = ($63|0)!=(0);
     if ($64) {
      $0 = 1;
      $78 = $0;
      STACKTOP = sp;return ($78|0);
     }
     $65 = $2;
     $66 = ((($65)) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $67 & 128;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = $1;
      $71 = $2;
      $72 = ((($71)) + 32|0);
      $73 = $2;
      $74 = ((($73)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $75 & 7;
      $77 = 2 << $76;
      __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($70,$72,$77,-1);
     }
     $0 = 1;
     $78 = $0;
     STACKTOP = sp;return ($78|0);
    }
   }
  }
 }
 $21 = (__ZL9stbi__errPKc(1520)|0);
 $0 = $21;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($s,$pal,$num_entries,$transp) {
 $s = $s|0;
 $pal = $pal|0;
 $num_entries = $num_entries|0;
 $transp = $transp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $pal;
 $2 = $num_entries;
 $3 = $transp;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $2;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = (__ZL10stbi__get8P13stbi__context($7)|0);
  $9 = $i;
  $10 = $1;
  $11 = (($10) + ($9<<2)|0);
  $12 = ((($11)) + 2|0);
  HEAP8[$12>>0] = $8;
  $13 = $0;
  $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
  $15 = $i;
  $16 = $1;
  $17 = (($16) + ($15<<2)|0);
  $18 = ((($17)) + 1|0);
  HEAP8[$18>>0] = $14;
  $19 = $0;
  $20 = (__ZL10stbi__get8P13stbi__context($19)|0);
  $21 = $i;
  $22 = $1;
  $23 = (($22) + ($21<<2)|0);
  HEAP8[$23>>0] = $20;
  $24 = $3;
  $25 = $i;
  $26 = ($24|0)==($25|0);
  $27 = $26 ? 0 : 255;
  $28 = $27&255;
  $29 = $i;
  $30 = $1;
  $31 = (($30) + ($29<<2)|0);
  $32 = ((($31)) + 3|0);
  HEAP8[$32>>0] = $28;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 STACKTOP = sp;return;
}
function __ZL20stbi__parse_png_fileP9stbi__pngii($z,$scan,$req_comp) {
 $z = $z|0;
 $scan = $scan|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bpl = 0, $c = 0, $color = 0;
 var $comp = 0, $depth = 0, $filter = 0, $first = 0, $has_trans = 0, $i = 0, $idata_limit = 0, $interlace = 0, $ioff = 0, $is_iphone = 0, $k = 0, $or$cond = 0, $or$cond11 = 0, $or$cond11$not = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $or$cond9$not = 0, $p = 0, $pal_img_n = 0, $pal_len = 0, $palette = 0, $raw_len = 0, $s = 0, $tc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $palette = sp + 88|0;
 $tc = sp + 1114|0;
 $c = sp + 24|0;
 $raw_len = sp + 44|0;
 $1 = $z;
 $2 = $scan;
 $3 = $req_comp;
 $pal_img_n = 0;
 $has_trans = 0;
 $ioff = 0;
 $idata_limit = 0;
 $pal_len = 0;
 $first = 1;
 $interlace = 0;
 $color = 0;
 $depth = 0;
 $is_iphone = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $s = $5;
 $6 = $1;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = $s;
 $13 = (__ZL22stbi__check_png_headerP13stbi__context($12)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $0 = 0;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 $15 = $2;
 $16 = ($15|0)==(1);
 if ($16) {
  $0 = 1;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 L8: while(1) {
  $17 = $s;
  __ZL22stbi__get_chunk_headerP13stbi__context($c,$17);
  $18 = ((($c)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  L10: do {
   if ((($19|0) == 1229278788)) {
    label = 88;
    break L8;
   } else if ((($19|0) == 1229472850)) {
    $22 = $first;
    $23 = ($22|0)!=(0);
    if (!($23)) {
     label = 8;
     break L8;
    }
    $first = 0;
    $25 = HEAP32[$c>>2]|0;
    $26 = ($25|0)!=(13);
    if ($26) {
     label = 10;
     break L8;
    }
    $28 = $s;
    $29 = (__ZL13stbi__get32beP13stbi__context($28)|0);
    $30 = $s;
    HEAP32[$30>>2] = $29;
    $31 = $s;
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32>>>0)>(16777216);
    if ($33) {
     label = 12;
     break L8;
    }
    $35 = $s;
    $36 = (__ZL13stbi__get32beP13stbi__context($35)|0);
    $37 = $s;
    $38 = ((($37)) + 4|0);
    HEAP32[$38>>2] = $36;
    $39 = $s;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41>>>0)>(16777216);
    if ($42) {
     label = 14;
     break L8;
    }
    $44 = $s;
    $45 = (__ZL10stbi__get8P13stbi__context($44)|0);
    $46 = $45&255;
    $depth = $46;
    $47 = $depth;
    $48 = ($47|0)!=(1);
    $49 = $depth;
    $50 = ($49|0)!=(2);
    $or$cond = $48 & $50;
    $51 = $depth;
    $52 = ($51|0)!=(4);
    $or$cond3 = $or$cond & $52;
    $53 = $depth;
    $54 = ($53|0)!=(8);
    $or$cond5 = $or$cond3 & $54;
    if ($or$cond5) {
     label = 16;
     break L8;
    }
    $56 = $s;
    $57 = (__ZL10stbi__get8P13stbi__context($56)|0);
    $58 = $57&255;
    $color = $58;
    $59 = $color;
    $60 = ($59|0)>(6);
    if ($60) {
     label = 18;
     break L8;
    }
    $62 = $color;
    $63 = ($62|0)==(3);
    if ($63) {
     $pal_img_n = 3;
    } else {
     $64 = $color;
     $65 = $64 & 1;
     $66 = ($65|0)!=(0);
     if ($66) {
      label = 22;
      break L8;
     }
    }
    $68 = $s;
    $69 = (__ZL10stbi__get8P13stbi__context($68)|0);
    $70 = $69&255;
    $comp = $70;
    $71 = $comp;
    $72 = ($71|0)!=(0);
    if ($72) {
     label = 24;
     break L8;
    }
    $74 = $s;
    $75 = (__ZL10stbi__get8P13stbi__context($74)|0);
    $76 = $75&255;
    $filter = $76;
    $77 = $filter;
    $78 = ($77|0)!=(0);
    if ($78) {
     label = 26;
     break L8;
    }
    $80 = $s;
    $81 = (__ZL10stbi__get8P13stbi__context($80)|0);
    $82 = $81&255;
    $interlace = $82;
    $83 = $interlace;
    $84 = ($83|0)>(1);
    if ($84) {
     label = 28;
     break L8;
    }
    $86 = $s;
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)!=(0);
    if (!($88)) {
     label = 31;
     break L8;
    }
    $89 = $s;
    $90 = ((($89)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)!=(0);
    if (!($92)) {
     label = 31;
     break L8;
    }
    $94 = $pal_img_n;
    $95 = ($94<<24>>24)!=(0);
    if ($95) {
     $121 = $s;
     $122 = ((($121)) + 8|0);
     HEAP32[$122>>2] = 1;
     $123 = $s;
     $124 = HEAP32[$123>>2]|0;
     $125 = (1073741824 / ($124>>>0))&-1;
     $126 = (($125>>>0) / 4)&-1;
     $127 = $s;
     $128 = ((($127)) + 4|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($126>>>0)<($129>>>0);
     if ($130) {
      label = 38;
      break L8;
     } else {
      break;
     }
    }
    $96 = $color;
    $97 = $96 & 2;
    $98 = ($97|0)!=(0);
    $99 = $98 ? 3 : 1;
    $100 = $color;
    $101 = $100 & 4;
    $102 = ($101|0)!=(0);
    $103 = $102 ? 1 : 0;
    $104 = (($99) + ($103))|0;
    $105 = $s;
    $106 = ((($105)) + 8|0);
    HEAP32[$106>>2] = $104;
    $107 = $s;
    $108 = HEAP32[$107>>2]|0;
    $109 = (1073741824 / ($108>>>0))&-1;
    $110 = $s;
    $111 = ((($110)) + 8|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($109>>>0) / ($112>>>0))&-1;
    $114 = $s;
    $115 = ((($114)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($113>>>0)<($116>>>0);
    if ($117) {
     label = 34;
     break L8;
    }
    $119 = $2;
    $120 = ($119|0)==(2);
    if ($120) {
     label = 36;
     break L8;
    }
   } else if ((($19|0) == 1130840649)) {
    $is_iphone = 1;
    $20 = $s;
    $21 = HEAP32[$c>>2]|0;
    __ZL10stbi__skipP13stbi__contexti($20,$21);
   } else if ((($19|0) == 1347179589)) {
    $132 = $first;
    $133 = ($132|0)!=(0);
    if ($133) {
     label = 40;
     break L8;
    }
    $135 = HEAP32[$c>>2]|0;
    $136 = ($135>>>0)>(768);
    if ($136) {
     label = 42;
     break L8;
    }
    $138 = HEAP32[$c>>2]|0;
    $139 = (($138>>>0) / 3)&-1;
    $pal_len = $139;
    $140 = $pal_len;
    $141 = ($140*3)|0;
    $142 = HEAP32[$c>>2]|0;
    $143 = ($141|0)!=($142|0);
    if ($143) {
     label = 44;
     break L8;
    }
    $i = 0;
    while(1) {
     $145 = $i;
     $146 = $pal_len;
     $147 = ($145>>>0)<($146>>>0);
     if (!($147)) {
      break L10;
     }
     $148 = $s;
     $149 = (__ZL10stbi__get8P13stbi__context($148)|0);
     $150 = $i;
     $151 = $150<<2;
     $152 = (($151) + 0)|0;
     $153 = (($palette) + ($152)|0);
     HEAP8[$153>>0] = $149;
     $154 = $s;
     $155 = (__ZL10stbi__get8P13stbi__context($154)|0);
     $156 = $i;
     $157 = $156<<2;
     $158 = (($157) + 1)|0;
     $159 = (($palette) + ($158)|0);
     HEAP8[$159>>0] = $155;
     $160 = $s;
     $161 = (__ZL10stbi__get8P13stbi__context($160)|0);
     $162 = $i;
     $163 = $162<<2;
     $164 = (($163) + 2)|0;
     $165 = (($palette) + ($164)|0);
     HEAP8[$165>>0] = $161;
     $166 = $i;
     $167 = $166<<2;
     $168 = (($167) + 3)|0;
     $169 = (($palette) + ($168)|0);
     HEAP8[$169>>0] = -1;
     $170 = $i;
     $171 = (($170) + 1)|0;
     $i = $171;
    }
   } else if ((($19|0) == 1951551059)) {
    $172 = $first;
    $173 = ($172|0)!=(0);
    if ($173) {
     label = 49;
     break L8;
    }
    $175 = $1;
    $176 = ((($175)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)!=(0|0);
    if ($178) {
     label = 51;
     break L8;
    }
    $180 = $pal_img_n;
    $181 = ($180<<24>>24)!=(0);
    if (!($181)) {
     $204 = $s;
     $205 = ((($204)) + 8|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = $206 & 1;
     $208 = ($207|0)!=(0);
     if (!($208)) {
      label = 63;
      break L8;
     }
     $210 = HEAP32[$c>>2]|0;
     $211 = $s;
     $212 = ((($211)) + 8|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $213<<1;
     $215 = ($210|0)!=($214|0);
     if ($215) {
      label = 65;
      break L8;
     }
     $has_trans = 1;
     $k = 0;
     while(1) {
      $217 = $k;
      $218 = $s;
      $219 = ((($218)) + 8|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = ($217|0)<($220|0);
      if (!($221)) {
       break L10;
      }
      $222 = $s;
      $223 = (__ZL13stbi__get16beP13stbi__context($222)|0);
      $224 = $223 & 255;
      $225 = $224&255;
      $226 = $225&255;
      $227 = $depth;
      $228 = (1808 + ($227)|0);
      $229 = HEAP8[$228>>0]|0;
      $230 = $229&255;
      $231 = Math_imul($226, $230)|0;
      $232 = $231&255;
      $233 = $k;
      $234 = (($tc) + ($233)|0);
      HEAP8[$234>>0] = $232;
      $235 = $k;
      $236 = (($235) + 1)|0;
      $k = $236;
     }
    }
    $182 = $2;
    $183 = ($182|0)==(2);
    if ($183) {
     label = 54;
     break L8;
    }
    $186 = $pal_len;
    $187 = ($186|0)==(0);
    if ($187) {
     label = 56;
     break L8;
    }
    $189 = HEAP32[$c>>2]|0;
    $190 = $pal_len;
    $191 = ($189>>>0)>($190>>>0);
    if ($191) {
     label = 58;
     break L8;
    }
    $pal_img_n = 4;
    $i = 0;
    while(1) {
     $193 = $i;
     $194 = HEAP32[$c>>2]|0;
     $195 = ($193>>>0)<($194>>>0);
     if (!($195)) {
      break L10;
     }
     $196 = $s;
     $197 = (__ZL10stbi__get8P13stbi__context($196)|0);
     $198 = $i;
     $199 = $198<<2;
     $200 = (($199) + 3)|0;
     $201 = (($palette) + ($200)|0);
     HEAP8[$201>>0] = $197;
     $202 = $i;
     $203 = (($202) + 1)|0;
     $i = $203;
    }
   } else if ((($19|0) == 1229209940)) {
    $237 = $first;
    $238 = ($237|0)!=(0);
    if ($238) {
     label = 70;
     break L8;
    }
    $240 = $pal_img_n;
    $241 = ($240<<24>>24)==(0);
    $242 = $pal_len;
    $243 = ($242|0)!=(0);
    $or$cond7 = $241 | $243;
    if (!($or$cond7)) {
     label = 72;
     break L8;
    }
    $245 = $2;
    $246 = ($245|0)==(2);
    if ($246) {
     label = 74;
     break L8;
    }
    $251 = $ioff;
    $252 = HEAP32[$c>>2]|0;
    $253 = (($251) + ($252))|0;
    $254 = $ioff;
    $255 = ($253|0)<($254|0);
    if ($255) {
     label = 76;
     break L8;
    }
    $256 = $ioff;
    $257 = HEAP32[$c>>2]|0;
    $258 = (($256) + ($257))|0;
    $259 = $idata_limit;
    $260 = ($258>>>0)>($259>>>0);
    if ($260) {
     $261 = $idata_limit;
     $262 = ($261|0)==(0);
     if ($262) {
      $263 = HEAP32[$c>>2]|0;
      $264 = ($263>>>0)>(4096);
      $265 = HEAP32[$c>>2]|0;
      $266 = $264 ? $265 : 4096;
      $idata_limit = $266;
     }
     while(1) {
      $267 = $ioff;
      $268 = HEAP32[$c>>2]|0;
      $269 = (($267) + ($268))|0;
      $270 = $idata_limit;
      $271 = ($269>>>0)>($270>>>0);
      if (!($271)) {
       break;
      }
      $272 = $idata_limit;
      $273 = $272<<1;
      $idata_limit = $273;
     }
     $274 = $1;
     $275 = ((($274)) + 4|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $idata_limit;
     $278 = (_realloc($276,$277)|0);
     $p = $278;
     $279 = $p;
     $280 = ($279|0)==(0|0);
     if ($280) {
      label = 83;
      break L8;
     }
     $282 = $p;
     $283 = $1;
     $284 = ((($283)) + 4|0);
     HEAP32[$284>>2] = $282;
    }
    $285 = $s;
    $286 = $1;
    $287 = ((($286)) + 4|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $ioff;
    $290 = (($288) + ($289)|0);
    $291 = HEAP32[$c>>2]|0;
    $292 = (__ZL10stbi__getnP13stbi__contextPhi($285,$290,$291)|0);
    $293 = ($292|0)!=(0);
    if (!($293)) {
     label = 86;
     break L8;
    }
    $295 = HEAP32[$c>>2]|0;
    $296 = $ioff;
    $297 = (($296) + ($295))|0;
    $ioff = $297;
   } else {
    $425 = $first;
    $426 = ($425|0)!=(0);
    if ($426) {
     label = 114;
     break L8;
    }
    $428 = ((($c)) + 4|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $429 & 536870912;
    $431 = ($430|0)==(0);
    if ($431) {
     label = 116;
     break L8;
    }
    $453 = $s;
    $454 = HEAP32[$c>>2]|0;
    __ZL10stbi__skipP13stbi__contexti($453,$454);
   }
  } while(0);
  $455 = $s;
  (__ZL13stbi__get32beP13stbi__context($455)|0);
 }
 switch (label|0) {
  case 8: {
   $24 = (__ZL9stbi__errPKc(1536)|0);
   $0 = $24;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 10: {
   $27 = (__ZL9stbi__errPKc(1552)|0);
   $0 = $27;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 12: {
   $34 = (__ZL9stbi__errPKc(1568)|0);
   $0 = $34;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 14: {
   $43 = (__ZL9stbi__errPKc(1568)|0);
   $0 = $43;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 16: {
   $55 = (__ZL9stbi__errPKc(1584)|0);
   $0 = $55;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 18: {
   $61 = (__ZL9stbi__errPKc(1608)|0);
   $0 = $61;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 22: {
   $67 = (__ZL9stbi__errPKc(1608)|0);
   $0 = $67;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 24: {
   $73 = (__ZL9stbi__errPKc(1624)|0);
   $0 = $73;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 26: {
   $79 = (__ZL9stbi__errPKc(1640)|0);
   $0 = $79;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 28: {
   $85 = (__ZL9stbi__errPKc(1664)|0);
   $0 = $85;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 31: {
   $93 = (__ZL9stbi__errPKc(1688)|0);
   $0 = $93;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 34: {
   $118 = (__ZL9stbi__errPKc(1568)|0);
   $0 = $118;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 36: {
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 38: {
   $131 = (__ZL9stbi__errPKc(1568)|0);
   $0 = $131;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 40: {
   $134 = (__ZL9stbi__errPKc(1704)|0);
   $0 = $134;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 42: {
   $137 = (__ZL9stbi__errPKc(1720)|0);
   $0 = $137;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 44: {
   $144 = (__ZL9stbi__errPKc(1720)|0);
   $0 = $144;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 49: {
   $174 = (__ZL9stbi__errPKc(1704)|0);
   $0 = $174;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 51: {
   $179 = (__ZL9stbi__errPKc(1736)|0);
   $0 = $179;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 54: {
   $184 = $s;
   $185 = ((($184)) + 8|0);
   HEAP32[$185>>2] = 4;
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 56: {
   $188 = (__ZL9stbi__errPKc(1752)|0);
   $0 = $188;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 58: {
   $192 = (__ZL9stbi__errPKc(1776)|0);
   $0 = $192;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 63: {
   $209 = (__ZL9stbi__errPKc(1792)|0);
   $0 = $209;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 65: {
   $216 = (__ZL9stbi__errPKc(1776)|0);
   $0 = $216;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 70: {
   $239 = (__ZL9stbi__errPKc(1704)|0);
   $0 = $239;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 72: {
   $244 = (__ZL9stbi__errPKc(1824)|0);
   $0 = $244;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 74: {
   $247 = $pal_img_n;
   $248 = $247&255;
   $249 = $s;
   $250 = ((($249)) + 8|0);
   HEAP32[$250>>2] = $248;
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 76: {
   $0 = 0;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 83: {
   $281 = (__ZL9stbi__errPKc(1832)|0);
   $0 = $281;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 86: {
   $294 = (__ZL9stbi__errPKc(1848)|0);
   $0 = $294;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 88: {
   $298 = $first;
   $299 = ($298|0)!=(0);
   if ($299) {
    $300 = (__ZL9stbi__errPKc(1704)|0);
    $0 = $300;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $301 = $2;
   $302 = ($301|0)!=(0);
   if ($302) {
    $0 = 1;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $303 = $1;
   $304 = ((($303)) + 4|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ($305|0)==(0|0);
   if ($306) {
    $307 = (__ZL9stbi__errPKc(1864)|0);
    $0 = $307;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $308 = $s;
   $309 = HEAP32[$308>>2]|0;
   $310 = $depth;
   $311 = Math_imul($309, $310)|0;
   $312 = (($311) + 7)|0;
   $313 = (($312>>>0) / 8)&-1;
   $bpl = $313;
   $314 = $bpl;
   $315 = $s;
   $316 = ((($315)) + 4|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = Math_imul($314, $317)|0;
   $319 = $s;
   $320 = ((($319)) + 8|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = Math_imul($318, $321)|0;
   $323 = $s;
   $324 = ((($323)) + 4|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($322) + ($325))|0;
   HEAP32[$raw_len>>2] = $326;
   $327 = $1;
   $328 = ((($327)) + 4|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = $ioff;
   $331 = HEAP32[$raw_len>>2]|0;
   $332 = $is_iphone;
   $333 = ($332|0)!=(0);
   $334 = $333 ^ 1;
   $335 = $334&1;
   $336 = (_stbi_zlib_decode_malloc_guesssize_headerflag($329,$330,$331,$raw_len,$335)|0);
   $337 = $1;
   $338 = ((($337)) + 8|0);
   HEAP32[$338>>2] = $336;
   $339 = $1;
   $340 = ((($339)) + 8|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ($341|0)==(0|0);
   if ($342) {
    $0 = 0;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $343 = $1;
   $344 = ((($343)) + 4|0);
   $345 = HEAP32[$344>>2]|0;
   _free($345);
   $346 = $1;
   $347 = ((($346)) + 4|0);
   HEAP32[$347>>2] = 0;
   $348 = $3;
   $349 = $s;
   $350 = ((($349)) + 8|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = (($351) + 1)|0;
   $353 = ($348|0)==($352|0);
   $354 = $3;
   $355 = ($354|0)!=(3);
   $or$cond9 = $353 & $355;
   $or$cond9$not = $or$cond9 ^ 1;
   $356 = $pal_img_n;
   $357 = ($356<<24>>24)!=(0);
   $or$cond11 = $or$cond9$not | $357;
   $or$cond11$not = $or$cond11 ^ 1;
   $358 = $has_trans;
   $359 = ($358<<24>>24)!=(0);
   $or$cond13 = $or$cond11$not | $359;
   $360 = $s;
   $361 = ((($360)) + 8|0);
   $362 = HEAP32[$361>>2]|0;
   if ($or$cond13) {
    $363 = (($362) + 1)|0;
    $364 = $s;
    $365 = ((($364)) + 12|0);
    HEAP32[$365>>2] = $363;
   } else {
    $366 = $s;
    $367 = ((($366)) + 12|0);
    HEAP32[$367>>2] = $362;
   }
   $368 = $1;
   $369 = $1;
   $370 = ((($369)) + 8|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = HEAP32[$raw_len>>2]|0;
   $373 = $s;
   $374 = ((($373)) + 12|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = $depth;
   $377 = $color;
   $378 = $interlace;
   $379 = (__ZL22stbi__create_png_imageP9stbi__pngPhjiiii($368,$371,$372,$375,$376,$377,$378)|0);
   $380 = ($379|0)!=(0);
   if (!($380)) {
    $0 = 0;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $381 = $has_trans;
   $382 = ($381<<24>>24)!=(0);
   if ($382) {
    $383 = $1;
    $384 = $s;
    $385 = ((($384)) + 12|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = (__ZL26stbi__compute_transparencyP9stbi__pngPhi($383,$tc,$386)|0);
    $388 = ($387|0)!=(0);
    if (!($388)) {
     $0 = 0;
     $456 = $0;
     STACKTOP = sp;return ($456|0);
    }
   }
   $389 = $is_iphone;
   $390 = ($389|0)!=(0);
   $391 = HEAP32[136>>2]|0;
   $392 = ($391|0)!=(0);
   $or$cond15 = $390 & $392;
   if ($or$cond15) {
    $393 = $s;
    $394 = ((($393)) + 12|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ($395|0)>(2);
    if ($396) {
     $397 = $1;
     __ZL15stbi__de_iphoneP9stbi__png($397);
    }
   }
   $398 = $pal_img_n;
   $399 = ($398<<24>>24)!=(0);
   if ($399) {
    $400 = $pal_img_n;
    $401 = $400&255;
    $402 = $s;
    $403 = ((($402)) + 8|0);
    HEAP32[$403>>2] = $401;
    $404 = $pal_img_n;
    $405 = $404&255;
    $406 = $s;
    $407 = ((($406)) + 12|0);
    HEAP32[$407>>2] = $405;
    $408 = $3;
    $409 = ($408|0)>=(3);
    if ($409) {
     $410 = $3;
     $411 = $s;
     $412 = ((($411)) + 12|0);
     HEAP32[$412>>2] = $410;
    }
    $413 = $1;
    $414 = $pal_len;
    $415 = $s;
    $416 = ((($415)) + 12|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = (__ZL24stbi__expand_png_paletteP9stbi__pngPhii($413,$palette,$414,$417)|0);
    $419 = ($418|0)!=(0);
    if (!($419)) {
     $0 = 0;
     $456 = $0;
     STACKTOP = sp;return ($456|0);
    }
   }
   $420 = $1;
   $421 = ((($420)) + 8|0);
   $422 = HEAP32[$421>>2]|0;
   _free($422);
   $423 = $1;
   $424 = ((($423)) + 8|0);
   HEAP32[$424>>2] = 0;
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 114: {
   $427 = (__ZL9stbi__errPKc(1704)|0);
   $0 = $427;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 116: {
   $432 = ((($c)) + 4|0);
   $433 = HEAP32[$432>>2]|0;
   $434 = $433 >>> 24;
   $435 = $434 & 255;
   $436 = $435&255;
   HEAP8[1872>>0] = $436;
   $437 = ((($c)) + 4|0);
   $438 = HEAP32[$437>>2]|0;
   $439 = $438 >>> 16;
   $440 = $439 & 255;
   $441 = $440&255;
   HEAP8[(1873)>>0] = $441;
   $442 = ((($c)) + 4|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = $443 >>> 8;
   $445 = $444 & 255;
   $446 = $445&255;
   HEAP8[(1874)>>0] = $446;
   $447 = ((($c)) + 4|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = $448 >>> 0;
   $450 = $449 & 255;
   $451 = $450&255;
   HEAP8[(1875)>>0] = $451;
   $452 = (__ZL9stbi__errPKc(1872)|0);
   $0 = $452;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
 }
 return (0)|0;
}
function __ZL22stbi__check_png_headerP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(8);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $1;
  $5 = (__ZL10stbi__get8P13stbi__context($4)|0);
  $6 = $5&255;
  $7 = $i;
  $8 = (2344 + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($6|0)!=($10|0);
  if ($11) {
   label = 4;
   break;
  }
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 if ((label|0) == 4) {
  $12 = (__ZL9stbi__errPKc(2352)|0);
  $0 = $12;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZL22stbi__get_chunk_headerP13stbi__context($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get32beP13stbi__context($1)|0);
 HEAP32[$agg$result>>2] = $2;
 $3 = $0;
 $4 = (__ZL13stbi__get32beP13stbi__context($3)|0);
 $5 = ((($agg$result)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZL10stbi__getnP13stbi__contextPhi($s,$buffer,$n) {
 $s = $s|0;
 $buffer = $buffer|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $blen = 0, $count = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $buffer;
 $3 = $n;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 172|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = ((($11)) + 168|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $10;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $blen = $16;
  $17 = $blen;
  $18 = $3;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $20 = $2;
   $21 = $1;
   $22 = ((($21)) + 168|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $blen;
   _memcpy(($20|0),($23|0),($24|0))|0;
   $25 = $1;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = ((($28)) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $2;
   $32 = $blen;
   $33 = (($31) + ($32)|0);
   $34 = $3;
   $35 = $blen;
   $36 = (($34) - ($35))|0;
   $37 = (FUNCTION_TABLE_iiii[$27 & 31]($30,$33,$36)|0);
   $count = $37;
   $38 = $count;
   $39 = $3;
   $40 = $blen;
   $41 = (($39) - ($40))|0;
   $42 = ($38|0)==($41|0);
   $43 = $42&1;
   $res = $43;
   $44 = $1;
   $45 = ((($44)) + 172|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = ((($47)) + 168|0);
   HEAP32[$48>>2] = $46;
   $49 = $res;
   $0 = $49;
   $69 = $0;
   STACKTOP = sp;return ($69|0);
  }
 }
 $50 = $1;
 $51 = ((($50)) + 168|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $3;
 $54 = (($52) + ($53)|0);
 $55 = $1;
 $56 = ((($55)) + 172|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($54>>>0)<=($57>>>0);
 if ($58) {
  $59 = $2;
  $60 = $1;
  $61 = ((($60)) + 168|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $3;
  _memcpy(($59|0),($62|0),($63|0))|0;
  $64 = $3;
  $65 = $1;
  $66 = ((($65)) + 168|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($64)|0);
  HEAP32[$66>>2] = $68;
  $0 = 1;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 } else {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function __ZL22stbi__create_png_imageP9stbi__pngPhjiiii($a,$image_data,$image_data_len,$out_n,$depth,$color,$interlaced) {
 $a = $a|0;
 $image_data = $image_data|0;
 $image_data_len = $image_data_len|0;
 $out_n = $out_n|0;
 $depth = $depth|0;
 $color = $color|0;
 $interlaced = $interlaced|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $final = 0, $i = 0, $img_len = 0, $j = 0, $or$cond = 0, $out_x = 0, $out_y = 0, $p = 0, $x = 0, $xorig = 0, $xspc = 0, $y = 0, $yorig = 0, $yspc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xorig = sp + 112|0;
 $yorig = sp + 60|0;
 $xspc = sp;
 $yspc = sp + 28|0;
 $1 = $a;
 $2 = $image_data;
 $3 = $image_data_len;
 $4 = $out_n;
 $5 = $depth;
 $6 = $color;
 $7 = $interlaced;
 $8 = $7;
 $9 = ($8|0)!=(0);
 $10 = $1;
 if (!($9)) {
  $11 = $2;
  $12 = $3;
  $13 = $4;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = $6;
  $23 = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($10,$11,$12,$13,$16,$20,$21,$22)|0);
  $0 = $23;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 $24 = HEAP32[$10>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($25, $29)|0;
 $31 = $4;
 $32 = Math_imul($30, $31)|0;
 $33 = (__ZL12stbi__mallocj($32)|0);
 $final = $33;
 $p = 0;
 while(1) {
  $34 = $p;
  $35 = ($34|0)<(7);
  if (!($35)) {
   label = 16;
   break;
  }
  ;HEAP32[$xorig>>2]=HEAP32[2024>>2]|0;HEAP32[$xorig+4>>2]=HEAP32[2024+4>>2]|0;HEAP32[$xorig+8>>2]=HEAP32[2024+8>>2]|0;HEAP32[$xorig+12>>2]=HEAP32[2024+12>>2]|0;HEAP32[$xorig+16>>2]=HEAP32[2024+16>>2]|0;HEAP32[$xorig+20>>2]=HEAP32[2024+20>>2]|0;HEAP32[$xorig+24>>2]=HEAP32[2024+24>>2]|0;
  ;HEAP32[$yorig>>2]=HEAP32[2056>>2]|0;HEAP32[$yorig+4>>2]=HEAP32[2056+4>>2]|0;HEAP32[$yorig+8>>2]=HEAP32[2056+8>>2]|0;HEAP32[$yorig+12>>2]=HEAP32[2056+12>>2]|0;HEAP32[$yorig+16>>2]=HEAP32[2056+16>>2]|0;HEAP32[$yorig+20>>2]=HEAP32[2056+20>>2]|0;HEAP32[$yorig+24>>2]=HEAP32[2056+24>>2]|0;
  ;HEAP32[$xspc>>2]=HEAP32[2088>>2]|0;HEAP32[$xspc+4>>2]=HEAP32[2088+4>>2]|0;HEAP32[$xspc+8>>2]=HEAP32[2088+8>>2]|0;HEAP32[$xspc+12>>2]=HEAP32[2088+12>>2]|0;HEAP32[$xspc+16>>2]=HEAP32[2088+16>>2]|0;HEAP32[$xspc+20>>2]=HEAP32[2088+20>>2]|0;HEAP32[$xspc+24>>2]=HEAP32[2088+24>>2]|0;
  ;HEAP32[$yspc>>2]=HEAP32[2120>>2]|0;HEAP32[$yspc+4>>2]=HEAP32[2120+4>>2]|0;HEAP32[$yspc+8>>2]=HEAP32[2120+8>>2]|0;HEAP32[$yspc+12>>2]=HEAP32[2120+12>>2]|0;HEAP32[$yspc+16>>2]=HEAP32[2120+16>>2]|0;HEAP32[$yspc+20>>2]=HEAP32[2120+20>>2]|0;HEAP32[$yspc+24>>2]=HEAP32[2120+24>>2]|0;
  $36 = $1;
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = $p;
  $40 = (($xorig) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($38) - ($41))|0;
  $43 = $p;
  $44 = (($xspc) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($42) + ($45))|0;
  $47 = (($46) - 1)|0;
  $48 = $p;
  $49 = (($xspc) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($47>>>0) / ($50>>>0))&-1;
  $x = $51;
  $52 = $1;
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $p;
  $57 = (($yorig) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($55) - ($58))|0;
  $60 = $p;
  $61 = (($yspc) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($59) + ($62))|0;
  $64 = (($63) - 1)|0;
  $65 = $p;
  $66 = (($yspc) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($64>>>0) / ($67>>>0))&-1;
  $y = $68;
  $69 = $x;
  $70 = ($69|0)!=(0);
  $71 = $y;
  $72 = ($71|0)!=(0);
  $or$cond = $70 & $72;
  if ($or$cond) {
   $73 = $1;
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $x;
   $78 = Math_imul($76, $77)|0;
   $79 = $5;
   $80 = Math_imul($78, $79)|0;
   $81 = (($80) + 7)|0;
   $82 = $81 >> 3;
   $83 = (($82) + 1)|0;
   $84 = $y;
   $85 = Math_imul($83, $84)|0;
   $img_len = $85;
   $86 = $1;
   $87 = $2;
   $88 = $3;
   $89 = $4;
   $90 = $x;
   $91 = $y;
   $92 = $5;
   $93 = $6;
   $94 = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($86,$87,$88,$89,$90,$91,$92,$93)|0);
   $95 = ($94|0)!=(0);
   if (!($95)) {
    label = 7;
    break;
   }
   $j = 0;
   while(1) {
    $97 = $j;
    $98 = $y;
    $99 = ($97|0)<($98|0);
    if (!($99)) {
     break;
    }
    $i = 0;
    while(1) {
     $100 = $i;
     $101 = $x;
     $102 = ($100|0)<($101|0);
     $103 = $j;
     if (!($102)) {
      break;
     }
     $104 = $p;
     $105 = (($yspc) + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = Math_imul($103, $106)|0;
     $108 = $p;
     $109 = (($yorig) + ($108<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (($107) + ($110))|0;
     $out_y = $111;
     $112 = $i;
     $113 = $p;
     $114 = (($xspc) + ($113<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = Math_imul($112, $115)|0;
     $117 = $p;
     $118 = (($xorig) + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($116) + ($119))|0;
     $out_x = $120;
     $121 = $final;
     $122 = $out_y;
     $123 = $1;
     $124 = HEAP32[$123>>2]|0;
     $125 = HEAP32[$124>>2]|0;
     $126 = Math_imul($122, $125)|0;
     $127 = $4;
     $128 = Math_imul($126, $127)|0;
     $129 = (($121) + ($128)|0);
     $130 = $out_x;
     $131 = $4;
     $132 = Math_imul($130, $131)|0;
     $133 = (($129) + ($132)|0);
     $134 = $1;
     $135 = ((($134)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $j;
     $138 = $x;
     $139 = Math_imul($137, $138)|0;
     $140 = $i;
     $141 = (($139) + ($140))|0;
     $142 = $4;
     $143 = Math_imul($141, $142)|0;
     $144 = (($136) + ($143)|0);
     $145 = $4;
     _memcpy(($133|0),($144|0),($145|0))|0;
     $146 = $i;
     $147 = (($146) + 1)|0;
     $i = $147;
    }
    $148 = (($103) + 1)|0;
    $j = $148;
   }
   $149 = $1;
   $150 = ((($149)) + 12|0);
   $151 = HEAP32[$150>>2]|0;
   _free($151);
   $152 = $img_len;
   $153 = $2;
   $154 = (($153) + ($152)|0);
   $2 = $154;
   $155 = $img_len;
   $156 = $3;
   $157 = (($156) - ($155))|0;
   $3 = $157;
  }
  $158 = $p;
  $159 = (($158) + 1)|0;
  $p = $159;
 }
 if ((label|0) == 7) {
  $96 = $final;
  _free($96);
  $0 = 0;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 else if ((label|0) == 16) {
  $160 = $final;
  $161 = $1;
  $162 = ((($161)) + 12|0);
  HEAP32[$162>>2] = $160;
  $0 = 1;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 return (0)|0;
}
function __ZL26stbi__compute_transparencyP9stbi__pngPhi($z,$tc,$out_n) {
 $z = $z|0;
 $tc = $tc|0;
 $out_n = $out_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $p = 0, $pixel_count = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $tc;
 $2 = $out_n;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $s = $4;
 $5 = $s;
 $6 = HEAP32[$5>>2]|0;
 $7 = $s;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $pixel_count = $10;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $p = $13;
 $14 = $2;
 $15 = ($14|0)==(2);
 $16 = $2;
 $17 = ($16|0)==(4);
 $or$cond = $15 | $17;
 if (!($or$cond)) {
  ___assert_fail((1960|0),(1928|0),4186,(1992|0));
  // unreachable;
 }
 $18 = $2;
 $19 = ($18|0)==(2);
 $i = 0;
 if ($19) {
  while(1) {
   $20 = $i;
   $21 = $pixel_count;
   $22 = ($20>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = $p;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $1;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($25|0)==($28|0);
   $30 = $29 ? 0 : 255;
   $31 = $30&255;
   $32 = $p;
   $33 = ((($32)) + 1|0);
   HEAP8[$33>>0] = $31;
   $34 = $p;
   $35 = ((($34)) + 2|0);
   $p = $35;
   $36 = $i;
   $37 = (($36) + 1)|0;
   $i = $37;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $38 = $i;
  $39 = $pixel_count;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $p;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $1;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($43|0)==($46|0);
  if ($47) {
   $48 = $p;
   $49 = ((($48)) + 1|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $1;
   $53 = ((($52)) + 1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ($51|0)==($55|0);
   if ($56) {
    $57 = $p;
    $58 = ((($57)) + 2|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $1;
    $62 = ((($61)) + 2|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = ($60|0)==($64|0);
    if ($65) {
     $66 = $p;
     $67 = ((($66)) + 3|0);
     HEAP8[$67>>0] = 0;
    }
   }
  }
  $68 = $p;
  $69 = ((($68)) + 4|0);
  $p = $69;
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 STACKTOP = sp;return 1;
}
function __ZL15stbi__de_iphoneP9stbi__png($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $i = 0, $p = 0, $pixel_count = 0, $s = 0, $t = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $s = $2;
 $3 = $s;
 $4 = HEAP32[$3>>2]|0;
 $5 = $s;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($4, $7)|0;
 $pixel_count = $8;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $p = $11;
 $12 = $s;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(3);
 if ($15) {
  $i = 0;
  while(1) {
   $16 = $i;
   $17 = $pixel_count;
   $18 = ($16>>>0)<($17>>>0);
   if (!($18)) {
    break;
   }
   $19 = $p;
   $20 = HEAP8[$19>>0]|0;
   $t = $20;
   $21 = $p;
   $22 = ((($21)) + 2|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $p;
   HEAP8[$24>>0] = $23;
   $25 = $t;
   $26 = $p;
   $27 = ((($26)) + 2|0);
   HEAP8[$27>>0] = $25;
   $28 = $p;
   $29 = ((($28)) + 3|0);
   $p = $29;
   $30 = $i;
   $31 = (($30) + 1)|0;
   $i = $31;
  }
  STACKTOP = sp;return;
 }
 $32 = $s;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(4);
 if (!($35)) {
  ___assert_fail((1904|0),(1928|0),4267,(1944|0));
  // unreachable;
 }
 $36 = HEAP32[128>>2]|0;
 $37 = ($36|0)!=(0);
 $i = 0;
 if (!($37)) {
  while(1) {
   $86 = $i;
   $87 = $pixel_count;
   $88 = ($86>>>0)<($87>>>0);
   if (!($88)) {
    break;
   }
   $89 = $p;
   $90 = HEAP8[$89>>0]|0;
   $t2 = $90;
   $91 = $p;
   $92 = ((($91)) + 2|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $p;
   HEAP8[$94>>0] = $93;
   $95 = $t2;
   $96 = $p;
   $97 = ((($96)) + 2|0);
   HEAP8[$97>>0] = $95;
   $98 = $p;
   $99 = ((($98)) + 4|0);
   $p = $99;
   $100 = $i;
   $101 = (($100) + 1)|0;
   $i = $101;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $38 = $i;
  $39 = $pixel_count;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $p;
  $42 = ((($41)) + 3|0);
  $43 = HEAP8[$42>>0]|0;
  $a = $43;
  $44 = $p;
  $45 = HEAP8[$44>>0]|0;
  $t1 = $45;
  $46 = $a;
  $47 = ($46<<24>>24)!=(0);
  $48 = $p;
  $49 = ((($48)) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  if ($47) {
   $51 = $50&255;
   $52 = ($51*255)|0;
   $53 = $a;
   $54 = $53&255;
   $55 = (($52|0) / ($54|0))&-1;
   $56 = $55&255;
   $57 = $p;
   HEAP8[$57>>0] = $56;
   $58 = $p;
   $59 = ((($58)) + 1|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = ($61*255)|0;
   $63 = $a;
   $64 = $63&255;
   $65 = (($62|0) / ($64|0))&-1;
   $66 = $65&255;
   $67 = $p;
   $68 = ((($67)) + 1|0);
   HEAP8[$68>>0] = $66;
   $69 = $t1;
   $70 = $69&255;
   $71 = ($70*255)|0;
   $72 = $a;
   $73 = $72&255;
   $74 = (($71|0) / ($73|0))&-1;
   $75 = $74&255;
   $76 = $p;
   $77 = ((($76)) + 2|0);
   HEAP8[$77>>0] = $75;
  } else {
   $78 = $p;
   HEAP8[$78>>0] = $50;
   $79 = $t1;
   $80 = $p;
   $81 = ((($80)) + 2|0);
   HEAP8[$81>>0] = $79;
  }
  $82 = $p;
  $83 = ((($82)) + 4|0);
  $p = $83;
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 STACKTOP = sp;return;
}
function __ZL24stbi__expand_png_paletteP9stbi__pngPhii($a,$palette,$len,$pal_img_n) {
 $a = $a|0;
 $palette = $palette|0;
 $len = $len|0;
 $pal_img_n = $pal_img_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $n = 0, $n1 = 0, $orig = 0, $p = 0, $pixel_count = 0, $temp_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $palette;
 $3 = $len;
 $4 = $pal_img_n;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($7, $11)|0;
 $pixel_count = $12;
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $orig = $15;
 $16 = $pixel_count;
 $17 = $4;
 $18 = Math_imul($16, $17)|0;
 $19 = (__ZL12stbi__mallocj($18)|0);
 $p = $19;
 $20 = $p;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = (__ZL9stbi__errPKc(1832)|0);
  $0 = $22;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $23 = $p;
 $temp_out = $23;
 $24 = $4;
 $25 = ($24|0)==(3);
 $i = 0;
 L5: do {
  if ($25) {
   while(1) {
    $26 = $i;
    $27 = $pixel_count;
    $28 = ($26>>>0)<($27>>>0);
    if (!($28)) {
     break L5;
    }
    $29 = $i;
    $30 = $orig;
    $31 = (($30) + ($29)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33<<2;
    $n = $34;
    $35 = $n;
    $36 = $2;
    $37 = (($36) + ($35)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $p;
    HEAP8[$39>>0] = $38;
    $40 = $n;
    $41 = (($40) + 1)|0;
    $42 = $2;
    $43 = (($42) + ($41)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $p;
    $46 = ((($45)) + 1|0);
    HEAP8[$46>>0] = $44;
    $47 = $n;
    $48 = (($47) + 2)|0;
    $49 = $2;
    $50 = (($49) + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $p;
    $53 = ((($52)) + 2|0);
    HEAP8[$53>>0] = $51;
    $54 = $p;
    $55 = ((($54)) + 3|0);
    $p = $55;
    $56 = $i;
    $57 = (($56) + 1)|0;
    $i = $57;
   }
  } else {
   while(1) {
    $58 = $i;
    $59 = $pixel_count;
    $60 = ($58>>>0)<($59>>>0);
    if (!($60)) {
     break L5;
    }
    $61 = $i;
    $62 = $orig;
    $63 = (($62) + ($61)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = $65<<2;
    $n1 = $66;
    $67 = $n1;
    $68 = $2;
    $69 = (($68) + ($67)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $p;
    HEAP8[$71>>0] = $70;
    $72 = $n1;
    $73 = (($72) + 1)|0;
    $74 = $2;
    $75 = (($74) + ($73)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $p;
    $78 = ((($77)) + 1|0);
    HEAP8[$78>>0] = $76;
    $79 = $n1;
    $80 = (($79) + 2)|0;
    $81 = $2;
    $82 = (($81) + ($80)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $p;
    $85 = ((($84)) + 2|0);
    HEAP8[$85>>0] = $83;
    $86 = $n1;
    $87 = (($86) + 3)|0;
    $88 = $2;
    $89 = (($88) + ($87)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $p;
    $92 = ((($91)) + 3|0);
    HEAP8[$92>>0] = $90;
    $93 = $p;
    $94 = ((($93)) + 4|0);
    $p = $94;
    $95 = $i;
    $96 = (($95) + 1)|0;
    $i = $96;
   }
  }
 } while(0);
 $97 = $1;
 $98 = ((($97)) + 12|0);
 $99 = HEAP32[$98>>2]|0;
 _free($99);
 $100 = $temp_out;
 $101 = $1;
 $102 = ((($101)) + 12|0);
 HEAP32[$102>>2] = $100;
 $0 = 1;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function __ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($a,$raw,$raw_len,$out_n,$x,$y,$depth,$color) {
 $a = $a|0;
 $raw = $raw|0;
 $raw_len = $raw_len|0;
 $out_n = $out_n|0;
 $x = $x|0;
 $y = $y|0;
 $depth = $depth|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cur = 0, $cur1 = 0, $cur2 = 0, $filter = 0, $filter_bytes = 0, $i = 0, $i3 = 0, $img_len = 0, $img_n = 0;
 var $img_width_bytes = 0, $in = 0, $j = 0, $k = 0, $nk = 0, $prior = 0, $s = 0, $scale = 0, $stride = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $raw;
 $3 = $raw_len;
 $4 = $out_n;
 $5 = $x;
 $6 = $y;
 $7 = $depth;
 $8 = $color;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $s = $10;
 $11 = $5;
 $12 = $4;
 $13 = Math_imul($11, $12)|0;
 $stride = $13;
 $14 = $s;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $img_n = $16;
 $17 = $4;
 $18 = $s;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)==($20|0);
 if (!($21)) {
  $22 = $4;
  $23 = $s;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  $27 = ($22|0)==($26|0);
  if (!($27)) {
   ___assert_fail((2152|0),(1928|0),3966,(2200|0));
   // unreachable;
  }
 }
 $28 = $5;
 $29 = $6;
 $30 = Math_imul($28, $29)|0;
 $31 = $4;
 $32 = Math_imul($30, $31)|0;
 $33 = (__ZL12stbi__mallocj($32)|0);
 $34 = $1;
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $33;
 $36 = $1;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $40 = (__ZL9stbi__errPKc(1832)|0);
  $0 = $40;
  $1130 = $0;
  STACKTOP = sp;return ($1130|0);
 }
 $41 = $img_n;
 $42 = $5;
 $43 = Math_imul($41, $42)|0;
 $44 = $7;
 $45 = Math_imul($43, $44)|0;
 $46 = (($45) + 7)|0;
 $47 = $46 >>> 3;
 $img_width_bytes = $47;
 $48 = $img_width_bytes;
 $49 = (($48) + 1)|0;
 $50 = $6;
 $51 = Math_imul($49, $50)|0;
 $img_len = $51;
 $52 = $s;
 $53 = HEAP32[$52>>2]|0;
 $54 = $5;
 $55 = ($53|0)==($54|0);
 if ($55) {
  $56 = $s;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $6;
  $60 = ($58|0)==($59|0);
  if ($60) {
   $61 = $3;
   $62 = $img_len;
   $63 = ($61|0)!=($62|0);
   if ($63) {
    $64 = (__ZL9stbi__errPKc(2232)|0);
    $0 = $64;
    $1130 = $0;
    STACKTOP = sp;return ($1130|0);
   }
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $65 = $3;
  $66 = $img_len;
  $67 = ($65>>>0)<($66>>>0);
  if ($67) {
   $68 = (__ZL9stbi__errPKc(2232)|0);
   $0 = $68;
   $1130 = $0;
   STACKTOP = sp;return ($1130|0);
  }
 }
 $j = 0;
 L19: while(1) {
  $69 = $j;
  $70 = $6;
  $71 = ($69>>>0)<($70>>>0);
  if (!($71)) {
   label = 107;
   break;
  }
  $72 = $1;
  $73 = ((($72)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $stride;
  $76 = $j;
  $77 = Math_imul($75, $76)|0;
  $78 = (($74) + ($77)|0);
  $cur = $78;
  $79 = $cur;
  $80 = $stride;
  $81 = (0 - ($80))|0;
  $82 = (($79) + ($81)|0);
  $prior = $82;
  $83 = $2;
  $84 = ((($83)) + 1|0);
  $2 = $84;
  $85 = HEAP8[$83>>0]|0;
  $86 = $85&255;
  $filter = $86;
  $87 = $img_n;
  $filter_bytes = $87;
  $88 = $5;
  $width = $88;
  $89 = $filter;
  $90 = ($89|0)>(4);
  if ($90) {
   label = 15;
   break;
  }
  $92 = $7;
  $93 = ($92|0)<(8);
  if ($93) {
   $94 = $img_width_bytes;
   $95 = $5;
   $96 = ($94>>>0)<=($95>>>0);
   if (!($96)) {
    label = 18;
    break;
   }
   $97 = $5;
   $98 = $4;
   $99 = Math_imul($97, $98)|0;
   $100 = $img_width_bytes;
   $101 = (($99) - ($100))|0;
   $102 = $cur;
   $103 = (($102) + ($101)|0);
   $cur = $103;
   $filter_bytes = 1;
   $104 = $img_width_bytes;
   $width = $104;
  }
  $105 = $j;
  $106 = ($105|0)==(0);
  if ($106) {
   $107 = $filter;
   $108 = (2296 + ($107)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $filter = $110;
  }
  $k = 0;
  while(1) {
   $111 = $k;
   $112 = $filter_bytes;
   $113 = ($111|0)<($112|0);
   if (!($113)) {
    break;
   }
   $114 = $filter;
   switch ($114|0) {
   case 5:  {
    $179 = $k;
    $180 = $2;
    $181 = (($180) + ($179)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $k;
    $184 = $cur;
    $185 = (($184) + ($183)|0);
    HEAP8[$185>>0] = $182;
    break;
   }
   case 2:  {
    $129 = $k;
    $130 = $2;
    $131 = (($130) + ($129)|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = $k;
    $135 = $prior;
    $136 = (($135) + ($134)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = (($133) + ($138))|0;
    $140 = $139 & 255;
    $141 = $140&255;
    $142 = $k;
    $143 = $cur;
    $144 = (($143) + ($142)|0);
    HEAP8[$144>>0] = $141;
    break;
   }
   case 0:  {
    $115 = $k;
    $116 = $2;
    $117 = (($116) + ($115)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $k;
    $120 = $cur;
    $121 = (($120) + ($119)|0);
    HEAP8[$121>>0] = $118;
    break;
   }
   case 3:  {
    $145 = $k;
    $146 = $2;
    $147 = (($146) + ($145)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = $k;
    $151 = $prior;
    $152 = (($151) + ($150)|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = $154 >> 1;
    $156 = (($149) + ($155))|0;
    $157 = $156 & 255;
    $158 = $157&255;
    $159 = $k;
    $160 = $cur;
    $161 = (($160) + ($159)|0);
    HEAP8[$161>>0] = $158;
    break;
   }
   case 6:  {
    $186 = $k;
    $187 = $2;
    $188 = (($187) + ($186)|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $k;
    $191 = $cur;
    $192 = (($191) + ($190)|0);
    HEAP8[$192>>0] = $189;
    break;
   }
   case 1:  {
    $122 = $k;
    $123 = $2;
    $124 = (($123) + ($122)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $k;
    $127 = $cur;
    $128 = (($127) + ($126)|0);
    HEAP8[$128>>0] = $125;
    break;
   }
   case 4:  {
    $162 = $k;
    $163 = $2;
    $164 = (($163) + ($162)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165&255;
    $167 = $k;
    $168 = $prior;
    $169 = (($168) + ($167)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = (__ZL11stbi__paethiii(0,$171,0)|0);
    $173 = (($166) + ($172))|0;
    $174 = $173 & 255;
    $175 = $174&255;
    $176 = $k;
    $177 = $cur;
    $178 = (($177) + ($176)|0);
    HEAP8[$178>>0] = $175;
    break;
   }
   default: {
   }
   }
   $193 = $k;
   $194 = (($193) + 1)|0;
   $k = $194;
  }
  $195 = $7;
  $196 = ($195|0)==(8);
  if ($196) {
   $197 = $img_n;
   $198 = $4;
   $199 = ($197|0)!=($198|0);
   if ($199) {
    $200 = $img_n;
    $201 = $cur;
    $202 = (($201) + ($200)|0);
    HEAP8[$202>>0] = -1;
   }
   $203 = $img_n;
   $204 = $2;
   $205 = (($204) + ($203)|0);
   $2 = $205;
   $206 = $4;
   $207 = $cur;
   $208 = (($207) + ($206)|0);
   $cur = $208;
   $209 = $4;
   $210 = $prior;
   $211 = (($210) + ($209)|0);
   $prior = $211;
  } else {
   $212 = $2;
   $213 = ((($212)) + 1|0);
   $2 = $213;
   $214 = $cur;
   $215 = ((($214)) + 1|0);
   $cur = $215;
   $216 = $prior;
   $217 = ((($216)) + 1|0);
   $prior = $217;
  }
  $218 = $7;
  $219 = ($218|0)<(8);
  L50: do {
   if ($219) {
    label = 40;
   } else {
    $220 = $img_n;
    $221 = $4;
    $222 = ($220|0)==($221|0);
    if ($222) {
     label = 40;
    } else {
     $392 = $img_n;
     $393 = (($392) + 1)|0;
     $394 = $4;
     $395 = ($393|0)==($394|0);
     if (!($395)) {
      label = 62;
      break L19;
     }
     $396 = $filter;
     switch ($396|0) {
     case 1:  {
      $427 = $5;
      $428 = (($427) - 1)|0;
      $i = $428;
      while(1) {
       $429 = $i;
       $430 = ($429>>>0)>=(1);
       if (!($430)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $431 = $k;
        $432 = $img_n;
        $433 = ($431|0)<($432|0);
        if (!($433)) {
         break;
        }
        $434 = $k;
        $435 = $2;
        $436 = (($435) + ($434)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $k;
        $440 = $4;
        $441 = (($439) - ($440))|0;
        $442 = $cur;
        $443 = (($442) + ($441)|0);
        $444 = HEAP8[$443>>0]|0;
        $445 = $444&255;
        $446 = (($438) + ($445))|0;
        $447 = $446 & 255;
        $448 = $447&255;
        $449 = $k;
        $450 = $cur;
        $451 = (($450) + ($449)|0);
        HEAP8[$451>>0] = $448;
        $452 = $k;
        $453 = (($452) + 1)|0;
        $k = $453;
       }
       $454 = $i;
       $455 = (($454) + -1)|0;
       $i = $455;
       $456 = $img_n;
       $457 = $cur;
       $458 = (($457) + ($456)|0);
       HEAP8[$458>>0] = -1;
       $459 = $img_n;
       $460 = $2;
       $461 = (($460) + ($459)|0);
       $2 = $461;
       $462 = $4;
       $463 = $cur;
       $464 = (($463) + ($462)|0);
       $cur = $464;
       $465 = $4;
       $466 = $prior;
       $467 = (($466) + ($465)|0);
       $prior = $467;
      }
      break;
     }
     case 0:  {
      $397 = $5;
      $398 = (($397) - 1)|0;
      $i = $398;
      while(1) {
       $399 = $i;
       $400 = ($399>>>0)>=(1);
       if (!($400)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $401 = $k;
        $402 = $img_n;
        $403 = ($401|0)<($402|0);
        if (!($403)) {
         break;
        }
        $404 = $k;
        $405 = $2;
        $406 = (($405) + ($404)|0);
        $407 = HEAP8[$406>>0]|0;
        $408 = $k;
        $409 = $cur;
        $410 = (($409) + ($408)|0);
        HEAP8[$410>>0] = $407;
        $411 = $k;
        $412 = (($411) + 1)|0;
        $k = $412;
       }
       $413 = $i;
       $414 = (($413) + -1)|0;
       $i = $414;
       $415 = $img_n;
       $416 = $cur;
       $417 = (($416) + ($415)|0);
       HEAP8[$417>>0] = -1;
       $418 = $img_n;
       $419 = $2;
       $420 = (($419) + ($418)|0);
       $2 = $420;
       $421 = $4;
       $422 = $cur;
       $423 = (($422) + ($421)|0);
       $cur = $423;
       $424 = $4;
       $425 = $prior;
       $426 = (($425) + ($424)|0);
       $prior = $426;
      }
      break;
     }
     case 2:  {
      $468 = $5;
      $469 = (($468) - 1)|0;
      $i = $469;
      while(1) {
       $470 = $i;
       $471 = ($470>>>0)>=(1);
       if (!($471)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $472 = $k;
        $473 = $img_n;
        $474 = ($472|0)<($473|0);
        if (!($474)) {
         break;
        }
        $475 = $k;
        $476 = $2;
        $477 = (($476) + ($475)|0);
        $478 = HEAP8[$477>>0]|0;
        $479 = $478&255;
        $480 = $k;
        $481 = $prior;
        $482 = (($481) + ($480)|0);
        $483 = HEAP8[$482>>0]|0;
        $484 = $483&255;
        $485 = (($479) + ($484))|0;
        $486 = $485 & 255;
        $487 = $486&255;
        $488 = $k;
        $489 = $cur;
        $490 = (($489) + ($488)|0);
        HEAP8[$490>>0] = $487;
        $491 = $k;
        $492 = (($491) + 1)|0;
        $k = $492;
       }
       $493 = $i;
       $494 = (($493) + -1)|0;
       $i = $494;
       $495 = $img_n;
       $496 = $cur;
       $497 = (($496) + ($495)|0);
       HEAP8[$497>>0] = -1;
       $498 = $img_n;
       $499 = $2;
       $500 = (($499) + ($498)|0);
       $2 = $500;
       $501 = $4;
       $502 = $cur;
       $503 = (($502) + ($501)|0);
       $cur = $503;
       $504 = $4;
       $505 = $prior;
       $506 = (($505) + ($504)|0);
       $prior = $506;
      }
      break;
     }
     case 4:  {
      $555 = $5;
      $556 = (($555) - 1)|0;
      $i = $556;
      while(1) {
       $557 = $i;
       $558 = ($557>>>0)>=(1);
       if (!($558)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $559 = $k;
        $560 = $img_n;
        $561 = ($559|0)<($560|0);
        if (!($561)) {
         break;
        }
        $562 = $k;
        $563 = $2;
        $564 = (($563) + ($562)|0);
        $565 = HEAP8[$564>>0]|0;
        $566 = $565&255;
        $567 = $k;
        $568 = $4;
        $569 = (($567) - ($568))|0;
        $570 = $cur;
        $571 = (($570) + ($569)|0);
        $572 = HEAP8[$571>>0]|0;
        $573 = $572&255;
        $574 = $k;
        $575 = $prior;
        $576 = (($575) + ($574)|0);
        $577 = HEAP8[$576>>0]|0;
        $578 = $577&255;
        $579 = $k;
        $580 = $4;
        $581 = (($579) - ($580))|0;
        $582 = $prior;
        $583 = (($582) + ($581)|0);
        $584 = HEAP8[$583>>0]|0;
        $585 = $584&255;
        $586 = (__ZL11stbi__paethiii($573,$578,$585)|0);
        $587 = (($566) + ($586))|0;
        $588 = $587 & 255;
        $589 = $588&255;
        $590 = $k;
        $591 = $cur;
        $592 = (($591) + ($590)|0);
        HEAP8[$592>>0] = $589;
        $593 = $k;
        $594 = (($593) + 1)|0;
        $k = $594;
       }
       $595 = $i;
       $596 = (($595) + -1)|0;
       $i = $596;
       $597 = $img_n;
       $598 = $cur;
       $599 = (($598) + ($597)|0);
       HEAP8[$599>>0] = -1;
       $600 = $img_n;
       $601 = $2;
       $602 = (($601) + ($600)|0);
       $2 = $602;
       $603 = $4;
       $604 = $cur;
       $605 = (($604) + ($603)|0);
       $cur = $605;
       $606 = $4;
       $607 = $prior;
       $608 = (($607) + ($606)|0);
       $prior = $608;
      }
      break;
     }
     case 5:  {
      $609 = $5;
      $610 = (($609) - 1)|0;
      $i = $610;
      while(1) {
       $611 = $i;
       $612 = ($611>>>0)>=(1);
       if (!($612)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $613 = $k;
        $614 = $img_n;
        $615 = ($613|0)<($614|0);
        if (!($615)) {
         break;
        }
        $616 = $k;
        $617 = $2;
        $618 = (($617) + ($616)|0);
        $619 = HEAP8[$618>>0]|0;
        $620 = $619&255;
        $621 = $k;
        $622 = $4;
        $623 = (($621) - ($622))|0;
        $624 = $cur;
        $625 = (($624) + ($623)|0);
        $626 = HEAP8[$625>>0]|0;
        $627 = $626&255;
        $628 = $627 >> 1;
        $629 = (($620) + ($628))|0;
        $630 = $629 & 255;
        $631 = $630&255;
        $632 = $k;
        $633 = $cur;
        $634 = (($633) + ($632)|0);
        HEAP8[$634>>0] = $631;
        $635 = $k;
        $636 = (($635) + 1)|0;
        $k = $636;
       }
       $637 = $i;
       $638 = (($637) + -1)|0;
       $i = $638;
       $639 = $img_n;
       $640 = $cur;
       $641 = (($640) + ($639)|0);
       HEAP8[$641>>0] = -1;
       $642 = $img_n;
       $643 = $2;
       $644 = (($643) + ($642)|0);
       $2 = $644;
       $645 = $4;
       $646 = $cur;
       $647 = (($646) + ($645)|0);
       $cur = $647;
       $648 = $4;
       $649 = $prior;
       $650 = (($649) + ($648)|0);
       $prior = $650;
      }
      break;
     }
     case 6:  {
      $651 = $5;
      $652 = (($651) - 1)|0;
      $i = $652;
      while(1) {
       $653 = $i;
       $654 = ($653>>>0)>=(1);
       if (!($654)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $655 = $k;
        $656 = $img_n;
        $657 = ($655|0)<($656|0);
        if (!($657)) {
         break;
        }
        $658 = $k;
        $659 = $2;
        $660 = (($659) + ($658)|0);
        $661 = HEAP8[$660>>0]|0;
        $662 = $661&255;
        $663 = $k;
        $664 = $4;
        $665 = (($663) - ($664))|0;
        $666 = $cur;
        $667 = (($666) + ($665)|0);
        $668 = HEAP8[$667>>0]|0;
        $669 = $668&255;
        $670 = (__ZL11stbi__paethiii($669,0,0)|0);
        $671 = (($662) + ($670))|0;
        $672 = $671 & 255;
        $673 = $672&255;
        $674 = $k;
        $675 = $cur;
        $676 = (($675) + ($674)|0);
        HEAP8[$676>>0] = $673;
        $677 = $k;
        $678 = (($677) + 1)|0;
        $k = $678;
       }
       $679 = $i;
       $680 = (($679) + -1)|0;
       $i = $680;
       $681 = $img_n;
       $682 = $cur;
       $683 = (($682) + ($681)|0);
       HEAP8[$683>>0] = -1;
       $684 = $img_n;
       $685 = $2;
       $686 = (($685) + ($684)|0);
       $2 = $686;
       $687 = $4;
       $688 = $cur;
       $689 = (($688) + ($687)|0);
       $cur = $689;
       $690 = $4;
       $691 = $prior;
       $692 = (($691) + ($690)|0);
       $prior = $692;
      }
      break;
     }
     case 3:  {
      $507 = $5;
      $508 = (($507) - 1)|0;
      $i = $508;
      while(1) {
       $509 = $i;
       $510 = ($509>>>0)>=(1);
       if (!($510)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $511 = $k;
        $512 = $img_n;
        $513 = ($511|0)<($512|0);
        if (!($513)) {
         break;
        }
        $514 = $k;
        $515 = $2;
        $516 = (($515) + ($514)|0);
        $517 = HEAP8[$516>>0]|0;
        $518 = $517&255;
        $519 = $k;
        $520 = $prior;
        $521 = (($520) + ($519)|0);
        $522 = HEAP8[$521>>0]|0;
        $523 = $522&255;
        $524 = $k;
        $525 = $4;
        $526 = (($524) - ($525))|0;
        $527 = $cur;
        $528 = (($527) + ($526)|0);
        $529 = HEAP8[$528>>0]|0;
        $530 = $529&255;
        $531 = (($523) + ($530))|0;
        $532 = $531 >> 1;
        $533 = (($518) + ($532))|0;
        $534 = $533 & 255;
        $535 = $534&255;
        $536 = $k;
        $537 = $cur;
        $538 = (($537) + ($536)|0);
        HEAP8[$538>>0] = $535;
        $539 = $k;
        $540 = (($539) + 1)|0;
        $k = $540;
       }
       $541 = $i;
       $542 = (($541) + -1)|0;
       $i = $542;
       $543 = $img_n;
       $544 = $cur;
       $545 = (($544) + ($543)|0);
       HEAP8[$545>>0] = -1;
       $546 = $img_n;
       $547 = $2;
       $548 = (($547) + ($546)|0);
       $2 = $548;
       $549 = $4;
       $550 = $cur;
       $551 = (($550) + ($549)|0);
       $cur = $551;
       $552 = $4;
       $553 = $prior;
       $554 = (($553) + ($552)|0);
       $prior = $554;
      }
      break;
     }
     default: {
      break L50;
     }
     }
    }
   }
  } while(0);
  if ((label|0) == 40) {
   label = 0;
   $223 = $width;
   $224 = (($223) - 1)|0;
   $225 = $img_n;
   $226 = Math_imul($224, $225)|0;
   $nk = $226;
   $227 = $filter;
   L113: do {
    switch ($227|0) {
    case 1:  {
     $k = 0;
     while(1) {
      $231 = $k;
      $232 = $nk;
      $233 = ($231|0)<($232|0);
      if (!($233)) {
       break L113;
      }
      $234 = $k;
      $235 = $2;
      $236 = (($235) + ($234)|0);
      $237 = HEAP8[$236>>0]|0;
      $238 = $237&255;
      $239 = $k;
      $240 = $filter_bytes;
      $241 = (($239) - ($240))|0;
      $242 = $cur;
      $243 = (($242) + ($241)|0);
      $244 = HEAP8[$243>>0]|0;
      $245 = $244&255;
      $246 = (($238) + ($245))|0;
      $247 = $246 & 255;
      $248 = $247&255;
      $249 = $k;
      $250 = $cur;
      $251 = (($250) + ($249)|0);
      HEAP8[$251>>0] = $248;
      $252 = $k;
      $253 = (($252) + 1)|0;
      $k = $253;
     }
     break;
    }
    case 0:  {
     $228 = $cur;
     $229 = $2;
     $230 = $nk;
     _memcpy(($228|0),($229|0),($230|0))|0;
     break;
    }
    case 3:  {
     $k = 0;
     while(1) {
      $275 = $k;
      $276 = $nk;
      $277 = ($275|0)<($276|0);
      if (!($277)) {
       break L113;
      }
      $278 = $k;
      $279 = $2;
      $280 = (($279) + ($278)|0);
      $281 = HEAP8[$280>>0]|0;
      $282 = $281&255;
      $283 = $k;
      $284 = $prior;
      $285 = (($284) + ($283)|0);
      $286 = HEAP8[$285>>0]|0;
      $287 = $286&255;
      $288 = $k;
      $289 = $filter_bytes;
      $290 = (($288) - ($289))|0;
      $291 = $cur;
      $292 = (($291) + ($290)|0);
      $293 = HEAP8[$292>>0]|0;
      $294 = $293&255;
      $295 = (($287) + ($294))|0;
      $296 = $295 >> 1;
      $297 = (($282) + ($296))|0;
      $298 = $297 & 255;
      $299 = $298&255;
      $300 = $k;
      $301 = $cur;
      $302 = (($301) + ($300)|0);
      HEAP8[$302>>0] = $299;
      $303 = $k;
      $304 = (($303) + 1)|0;
      $k = $304;
     }
     break;
    }
    case 5:  {
     $k = 0;
     while(1) {
      $341 = $k;
      $342 = $nk;
      $343 = ($341|0)<($342|0);
      if (!($343)) {
       break L113;
      }
      $344 = $k;
      $345 = $2;
      $346 = (($345) + ($344)|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = $347&255;
      $349 = $k;
      $350 = $filter_bytes;
      $351 = (($349) - ($350))|0;
      $352 = $cur;
      $353 = (($352) + ($351)|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = $354&255;
      $356 = $355 >> 1;
      $357 = (($348) + ($356))|0;
      $358 = $357 & 255;
      $359 = $358&255;
      $360 = $k;
      $361 = $cur;
      $362 = (($361) + ($360)|0);
      HEAP8[$362>>0] = $359;
      $363 = $k;
      $364 = (($363) + 1)|0;
      $k = $364;
     }
     break;
    }
    case 2:  {
     $k = 0;
     while(1) {
      $254 = $k;
      $255 = $nk;
      $256 = ($254|0)<($255|0);
      if (!($256)) {
       break L113;
      }
      $257 = $k;
      $258 = $2;
      $259 = (($258) + ($257)|0);
      $260 = HEAP8[$259>>0]|0;
      $261 = $260&255;
      $262 = $k;
      $263 = $prior;
      $264 = (($263) + ($262)|0);
      $265 = HEAP8[$264>>0]|0;
      $266 = $265&255;
      $267 = (($261) + ($266))|0;
      $268 = $267 & 255;
      $269 = $268&255;
      $270 = $k;
      $271 = $cur;
      $272 = (($271) + ($270)|0);
      HEAP8[$272>>0] = $269;
      $273 = $k;
      $274 = (($273) + 1)|0;
      $k = $274;
     }
     break;
    }
    case 4:  {
     $k = 0;
     while(1) {
      $305 = $k;
      $306 = $nk;
      $307 = ($305|0)<($306|0);
      if (!($307)) {
       break L113;
      }
      $308 = $k;
      $309 = $2;
      $310 = (($309) + ($308)|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = $k;
      $314 = $filter_bytes;
      $315 = (($313) - ($314))|0;
      $316 = $cur;
      $317 = (($316) + ($315)|0);
      $318 = HEAP8[$317>>0]|0;
      $319 = $318&255;
      $320 = $k;
      $321 = $prior;
      $322 = (($321) + ($320)|0);
      $323 = HEAP8[$322>>0]|0;
      $324 = $323&255;
      $325 = $k;
      $326 = $filter_bytes;
      $327 = (($325) - ($326))|0;
      $328 = $prior;
      $329 = (($328) + ($327)|0);
      $330 = HEAP8[$329>>0]|0;
      $331 = $330&255;
      $332 = (__ZL11stbi__paethiii($319,$324,$331)|0);
      $333 = (($312) + ($332))|0;
      $334 = $333 & 255;
      $335 = $334&255;
      $336 = $k;
      $337 = $cur;
      $338 = (($337) + ($336)|0);
      HEAP8[$338>>0] = $335;
      $339 = $k;
      $340 = (($339) + 1)|0;
      $k = $340;
     }
     break;
    }
    case 6:  {
     $k = 0;
     while(1) {
      $365 = $k;
      $366 = $nk;
      $367 = ($365|0)<($366|0);
      if (!($367)) {
       break L113;
      }
      $368 = $k;
      $369 = $2;
      $370 = (($369) + ($368)|0);
      $371 = HEAP8[$370>>0]|0;
      $372 = $371&255;
      $373 = $k;
      $374 = $filter_bytes;
      $375 = (($373) - ($374))|0;
      $376 = $cur;
      $377 = (($376) + ($375)|0);
      $378 = HEAP8[$377>>0]|0;
      $379 = $378&255;
      $380 = (__ZL11stbi__paethiii($379,0,0)|0);
      $381 = (($372) + ($380))|0;
      $382 = $381 & 255;
      $383 = $382&255;
      $384 = $k;
      $385 = $cur;
      $386 = (($385) + ($384)|0);
      HEAP8[$386>>0] = $383;
      $387 = $k;
      $388 = (($387) + 1)|0;
      $k = $388;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $389 = $nk;
   $390 = $2;
   $391 = (($390) + ($389)|0);
   $2 = $391;
  }
  $693 = $j;
  $694 = (($693) + 1)|0;
  $j = $694;
 }
 if ((label|0) == 15) {
  $91 = (__ZL9stbi__errPKc(2256)|0);
  $0 = $91;
  $1130 = $0;
  STACKTOP = sp;return ($1130|0);
 }
 else if ((label|0) == 18) {
  ___assert_fail((2272|0),(1928|0),3988,(2200|0));
  // unreachable;
 }
 else if ((label|0) == 62) {
  ___assert_fail((2304|0),(1928|0),4041,(2200|0));
  // unreachable;
 }
 else if ((label|0) == 107) {
  $695 = $7;
  $696 = ($695|0)<(8);
  L143: do {
   if ($696) {
    $j = 0;
    L145: while(1) {
     $697 = $j;
     $698 = $6;
     $699 = ($697>>>0)<($698>>>0);
     if (!($699)) {
      break L143;
     }
     $700 = $1;
     $701 = ((($700)) + 12|0);
     $702 = HEAP32[$701>>2]|0;
     $703 = $stride;
     $704 = $j;
     $705 = Math_imul($703, $704)|0;
     $706 = (($702) + ($705)|0);
     $cur1 = $706;
     $707 = $1;
     $708 = ((($707)) + 12|0);
     $709 = HEAP32[$708>>2]|0;
     $710 = $stride;
     $711 = $j;
     $712 = Math_imul($710, $711)|0;
     $713 = (($709) + ($712)|0);
     $714 = $5;
     $715 = $4;
     $716 = Math_imul($714, $715)|0;
     $717 = (($713) + ($716)|0);
     $718 = $img_width_bytes;
     $719 = (0 - ($718))|0;
     $720 = (($717) + ($719)|0);
     $in = $720;
     $721 = $8;
     $722 = ($721|0)==(0);
     if ($722) {
      $723 = $7;
      $724 = (1808 + ($723)|0);
      $725 = HEAP8[$724>>0]|0;
      $726 = $725&255;
      $728 = $726;
     } else {
      $728 = 1;
     }
     $727 = $728&255;
     $scale = $727;
     $729 = $7;
     $730 = ($729|0)==(4);
     do {
      if ($730) {
       $731 = $5;
       $732 = $img_n;
       $733 = Math_imul($731, $732)|0;
       $k = $733;
       while(1) {
        $734 = $k;
        $735 = ($734|0)>=(2);
        if (!($735)) {
         break;
        }
        $736 = $scale;
        $737 = $736&255;
        $738 = $in;
        $739 = HEAP8[$738>>0]|0;
        $740 = $739&255;
        $741 = $740 >> 4;
        $742 = Math_imul($737, $741)|0;
        $743 = $742&255;
        $744 = $cur1;
        $745 = ((($744)) + 1|0);
        $cur1 = $745;
        HEAP8[$744>>0] = $743;
        $746 = $scale;
        $747 = $746&255;
        $748 = $in;
        $749 = HEAP8[$748>>0]|0;
        $750 = $749&255;
        $751 = $750 & 15;
        $752 = Math_imul($747, $751)|0;
        $753 = $752&255;
        $754 = $cur1;
        $755 = ((($754)) + 1|0);
        $cur1 = $755;
        HEAP8[$754>>0] = $753;
        $756 = $k;
        $757 = (($756) - 2)|0;
        $k = $757;
        $758 = $in;
        $759 = ((($758)) + 1|0);
        $in = $759;
       }
       $760 = $k;
       $761 = ($760|0)>(0);
       if ($761) {
        $762 = $scale;
        $763 = $762&255;
        $764 = $in;
        $765 = HEAP8[$764>>0]|0;
        $766 = $765&255;
        $767 = $766 >> 4;
        $768 = Math_imul($763, $767)|0;
        $769 = $768&255;
        $770 = $cur1;
        $771 = ((($770)) + 1|0);
        $cur1 = $771;
        HEAP8[$770>>0] = $769;
       }
      } else {
       $772 = $7;
       $773 = ($772|0)==(2);
       if ($773) {
        $774 = $5;
        $775 = $img_n;
        $776 = Math_imul($774, $775)|0;
        $k = $776;
        while(1) {
         $777 = $k;
         $778 = ($777|0)>=(4);
         if (!($778)) {
          break;
         }
         $779 = $scale;
         $780 = $779&255;
         $781 = $in;
         $782 = HEAP8[$781>>0]|0;
         $783 = $782&255;
         $784 = $783 >> 6;
         $785 = Math_imul($780, $784)|0;
         $786 = $785&255;
         $787 = $cur1;
         $788 = ((($787)) + 1|0);
         $cur1 = $788;
         HEAP8[$787>>0] = $786;
         $789 = $scale;
         $790 = $789&255;
         $791 = $in;
         $792 = HEAP8[$791>>0]|0;
         $793 = $792&255;
         $794 = $793 >> 4;
         $795 = $794 & 3;
         $796 = Math_imul($790, $795)|0;
         $797 = $796&255;
         $798 = $cur1;
         $799 = ((($798)) + 1|0);
         $cur1 = $799;
         HEAP8[$798>>0] = $797;
         $800 = $scale;
         $801 = $800&255;
         $802 = $in;
         $803 = HEAP8[$802>>0]|0;
         $804 = $803&255;
         $805 = $804 >> 2;
         $806 = $805 & 3;
         $807 = Math_imul($801, $806)|0;
         $808 = $807&255;
         $809 = $cur1;
         $810 = ((($809)) + 1|0);
         $cur1 = $810;
         HEAP8[$809>>0] = $808;
         $811 = $scale;
         $812 = $811&255;
         $813 = $in;
         $814 = HEAP8[$813>>0]|0;
         $815 = $814&255;
         $816 = $815 & 3;
         $817 = Math_imul($812, $816)|0;
         $818 = $817&255;
         $819 = $cur1;
         $820 = ((($819)) + 1|0);
         $cur1 = $820;
         HEAP8[$819>>0] = $818;
         $821 = $k;
         $822 = (($821) - 4)|0;
         $k = $822;
         $823 = $in;
         $824 = ((($823)) + 1|0);
         $in = $824;
        }
        $825 = $k;
        $826 = ($825|0)>(0);
        if ($826) {
         $827 = $scale;
         $828 = $827&255;
         $829 = $in;
         $830 = HEAP8[$829>>0]|0;
         $831 = $830&255;
         $832 = $831 >> 6;
         $833 = Math_imul($828, $832)|0;
         $834 = $833&255;
         $835 = $cur1;
         $836 = ((($835)) + 1|0);
         $cur1 = $836;
         HEAP8[$835>>0] = $834;
        }
        $837 = $k;
        $838 = ($837|0)>(1);
        if ($838) {
         $839 = $scale;
         $840 = $839&255;
         $841 = $in;
         $842 = HEAP8[$841>>0]|0;
         $843 = $842&255;
         $844 = $843 >> 4;
         $845 = $844 & 3;
         $846 = Math_imul($840, $845)|0;
         $847 = $846&255;
         $848 = $cur1;
         $849 = ((($848)) + 1|0);
         $cur1 = $849;
         HEAP8[$848>>0] = $847;
        }
        $850 = $k;
        $851 = ($850|0)>(2);
        if (!($851)) {
         break;
        }
        $852 = $scale;
        $853 = $852&255;
        $854 = $in;
        $855 = HEAP8[$854>>0]|0;
        $856 = $855&255;
        $857 = $856 >> 2;
        $858 = $857 & 3;
        $859 = Math_imul($853, $858)|0;
        $860 = $859&255;
        $861 = $cur1;
        $862 = ((($861)) + 1|0);
        $cur1 = $862;
        HEAP8[$861>>0] = $860;
        break;
       }
       $863 = $7;
       $864 = ($863|0)==(1);
       if ($864) {
        $865 = $5;
        $866 = $img_n;
        $867 = Math_imul($865, $866)|0;
        $k = $867;
        while(1) {
         $868 = $k;
         $869 = ($868|0)>=(8);
         if (!($869)) {
          break;
         }
         $870 = $scale;
         $871 = $870&255;
         $872 = $in;
         $873 = HEAP8[$872>>0]|0;
         $874 = $873&255;
         $875 = $874 >> 7;
         $876 = Math_imul($871, $875)|0;
         $877 = $876&255;
         $878 = $cur1;
         $879 = ((($878)) + 1|0);
         $cur1 = $879;
         HEAP8[$878>>0] = $877;
         $880 = $scale;
         $881 = $880&255;
         $882 = $in;
         $883 = HEAP8[$882>>0]|0;
         $884 = $883&255;
         $885 = $884 >> 6;
         $886 = $885 & 1;
         $887 = Math_imul($881, $886)|0;
         $888 = $887&255;
         $889 = $cur1;
         $890 = ((($889)) + 1|0);
         $cur1 = $890;
         HEAP8[$889>>0] = $888;
         $891 = $scale;
         $892 = $891&255;
         $893 = $in;
         $894 = HEAP8[$893>>0]|0;
         $895 = $894&255;
         $896 = $895 >> 5;
         $897 = $896 & 1;
         $898 = Math_imul($892, $897)|0;
         $899 = $898&255;
         $900 = $cur1;
         $901 = ((($900)) + 1|0);
         $cur1 = $901;
         HEAP8[$900>>0] = $899;
         $902 = $scale;
         $903 = $902&255;
         $904 = $in;
         $905 = HEAP8[$904>>0]|0;
         $906 = $905&255;
         $907 = $906 >> 4;
         $908 = $907 & 1;
         $909 = Math_imul($903, $908)|0;
         $910 = $909&255;
         $911 = $cur1;
         $912 = ((($911)) + 1|0);
         $cur1 = $912;
         HEAP8[$911>>0] = $910;
         $913 = $scale;
         $914 = $913&255;
         $915 = $in;
         $916 = HEAP8[$915>>0]|0;
         $917 = $916&255;
         $918 = $917 >> 3;
         $919 = $918 & 1;
         $920 = Math_imul($914, $919)|0;
         $921 = $920&255;
         $922 = $cur1;
         $923 = ((($922)) + 1|0);
         $cur1 = $923;
         HEAP8[$922>>0] = $921;
         $924 = $scale;
         $925 = $924&255;
         $926 = $in;
         $927 = HEAP8[$926>>0]|0;
         $928 = $927&255;
         $929 = $928 >> 2;
         $930 = $929 & 1;
         $931 = Math_imul($925, $930)|0;
         $932 = $931&255;
         $933 = $cur1;
         $934 = ((($933)) + 1|0);
         $cur1 = $934;
         HEAP8[$933>>0] = $932;
         $935 = $scale;
         $936 = $935&255;
         $937 = $in;
         $938 = HEAP8[$937>>0]|0;
         $939 = $938&255;
         $940 = $939 >> 1;
         $941 = $940 & 1;
         $942 = Math_imul($936, $941)|0;
         $943 = $942&255;
         $944 = $cur1;
         $945 = ((($944)) + 1|0);
         $cur1 = $945;
         HEAP8[$944>>0] = $943;
         $946 = $scale;
         $947 = $946&255;
         $948 = $in;
         $949 = HEAP8[$948>>0]|0;
         $950 = $949&255;
         $951 = $950 & 1;
         $952 = Math_imul($947, $951)|0;
         $953 = $952&255;
         $954 = $cur1;
         $955 = ((($954)) + 1|0);
         $cur1 = $955;
         HEAP8[$954>>0] = $953;
         $956 = $k;
         $957 = (($956) - 8)|0;
         $k = $957;
         $958 = $in;
         $959 = ((($958)) + 1|0);
         $in = $959;
        }
        $960 = $k;
        $961 = ($960|0)>(0);
        if ($961) {
         $962 = $scale;
         $963 = $962&255;
         $964 = $in;
         $965 = HEAP8[$964>>0]|0;
         $966 = $965&255;
         $967 = $966 >> 7;
         $968 = Math_imul($963, $967)|0;
         $969 = $968&255;
         $970 = $cur1;
         $971 = ((($970)) + 1|0);
         $cur1 = $971;
         HEAP8[$970>>0] = $969;
        }
        $972 = $k;
        $973 = ($972|0)>(1);
        if ($973) {
         $974 = $scale;
         $975 = $974&255;
         $976 = $in;
         $977 = HEAP8[$976>>0]|0;
         $978 = $977&255;
         $979 = $978 >> 6;
         $980 = $979 & 1;
         $981 = Math_imul($975, $980)|0;
         $982 = $981&255;
         $983 = $cur1;
         $984 = ((($983)) + 1|0);
         $cur1 = $984;
         HEAP8[$983>>0] = $982;
        }
        $985 = $k;
        $986 = ($985|0)>(2);
        if ($986) {
         $987 = $scale;
         $988 = $987&255;
         $989 = $in;
         $990 = HEAP8[$989>>0]|0;
         $991 = $990&255;
         $992 = $991 >> 5;
         $993 = $992 & 1;
         $994 = Math_imul($988, $993)|0;
         $995 = $994&255;
         $996 = $cur1;
         $997 = ((($996)) + 1|0);
         $cur1 = $997;
         HEAP8[$996>>0] = $995;
        }
        $998 = $k;
        $999 = ($998|0)>(3);
        if ($999) {
         $1000 = $scale;
         $1001 = $1000&255;
         $1002 = $in;
         $1003 = HEAP8[$1002>>0]|0;
         $1004 = $1003&255;
         $1005 = $1004 >> 4;
         $1006 = $1005 & 1;
         $1007 = Math_imul($1001, $1006)|0;
         $1008 = $1007&255;
         $1009 = $cur1;
         $1010 = ((($1009)) + 1|0);
         $cur1 = $1010;
         HEAP8[$1009>>0] = $1008;
        }
        $1011 = $k;
        $1012 = ($1011|0)>(4);
        if ($1012) {
         $1013 = $scale;
         $1014 = $1013&255;
         $1015 = $in;
         $1016 = HEAP8[$1015>>0]|0;
         $1017 = $1016&255;
         $1018 = $1017 >> 3;
         $1019 = $1018 & 1;
         $1020 = Math_imul($1014, $1019)|0;
         $1021 = $1020&255;
         $1022 = $cur1;
         $1023 = ((($1022)) + 1|0);
         $cur1 = $1023;
         HEAP8[$1022>>0] = $1021;
        }
        $1024 = $k;
        $1025 = ($1024|0)>(5);
        if ($1025) {
         $1026 = $scale;
         $1027 = $1026&255;
         $1028 = $in;
         $1029 = HEAP8[$1028>>0]|0;
         $1030 = $1029&255;
         $1031 = $1030 >> 2;
         $1032 = $1031 & 1;
         $1033 = Math_imul($1027, $1032)|0;
         $1034 = $1033&255;
         $1035 = $cur1;
         $1036 = ((($1035)) + 1|0);
         $cur1 = $1036;
         HEAP8[$1035>>0] = $1034;
        }
        $1037 = $k;
        $1038 = ($1037|0)>(6);
        if ($1038) {
         $1039 = $scale;
         $1040 = $1039&255;
         $1041 = $in;
         $1042 = HEAP8[$1041>>0]|0;
         $1043 = $1042&255;
         $1044 = $1043 >> 1;
         $1045 = $1044 & 1;
         $1046 = Math_imul($1040, $1045)|0;
         $1047 = $1046&255;
         $1048 = $cur1;
         $1049 = ((($1048)) + 1|0);
         $cur1 = $1049;
         HEAP8[$1048>>0] = $1047;
        }
       }
      }
     } while(0);
     $1050 = $img_n;
     $1051 = $4;
     $1052 = ($1050|0)!=($1051|0);
     L198: do {
      if ($1052) {
       $1053 = $1;
       $1054 = ((($1053)) + 12|0);
       $1055 = HEAP32[$1054>>2]|0;
       $1056 = $stride;
       $1057 = $j;
       $1058 = Math_imul($1056, $1057)|0;
       $1059 = (($1055) + ($1058)|0);
       $cur2 = $1059;
       $1060 = $img_n;
       $1061 = ($1060|0)==(1);
       if ($1061) {
        $1062 = $5;
        $1063 = (($1062) - 1)|0;
        $i3 = $1063;
        while(1) {
         $1064 = $i3;
         $1065 = ($1064|0)>=(0);
         if (!($1065)) {
          break L198;
         }
         $1066 = $i3;
         $1067 = $1066<<1;
         $1068 = (($1067) + 1)|0;
         $1069 = $cur2;
         $1070 = (($1069) + ($1068)|0);
         HEAP8[$1070>>0] = -1;
         $1071 = $i3;
         $1072 = $cur2;
         $1073 = (($1072) + ($1071)|0);
         $1074 = HEAP8[$1073>>0]|0;
         $1075 = $i3;
         $1076 = $1075<<1;
         $1077 = (($1076) + 0)|0;
         $1078 = $cur2;
         $1079 = (($1078) + ($1077)|0);
         HEAP8[$1079>>0] = $1074;
         $1080 = $i3;
         $1081 = (($1080) + -1)|0;
         $i3 = $1081;
        }
       }
       $1082 = $img_n;
       $1083 = ($1082|0)==(3);
       if (!($1083)) {
        break L145;
       }
       $1084 = $5;
       $1085 = (($1084) - 1)|0;
       $i3 = $1085;
       while(1) {
        $1086 = $i3;
        $1087 = ($1086|0)>=(0);
        if (!($1087)) {
         break L198;
        }
        $1088 = $i3;
        $1089 = $1088<<2;
        $1090 = (($1089) + 3)|0;
        $1091 = $cur2;
        $1092 = (($1091) + ($1090)|0);
        HEAP8[$1092>>0] = -1;
        $1093 = $i3;
        $1094 = ($1093*3)|0;
        $1095 = (($1094) + 2)|0;
        $1096 = $cur2;
        $1097 = (($1096) + ($1095)|0);
        $1098 = HEAP8[$1097>>0]|0;
        $1099 = $i3;
        $1100 = $1099<<2;
        $1101 = (($1100) + 2)|0;
        $1102 = $cur2;
        $1103 = (($1102) + ($1101)|0);
        HEAP8[$1103>>0] = $1098;
        $1104 = $i3;
        $1105 = ($1104*3)|0;
        $1106 = (($1105) + 1)|0;
        $1107 = $cur2;
        $1108 = (($1107) + ($1106)|0);
        $1109 = HEAP8[$1108>>0]|0;
        $1110 = $i3;
        $1111 = $1110<<2;
        $1112 = (($1111) + 1)|0;
        $1113 = $cur2;
        $1114 = (($1113) + ($1112)|0);
        HEAP8[$1114>>0] = $1109;
        $1115 = $i3;
        $1116 = ($1115*3)|0;
        $1117 = (($1116) + 0)|0;
        $1118 = $cur2;
        $1119 = (($1118) + ($1117)|0);
        $1120 = HEAP8[$1119>>0]|0;
        $1121 = $i3;
        $1122 = $1121<<2;
        $1123 = (($1122) + 0)|0;
        $1124 = $cur2;
        $1125 = (($1124) + ($1123)|0);
        HEAP8[$1125>>0] = $1120;
        $1126 = $i3;
        $1127 = (($1126) + -1)|0;
        $i3 = $1127;
       }
      }
     } while(0);
     $1128 = $j;
     $1129 = (($1128) + 1)|0;
     $j = $1129;
    }
    ___assert_fail((2328|0),(1928|0),4121,(2200|0));
    // unreachable;
   }
  } while(0);
  $0 = 1;
  $1130 = $0;
  STACKTOP = sp;return ($1130|0);
 }
 return (0)|0;
}
function __ZL11stbi__paethiii($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + ($5))|0;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $p = $8;
 $9 = $p;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $12 = (_abs($11)|0);
 $pa = $12;
 $13 = $p;
 $14 = $2;
 $15 = (($13) - ($14))|0;
 $16 = (_abs($15)|0);
 $pb = $16;
 $17 = $p;
 $18 = $3;
 $19 = (($17) - ($18))|0;
 $20 = (_abs($19)|0);
 $pc = $20;
 $21 = $pa;
 $22 = $pb;
 $23 = ($21|0)<=($22|0);
 if ($23) {
  $24 = $pa;
  $25 = $pc;
  $26 = ($24|0)<=($25|0);
  if ($26) {
   $27 = $1;
   $0 = $27;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $28 = $pb;
 $29 = $pc;
 $30 = ($28|0)<=($29|0);
 if ($30) {
  $31 = $2;
  $0 = $31;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $32 = $3;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZL24stbi__decode_jpeg_headerP10stbi__jpegi($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $scan;
 $3 = $1;
 $4 = ((($3)) + 18116|0);
 HEAP8[$4>>0] = -1;
 $5 = $1;
 $6 = (__ZL16stbi__get_markerP10stbi__jpeg($5)|0);
 $7 = $6&255;
 $m = $7;
 $8 = $m;
 $9 = ($8|0)==(216);
 if (!($9)) {
  $10 = (__ZL9stbi__errPKc(2368)|0);
  $0 = $10;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $11 = $2;
 $12 = ($11|0)==(1);
 if ($12) {
  $0 = 1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $13 = $1;
 $14 = (__ZL16stbi__get_markerP10stbi__jpeg($13)|0);
 $15 = $14&255;
 $m = $15;
 L9: while(1) {
  $16 = $m;
  $17 = ($16|0)==(192);
  $18 = $m;
  $19 = ($18|0)==(193);
  $or$cond = $17 | $19;
  if ($or$cond) {
   $23 = 1;
  } else {
   $20 = $m;
   $21 = ($20|0)==(194);
   $23 = $21;
  }
  $22 = $23 ^ 1;
  if (!($22)) {
   label = 16;
   break;
  }
  $24 = $1;
  $25 = $m;
  $26 = (__ZL20stbi__process_markerP10stbi__jpegi($24,$25)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   label = 10;
   break;
  }
  $28 = $1;
  $29 = (__ZL16stbi__get_markerP10stbi__jpeg($28)|0);
  $30 = $29&255;
  $m = $30;
  while(1) {
   $31 = $m;
   $32 = ($31|0)==(255);
   if (!($32)) {
    continue L9;
   }
   $33 = $1;
   $34 = HEAP32[$33>>2]|0;
   $35 = (__ZL12stbi__at_eofP13stbi__context($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    label = 14;
    break L9;
   }
   $38 = $1;
   $39 = (__ZL16stbi__get_markerP10stbi__jpeg($38)|0);
   $40 = $39&255;
   $m = $40;
  }
 }
 if ((label|0) == 10) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 14) {
  $37 = (__ZL9stbi__errPKc(2376)|0);
  $0 = $37;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 16) {
  $41 = $m;
  $42 = ($41|0)==(194);
  $43 = $42&1;
  $44 = $1;
  $45 = ((($44)) + 18124|0);
  HEAP32[$45>>2] = $43;
  $46 = $1;
  $47 = $2;
  $48 = (__ZL26stbi__process_frame_headerP10stbi__jpegi($46,$47)|0);
  $49 = ($48|0)!=(0);
  if ($49) {
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
   $0 = 0;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 }
 return (0)|0;
}
function __ZL16stbi__get_markerP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $1;
 $3 = ((($2)) + 18116|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(255);
 $7 = $1;
 if ($6) {
  $8 = ((($7)) + 18116|0);
  $9 = HEAP8[$8>>0]|0;
  $x = $9;
  $10 = $1;
  $11 = ((($10)) + 18116|0);
  HEAP8[$11>>0] = -1;
  $12 = $x;
  $0 = $12;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
 $x = $14;
 $15 = $x;
 $16 = $15&255;
 $17 = ($16|0)!=(255);
 if ($17) {
  $0 = -1;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 while(1) {
  $18 = $x;
  $19 = $18&255;
  $20 = ($19|0)==(255);
  if (!($20)) {
   break;
  }
  $21 = $1;
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
  $x = $23;
 }
 $24 = $x;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function __ZL20stbi__process_markerP10stbi__jpegi($z,$m) {
 $z = $z|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $L = 0, $i = 0, $i1 = 0, $n = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $p = 0, $q = 0, $q2 = 0, $sizes = 0, $t = 0, $tc = 0, $th = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sizes = sp + 16|0;
 $1 = $z;
 $2 = $m;
 $3 = $2;
 if ((($3|0) == 255)) {
  $4 = (__ZL9stbi__errPKc(2520)|0);
  $0 = $4;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 } else if ((($3|0) == 219)) {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZL13stbi__get16beP13stbi__context($16)|0);
  $18 = (($17) - 2)|0;
  $L = $18;
  while(1) {
   $19 = $L;
   $20 = ($19|0)>(0);
   if (!($20)) {
    label = 16;
    break;
   }
   $21 = $1;
   $22 = HEAP32[$21>>2]|0;
   $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
   $24 = $23&255;
   $q = $24;
   $25 = $q;
   $26 = $25 >> 4;
   $p = $26;
   $27 = $q;
   $28 = $27 & 15;
   $t = $28;
   $29 = $p;
   $30 = ($29|0)!=(0);
   if ($30) {
    label = 9;
    break;
   }
   $32 = $t;
   $33 = ($32|0)>(3);
   if ($33) {
    label = 11;
    break;
   }
   $i = 0;
   while(1) {
    $35 = $i;
    $36 = ($35|0)<(64);
    if (!($36)) {
     break;
    }
    $37 = $1;
    $38 = HEAP32[$37>>2]|0;
    $39 = (__ZL10stbi__get8P13stbi__context($38)|0);
    $40 = $i;
    $41 = (2584 + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $t;
    $45 = $1;
    $46 = ((($45)) + 13444|0);
    $47 = (($46) + ($44<<6)|0);
    $48 = (($47) + ($43)|0);
    HEAP8[$48>>0] = $39;
    $49 = $i;
    $50 = (($49) + 1)|0;
    $i = $50;
   }
   $51 = $L;
   $52 = (($51) - 65)|0;
   $L = $52;
  }
  if ((label|0) == 9) {
   $31 = (__ZL9stbi__errPKc(2552)|0);
   $0 = $31;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 11) {
   $34 = (__ZL9stbi__errPKc(2568)|0);
   $0 = $34;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 16) {
   $53 = $L;
   $54 = ($53|0)==(0);
   $55 = $54&1;
   $0 = $55;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 } else if ((($3|0) == 221)) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = (__ZL13stbi__get16beP13stbi__context($6)|0);
  $8 = ($7|0)!=(4);
  if ($8) {
   $9 = (__ZL9stbi__errPKc(2536)|0);
   $0 = $9;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  } else {
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   $12 = (__ZL13stbi__get16beP13stbi__context($11)|0);
   $13 = $1;
   $14 = ((($13)) + 18168|0);
   HEAP32[$14>>2] = $12;
   $0 = 1;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 } else if ((($3|0) == 196)) {
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = (__ZL13stbi__get16beP13stbi__context($57)|0);
  $59 = (($58) - 2)|0;
  $L = $59;
  while(1) {
   $60 = $L;
   $61 = ($60|0)>(0);
   if (!($61)) {
    label = 37;
    break;
   }
   $n = 0;
   $62 = $1;
   $63 = HEAP32[$62>>2]|0;
   $64 = (__ZL10stbi__get8P13stbi__context($63)|0);
   $65 = $64&255;
   $q2 = $65;
   $66 = $q2;
   $67 = $66 >> 4;
   $tc = $67;
   $68 = $q2;
   $69 = $68 & 15;
   $th = $69;
   $70 = $tc;
   $71 = ($70|0)>(1);
   $72 = $th;
   $73 = ($72|0)>(3);
   $or$cond = $71 | $73;
   if ($or$cond) {
    label = 20;
    break;
   }
   $i1 = 0;
   while(1) {
    $75 = $i1;
    $76 = ($75|0)<(16);
    if (!($76)) {
     break;
    }
    $77 = $1;
    $78 = HEAP32[$77>>2]|0;
    $79 = (__ZL10stbi__get8P13stbi__context($78)|0);
    $80 = $79&255;
    $81 = $i1;
    $82 = (($sizes) + ($81<<2)|0);
    HEAP32[$82>>2] = $80;
    $83 = $i1;
    $84 = (($sizes) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $n;
    $87 = (($86) + ($85))|0;
    $n = $87;
    $88 = $i1;
    $89 = (($88) + 1)|0;
    $i1 = $89;
   }
   $90 = $L;
   $91 = (($90) - 17)|0;
   $L = $91;
   $92 = $tc;
   $93 = ($92|0)==(0);
   $94 = $1;
   if ($93) {
    $95 = ((($94)) + 4|0);
    $96 = $th;
    $97 = (($95) + (($96*1680)|0)|0);
    $98 = (__ZL19stbi__build_huffmanP13stbi__huffmanPi($97,$sizes)|0);
    $99 = ($98|0)!=(0);
    if (!($99)) {
     label = 26;
     break;
    }
    $100 = $th;
    $101 = $1;
    $102 = ((($101)) + 4|0);
    $103 = (($102) + (($100*1680)|0)|0);
    $104 = ((($103)) + 1024|0);
    $v = $104;
   } else {
    $105 = ((($94)) + 6724|0);
    $106 = $th;
    $107 = (($105) + (($106*1680)|0)|0);
    $108 = (__ZL19stbi__build_huffmanP13stbi__huffmanPi($107,$sizes)|0);
    $109 = ($108|0)!=(0);
    if (!($109)) {
     label = 29;
     break;
    }
    $110 = $th;
    $111 = $1;
    $112 = ((($111)) + 6724|0);
    $113 = (($112) + (($110*1680)|0)|0);
    $114 = ((($113)) + 1024|0);
    $v = $114;
   }
   $i1 = 0;
   while(1) {
    $115 = $i1;
    $116 = $n;
    $117 = ($115|0)<($116|0);
    if (!($117)) {
     break;
    }
    $118 = $1;
    $119 = HEAP32[$118>>2]|0;
    $120 = (__ZL10stbi__get8P13stbi__context($119)|0);
    $121 = $i1;
    $122 = $v;
    $123 = (($122) + ($121)|0);
    HEAP8[$123>>0] = $120;
    $124 = $i1;
    $125 = (($124) + 1)|0;
    $i1 = $125;
   }
   $126 = $tc;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $th;
    $129 = $1;
    $130 = ((($129)) + 13700|0);
    $131 = (($130) + ($128<<10)|0);
    $132 = $1;
    $133 = ((($132)) + 6724|0);
    $134 = $th;
    $135 = (($133) + (($134*1680)|0)|0);
    __ZL19stbi__build_fast_acPsP13stbi__huffman($131,$135);
   }
   $136 = $n;
   $137 = $L;
   $138 = (($137) - ($136))|0;
   $L = $138;
  }
  if ((label|0) == 20) {
   $74 = (__ZL9stbi__errPKc(2664)|0);
   $0 = $74;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 26) {
   $0 = 0;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 29) {
   $0 = 0;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 37) {
   $139 = $L;
   $140 = ($139|0)==(0);
   $141 = $140&1;
   $0 = $141;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 } else {
  $142 = $2;
  $143 = ($142|0)>=(224);
  $144 = $2;
  $145 = ($144|0)<=(239);
  $or$cond3 = $143 & $145;
  $146 = $2;
  $147 = ($146|0)==(254);
  $or$cond5 = $or$cond3 | $147;
  if ($or$cond5) {
   $148 = $1;
   $149 = HEAP32[$148>>2]|0;
   $150 = $1;
   $151 = HEAP32[$150>>2]|0;
   $152 = (__ZL13stbi__get16beP13stbi__context($151)|0);
   $153 = (($152) - 2)|0;
   __ZL10stbi__skipP13stbi__contexti($149,$153);
   $0 = 1;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  } else {
   $0 = 0;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 }
 return (0)|0;
}
function __ZL26stbi__process_frame_headerP10stbi__jpegi($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Lf = 0, $c = 0, $h_max = 0, $i = 0, $or$cond = 0, $p = 0, $q = 0, $s = 0, $v_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $scan;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $s = $4;
 $h_max = 1;
 $v_max = 1;
 $5 = $s;
 $6 = (__ZL13stbi__get16beP13stbi__context($5)|0);
 $Lf = $6;
 $7 = $Lf;
 $8 = ($7|0)<(11);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(2384)|0);
  $0 = $9;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $10 = $s;
 $11 = (__ZL10stbi__get8P13stbi__context($10)|0);
 $12 = $11&255;
 $p = $12;
 $13 = $p;
 $14 = ($13|0)!=(8);
 if ($14) {
  $15 = (__ZL9stbi__errPKc(2400)|0);
  $0 = $15;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $16 = $s;
 $17 = (__ZL13stbi__get16beP13stbi__context($16)|0);
 $18 = $s;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = $s;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = (__ZL9stbi__errPKc(2416)|0);
  $0 = $24;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $25 = $s;
 $26 = (__ZL13stbi__get16beP13stbi__context($25)|0);
 $27 = $s;
 HEAP32[$27>>2] = $26;
 $28 = $s;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = (__ZL9stbi__errPKc(2440)|0);
  $0 = $31;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $32 = $s;
 $33 = (__ZL10stbi__get8P13stbi__context($32)|0);
 $34 = $33&255;
 $c = $34;
 $35 = $c;
 $36 = ($35|0)!=(3);
 $37 = $c;
 $38 = ($37|0)!=(1);
 $or$cond = $36 & $38;
 if ($or$cond) {
  $39 = (__ZL9stbi__errPKc(2448)|0);
  $0 = $39;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $40 = $c;
 $41 = $s;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = $40;
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = $c;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $i;
  $47 = $1;
  $48 = ((($47)) + 17820|0);
  $49 = (($48) + (($46*72)|0)|0);
  $50 = ((($49)) + 44|0);
  HEAP32[$50>>2] = 0;
  $51 = $i;
  $52 = $1;
  $53 = ((($52)) + 17820|0);
  $54 = (($53) + (($51*72)|0)|0);
  $55 = ((($54)) + 56|0);
  HEAP32[$55>>2] = 0;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 $58 = $Lf;
 $59 = $s;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61*3)|0;
 $63 = (8 + ($62))|0;
 $64 = ($58|0)!=($63|0);
 if ($64) {
  $65 = (__ZL9stbi__errPKc(2384)|0);
  $0 = $65;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $i = 0;
 while(1) {
  $66 = $i;
  $67 = $s;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($66|0)<($69|0);
  if (!($70)) {
   label = 30;
   break;
  }
  $71 = $s;
  $72 = (__ZL10stbi__get8P13stbi__context($71)|0);
  $73 = $72&255;
  $74 = $i;
  $75 = $1;
  $76 = ((($75)) + 17820|0);
  $77 = (($76) + (($74*72)|0)|0);
  HEAP32[$77>>2] = $73;
  $78 = $i;
  $79 = $1;
  $80 = ((($79)) + 17820|0);
  $81 = (($80) + (($78*72)|0)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $i;
  $84 = (($83) + 1)|0;
  $85 = ($82|0)!=($84|0);
  if ($85) {
   $86 = $i;
   $87 = $1;
   $88 = ((($87)) + 17820|0);
   $89 = (($88) + (($86*72)|0)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $i;
   $92 = ($90|0)!=($91|0);
   if ($92) {
    label = 20;
    break;
   }
  }
  $94 = $s;
  $95 = (__ZL10stbi__get8P13stbi__context($94)|0);
  $96 = $95&255;
  $q = $96;
  $97 = $q;
  $98 = $97 >> 4;
  $99 = $i;
  $100 = $1;
  $101 = ((($100)) + 17820|0);
  $102 = (($101) + (($99*72)|0)|0);
  $103 = ((($102)) + 4|0);
  HEAP32[$103>>2] = $98;
  $104 = $i;
  $105 = $1;
  $106 = ((($105)) + 17820|0);
  $107 = (($106) + (($104*72)|0)|0);
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)!=(0);
  if (!($110)) {
   label = 23;
   break;
  }
  $111 = $i;
  $112 = $1;
  $113 = ((($112)) + 17820|0);
  $114 = (($113) + (($111*72)|0)|0);
  $115 = ((($114)) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($116|0)>(4);
  if ($117) {
   label = 23;
   break;
  }
  $119 = $q;
  $120 = $119 & 15;
  $121 = $i;
  $122 = $1;
  $123 = ((($122)) + 17820|0);
  $124 = (($123) + (($121*72)|0)|0);
  $125 = ((($124)) + 8|0);
  HEAP32[$125>>2] = $120;
  $126 = $i;
  $127 = $1;
  $128 = ((($127)) + 17820|0);
  $129 = (($128) + (($126*72)|0)|0);
  $130 = ((($129)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)!=(0);
  if (!($132)) {
   label = 26;
   break;
  }
  $133 = $i;
  $134 = $1;
  $135 = ((($134)) + 17820|0);
  $136 = (($135) + (($133*72)|0)|0);
  $137 = ((($136)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)>(4);
  if ($139) {
   label = 26;
   break;
  }
  $141 = $s;
  $142 = (__ZL10stbi__get8P13stbi__context($141)|0);
  $143 = $142&255;
  $144 = $i;
  $145 = $1;
  $146 = ((($145)) + 17820|0);
  $147 = (($146) + (($144*72)|0)|0);
  $148 = ((($147)) + 12|0);
  HEAP32[$148>>2] = $143;
  $149 = $i;
  $150 = $1;
  $151 = ((($150)) + 17820|0);
  $152 = (($151) + (($149*72)|0)|0);
  $153 = ((($152)) + 12|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154|0)>(3);
  if ($155) {
   label = 28;
   break;
  }
  $157 = $i;
  $158 = (($157) + 1)|0;
  $i = $158;
 }
 if ((label|0) == 20) {
  $93 = (__ZL9stbi__errPKc(2472)|0);
  $0 = $93;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 23) {
  $118 = (__ZL9stbi__errPKc(2496)|0);
  $0 = $118;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 26) {
  $140 = (__ZL9stbi__errPKc(2504)|0);
  $0 = $140;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 28) {
  $156 = (__ZL9stbi__errPKc(2512)|0);
  $0 = $156;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 30) {
  $159 = $2;
  $160 = ($159|0)!=(0);
  if ($160) {
   $0 = 1;
   $464 = $0;
   STACKTOP = sp;return ($464|0);
  }
  $161 = $s;
  $162 = HEAP32[$161>>2]|0;
  $163 = (1073741824 / ($162>>>0))&-1;
  $164 = $s;
  $165 = ((($164)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($163>>>0) / ($166>>>0))&-1;
  $168 = $s;
  $169 = ((($168)) + 4|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($167>>>0)<($170>>>0);
  if ($171) {
   $172 = (__ZL9stbi__errPKc(1568)|0);
   $0 = $172;
   $464 = $0;
   STACKTOP = sp;return ($464|0);
  }
  $i = 0;
  while(1) {
   $173 = $i;
   $174 = $s;
   $175 = ((($174)) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($173|0)<($176|0);
   if (!($177)) {
    break;
   }
   $178 = $i;
   $179 = $1;
   $180 = ((($179)) + 17820|0);
   $181 = (($180) + (($178*72)|0)|0);
   $182 = ((($181)) + 4|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $h_max;
   $185 = ($183|0)>($184|0);
   if ($185) {
    $186 = $i;
    $187 = $1;
    $188 = ((($187)) + 17820|0);
    $189 = (($188) + (($186*72)|0)|0);
    $190 = ((($189)) + 4|0);
    $191 = HEAP32[$190>>2]|0;
    $h_max = $191;
   }
   $192 = $i;
   $193 = $1;
   $194 = ((($193)) + 17820|0);
   $195 = (($194) + (($192*72)|0)|0);
   $196 = ((($195)) + 8|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $v_max;
   $199 = ($197|0)>($198|0);
   if ($199) {
    $200 = $i;
    $201 = $1;
    $202 = ((($201)) + 17820|0);
    $203 = (($202) + (($200*72)|0)|0);
    $204 = ((($203)) + 8|0);
    $205 = HEAP32[$204>>2]|0;
    $v_max = $205;
   }
   $206 = $i;
   $207 = (($206) + 1)|0;
   $i = $207;
  }
  $208 = $h_max;
  $209 = $1;
  $210 = ((($209)) + 17796|0);
  HEAP32[$210>>2] = $208;
  $211 = $v_max;
  $212 = $1;
  $213 = ((($212)) + 17800|0);
  HEAP32[$213>>2] = $211;
  $214 = $h_max;
  $215 = $214<<3;
  $216 = $1;
  $217 = ((($216)) + 17812|0);
  HEAP32[$217>>2] = $215;
  $218 = $v_max;
  $219 = $218<<3;
  $220 = $1;
  $221 = ((($220)) + 17816|0);
  HEAP32[$221>>2] = $219;
  $222 = $s;
  $223 = HEAP32[$222>>2]|0;
  $224 = $1;
  $225 = ((($224)) + 17812|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($223) + ($226))|0;
  $228 = (($227) - 1)|0;
  $229 = $1;
  $230 = ((($229)) + 17812|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($228>>>0) / ($231>>>0))&-1;
  $233 = $1;
  $234 = ((($233)) + 17804|0);
  HEAP32[$234>>2] = $232;
  $235 = $s;
  $236 = ((($235)) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $1;
  $239 = ((($238)) + 17816|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($237) + ($240))|0;
  $242 = (($241) - 1)|0;
  $243 = $1;
  $244 = ((($243)) + 17816|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = (($242>>>0) / ($245>>>0))&-1;
  $247 = $1;
  $248 = ((($247)) + 17808|0);
  HEAP32[$248>>2] = $246;
  $i = 0;
  while(1) {
   $249 = $i;
   $250 = $s;
   $251 = ((($250)) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($249|0)<($252|0);
   if (!($253)) {
    label = 52;
    break;
   }
   $254 = $s;
   $255 = HEAP32[$254>>2]|0;
   $256 = $i;
   $257 = $1;
   $258 = ((($257)) + 17820|0);
   $259 = (($258) + (($256*72)|0)|0);
   $260 = ((($259)) + 4|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = Math_imul($255, $261)|0;
   $263 = $h_max;
   $264 = (($262) + ($263))|0;
   $265 = (($264) - 1)|0;
   $266 = $h_max;
   $267 = (($265>>>0) / ($266>>>0))&-1;
   $268 = $i;
   $269 = $1;
   $270 = ((($269)) + 17820|0);
   $271 = (($270) + (($268*72)|0)|0);
   $272 = ((($271)) + 28|0);
   HEAP32[$272>>2] = $267;
   $273 = $s;
   $274 = ((($273)) + 4|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = $i;
   $277 = $1;
   $278 = ((($277)) + 17820|0);
   $279 = (($278) + (($276*72)|0)|0);
   $280 = ((($279)) + 8|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = Math_imul($275, $281)|0;
   $283 = $v_max;
   $284 = (($282) + ($283))|0;
   $285 = (($284) - 1)|0;
   $286 = $v_max;
   $287 = (($285>>>0) / ($286>>>0))&-1;
   $288 = $i;
   $289 = $1;
   $290 = ((($289)) + 17820|0);
   $291 = (($290) + (($288*72)|0)|0);
   $292 = ((($291)) + 32|0);
   HEAP32[$292>>2] = $287;
   $293 = $1;
   $294 = ((($293)) + 17804|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $i;
   $297 = $1;
   $298 = ((($297)) + 17820|0);
   $299 = (($298) + (($296*72)|0)|0);
   $300 = ((($299)) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = Math_imul($295, $301)|0;
   $303 = $302<<3;
   $304 = $i;
   $305 = $1;
   $306 = ((($305)) + 17820|0);
   $307 = (($306) + (($304*72)|0)|0);
   $308 = ((($307)) + 36|0);
   HEAP32[$308>>2] = $303;
   $309 = $1;
   $310 = ((($309)) + 17808|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = $i;
   $313 = $1;
   $314 = ((($313)) + 17820|0);
   $315 = (($314) + (($312*72)|0)|0);
   $316 = ((($315)) + 8|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = Math_imul($311, $317)|0;
   $319 = $318<<3;
   $320 = $i;
   $321 = $1;
   $322 = ((($321)) + 17820|0);
   $323 = (($322) + (($320*72)|0)|0);
   $324 = ((($323)) + 40|0);
   HEAP32[$324>>2] = $319;
   $325 = $i;
   $326 = $1;
   $327 = ((($326)) + 17820|0);
   $328 = (($327) + (($325*72)|0)|0);
   $329 = ((($328)) + 36|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $i;
   $332 = $1;
   $333 = ((($332)) + 17820|0);
   $334 = (($333) + (($331*72)|0)|0);
   $335 = ((($334)) + 40|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = Math_imul($330, $336)|0;
   $338 = (($337) + 15)|0;
   $339 = (__ZL12stbi__mallocj($338)|0);
   $340 = $i;
   $341 = $1;
   $342 = ((($341)) + 17820|0);
   $343 = (($342) + (($340*72)|0)|0);
   $344 = ((($343)) + 48|0);
   HEAP32[$344>>2] = $339;
   $345 = $i;
   $346 = $1;
   $347 = ((($346)) + 17820|0);
   $348 = (($347) + (($345*72)|0)|0);
   $349 = ((($348)) + 48|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)==(0|0);
   $352 = $i;
   if ($351) {
    break;
   }
   $370 = $1;
   $371 = ((($370)) + 17820|0);
   $372 = (($371) + (($352*72)|0)|0);
   $373 = ((($372)) + 48|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = $374;
   $376 = (($375) + 15)|0;
   $377 = $376 & -16;
   $378 = $377;
   $379 = $i;
   $380 = $1;
   $381 = ((($380)) + 17820|0);
   $382 = (($381) + (($379*72)|0)|0);
   $383 = ((($382)) + 44|0);
   HEAP32[$383>>2] = $378;
   $384 = $i;
   $385 = $1;
   $386 = ((($385)) + 17820|0);
   $387 = (($386) + (($384*72)|0)|0);
   $388 = ((($387)) + 56|0);
   HEAP32[$388>>2] = 0;
   $389 = $1;
   $390 = ((($389)) + 18124|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = ($391|0)!=(0);
   $393 = $i;
   $394 = $1;
   $395 = ((($394)) + 17820|0);
   $396 = (($395) + (($393*72)|0)|0);
   if ($392) {
    $397 = ((($396)) + 36|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + 7)|0;
    $400 = $399 >> 3;
    $401 = $i;
    $402 = $1;
    $403 = ((($402)) + 17820|0);
    $404 = (($403) + (($401*72)|0)|0);
    $405 = ((($404)) + 64|0);
    HEAP32[$405>>2] = $400;
    $406 = $i;
    $407 = $1;
    $408 = ((($407)) + 17820|0);
    $409 = (($408) + (($406*72)|0)|0);
    $410 = ((($409)) + 40|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = (($411) + 7)|0;
    $413 = $412 >> 3;
    $414 = $i;
    $415 = $1;
    $416 = ((($415)) + 17820|0);
    $417 = (($416) + (($414*72)|0)|0);
    $418 = ((($417)) + 68|0);
    HEAP32[$418>>2] = $413;
    $419 = $i;
    $420 = $1;
    $421 = ((($420)) + 17820|0);
    $422 = (($421) + (($419*72)|0)|0);
    $423 = ((($422)) + 64|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $i;
    $426 = $1;
    $427 = ((($426)) + 17820|0);
    $428 = (($427) + (($425*72)|0)|0);
    $429 = ((($428)) + 68|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = Math_imul($424, $430)|0;
    $432 = $431<<6;
    $433 = $432<<1;
    $434 = (($433) + 15)|0;
    $435 = (_malloc($434)|0);
    $436 = $i;
    $437 = $1;
    $438 = ((($437)) + 17820|0);
    $439 = (($438) + (($436*72)|0)|0);
    $440 = ((($439)) + 52|0);
    HEAP32[$440>>2] = $435;
    $441 = $i;
    $442 = $1;
    $443 = ((($442)) + 17820|0);
    $444 = (($443) + (($441*72)|0)|0);
    $445 = ((($444)) + 52|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = $446;
    $448 = (($447) + 15)|0;
    $449 = $448 & -16;
    $450 = $449;
    $451 = $i;
    $452 = $1;
    $453 = ((($452)) + 17820|0);
    $454 = (($453) + (($451*72)|0)|0);
    $455 = ((($454)) + 60|0);
    HEAP32[$455>>2] = $450;
   } else {
    $456 = ((($396)) + 60|0);
    HEAP32[$456>>2] = 0;
    $457 = $i;
    $458 = $1;
    $459 = ((($458)) + 17820|0);
    $460 = (($459) + (($457*72)|0)|0);
    $461 = ((($460)) + 52|0);
    HEAP32[$461>>2] = 0;
   }
   $462 = $i;
   $463 = (($462) + 1)|0;
   $i = $463;
  }
  if ((label|0) == 52) {
   $0 = 1;
   $464 = $0;
   STACKTOP = sp;return ($464|0);
  }
  $353 = (($352) + -1)|0;
  $i = $353;
  while(1) {
   $354 = $i;
   $355 = ($354|0)>=(0);
   if (!($355)) {
    break;
   }
   $356 = $i;
   $357 = $1;
   $358 = ((($357)) + 17820|0);
   $359 = (($358) + (($356*72)|0)|0);
   $360 = ((($359)) + 48|0);
   $361 = HEAP32[$360>>2]|0;
   _free($361);
   $362 = $i;
   $363 = $1;
   $364 = ((($363)) + 17820|0);
   $365 = (($364) + (($362*72)|0)|0);
   $366 = ((($365)) + 44|0);
   HEAP32[$366>>2] = 0;
   $367 = $i;
   $368 = (($367) + -1)|0;
   $i = $368;
  }
  $369 = (__ZL9stbi__errPKc(1832)|0);
  $0 = $369;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 return (0)|0;
}
function __ZL19stbi__build_huffmanP13stbi__huffmanPi($h,$count) {
 $h = $h|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code = 0;
 var $i = 0, $j = 0, $k = 0, $m = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $count;
 $k = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(16);
  if (!($4)) {
   break;
  }
  $j = 0;
  while(1) {
   $5 = $j;
   $6 = $i;
   $7 = $2;
   $8 = (($7) + ($6<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($5|0)<($9|0);
   $11 = $i;
   $12 = (($11) + 1)|0;
   if (!($10)) {
    break;
   }
   $13 = $12&255;
   $14 = $k;
   $15 = (($14) + 1)|0;
   $k = $15;
   $16 = $1;
   $17 = ((($16)) + 1280|0);
   $18 = (($17) + ($14)|0);
   HEAP8[$18>>0] = $13;
   $19 = $j;
   $20 = (($19) + 1)|0;
   $j = $20;
  }
  $i = $12;
 }
 $21 = $k;
 $22 = $1;
 $23 = ((($22)) + 1280|0);
 $24 = (($23) + ($21)|0);
 HEAP8[$24>>0] = 0;
 $code = 0;
 $k = 0;
 $j = 1;
 while(1) {
  $25 = $j;
  $26 = ($25|0)<=(16);
  if (!($26)) {
   break;
  }
  $27 = $k;
  $28 = $code;
  $29 = (($27) - ($28))|0;
  $30 = $j;
  $31 = $1;
  $32 = ((($31)) + 1612|0);
  $33 = (($32) + ($30<<2)|0);
  HEAP32[$33>>2] = $29;
  $34 = $k;
  $35 = $1;
  $36 = ((($35)) + 1280|0);
  $37 = (($36) + ($34)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $j;
  $41 = ($39|0)==($40|0);
  if ($41) {
   while(1) {
    $42 = $k;
    $43 = $1;
    $44 = ((($43)) + 1280|0);
    $45 = (($44) + ($42)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $j;
    $49 = ($47|0)==($48|0);
    $50 = $code;
    if (!($49)) {
     break;
    }
    $51 = (($50) + 1)|0;
    $code = $51;
    $52 = $50&65535;
    $53 = $k;
    $54 = (($53) + 1)|0;
    $k = $54;
    $55 = $1;
    $56 = ((($55)) + 512|0);
    $57 = (($56) + ($53<<1)|0);
    HEAP16[$57>>1] = $52;
   }
   $58 = (($50) - 1)|0;
   $59 = $j;
   $60 = 1 << $59;
   $61 = ($58|0)>=($60|0);
   if ($61) {
    label = 13;
    break;
   }
  }
  $63 = $code;
  $64 = $j;
  $65 = (16 - ($64))|0;
  $66 = $63 << $65;
  $67 = $j;
  $68 = $1;
  $69 = ((($68)) + 1540|0);
  $70 = (($69) + ($67<<2)|0);
  HEAP32[$70>>2] = $66;
  $71 = $code;
  $72 = $71 << 1;
  $code = $72;
  $73 = $j;
  $74 = (($73) + 1)|0;
  $j = $74;
 }
 if ((label|0) == 13) {
  $62 = (__ZL9stbi__errPKc(2680)|0);
  $0 = $62;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $75 = $j;
 $76 = $1;
 $77 = ((($76)) + 1540|0);
 $78 = (($77) + ($75<<2)|0);
 HEAP32[$78>>2] = -1;
 $79 = $1;
 _memset(($79|0),-1,512)|0;
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = $k;
  $82 = ($80|0)<($81|0);
  if (!($82)) {
   break;
  }
  $83 = $i;
  $84 = $1;
  $85 = ((($84)) + 1280|0);
  $86 = (($85) + ($83)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $s = $88;
  $89 = $s;
  $90 = ($89|0)<=(9);
  L25: do {
   if ($90) {
    $91 = $i;
    $92 = $1;
    $93 = ((($92)) + 512|0);
    $94 = (($93) + ($91<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = $s;
    $98 = (9 - ($97))|0;
    $99 = $96 << $98;
    $c = $99;
    $100 = $s;
    $101 = (9 - ($100))|0;
    $102 = 1 << $101;
    $m = $102;
    $j = 0;
    while(1) {
     $103 = $j;
     $104 = $m;
     $105 = ($103|0)<($104|0);
     if (!($105)) {
      break L25;
     }
     $106 = $i;
     $107 = $106&255;
     $108 = $c;
     $109 = $j;
     $110 = (($108) + ($109))|0;
     $111 = $1;
     $112 = (($111) + ($110)|0);
     HEAP8[$112>>0] = $107;
     $113 = $j;
     $114 = (($113) + 1)|0;
     $j = $114;
    }
   }
  } while(0);
  $115 = $i;
  $116 = (($115) + 1)|0;
  $i = $116;
 }
 $0 = 1;
 $117 = $0;
 STACKTOP = sp;return ($117|0);
}
function __ZL19stbi__build_fast_acPsP13stbi__huffman($fast_ac,$h) {
 $fast_ac = $fast_ac|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $fast = 0, $i = 0, $k = 0, $len = 0;
 var $m = 0, $magbits = 0, $or$cond = 0, $rs = 0, $run = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fast_ac;
 $1 = $h;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(512);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $1;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $fast = $7;
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8<<1)|0);
  HEAP16[$10>>1] = 0;
  $11 = $fast;
  $12 = $11&255;
  $13 = ($12|0)<(255);
  if ($13) {
   $14 = $fast;
   $15 = $14&255;
   $16 = $1;
   $17 = ((($16)) + 1024|0);
   $18 = (($17) + ($15)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $rs = $20;
   $21 = $rs;
   $22 = $21 >> 4;
   $23 = $22 & 15;
   $run = $23;
   $24 = $rs;
   $25 = $24 & 15;
   $magbits = $25;
   $26 = $fast;
   $27 = $26&255;
   $28 = $1;
   $29 = ((($28)) + 1280|0);
   $30 = (($29) + ($27)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $len = $32;
   $33 = $magbits;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $len;
    $36 = $magbits;
    $37 = (($35) + ($36))|0;
    $38 = ($37|0)<=(9);
    if ($38) {
     $39 = $i;
     $40 = $len;
     $41 = $39 << $40;
     $42 = $41 & 511;
     $43 = $magbits;
     $44 = (9 - ($43))|0;
     $45 = $42 >> $44;
     $k = $45;
     $46 = $magbits;
     $47 = (($46) - 1)|0;
     $48 = 1 << $47;
     $m = $48;
     $49 = $k;
     $50 = $m;
     $51 = ($49|0)<($50|0);
     if ($51) {
      $52 = $magbits;
      $53 = -1 << $52;
      $54 = (($53) + 1)|0;
      $55 = $k;
      $56 = (($55) + ($54))|0;
      $k = $56;
     }
     $57 = $k;
     $58 = ($57|0)>=(-128);
     $59 = $k;
     $60 = ($59|0)<=(127);
     $or$cond = $58 & $60;
     if ($or$cond) {
      $61 = $k;
      $62 = $61 << 8;
      $63 = $run;
      $64 = $63 << 4;
      $65 = (($62) + ($64))|0;
      $66 = $len;
      $67 = $magbits;
      $68 = (($66) + ($67))|0;
      $69 = (($65) + ($68))|0;
      $70 = $69&65535;
      $71 = $i;
      $72 = $0;
      $73 = (($72) + ($71<<1)|0);
      HEAP16[$73>>1] = $70;
     }
    }
   }
  }
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 STACKTOP = sp;return;
}
function __ZL16stbi__parse_zlibP10stbi__zbufi($a,$parse_header) {
 $a = $a|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $final = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $parse_header;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZL23stbi__parse_zlib_headerP10stbi__zbuf($5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   label = 4;
  } else {
   $0 = 0;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $8 = $1;
   $9 = ((($8)) + 8|0);
   HEAP32[$9>>2] = 0;
   $10 = $1;
   $11 = ((($10)) + 12|0);
   HEAP32[$11>>2] = 0;
   while(1) {
    $12 = $1;
    $13 = (__ZL14stbi__zreceiveP10stbi__zbufi($12,1)|0);
    $final = $13;
    $14 = $1;
    $15 = (__ZL14stbi__zreceiveP10stbi__zbufi($14,2)|0);
    $type = $15;
    $16 = $type;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = $1;
     $19 = (__ZL30stbi__parse_uncomperssed_blockP10stbi__zbuf($18)|0);
     $20 = ($19|0)!=(0);
     if (!($20)) {
      label = 7;
      break;
     }
    } else {
     $21 = $type;
     $22 = ($21|0)==(3);
     if ($22) {
      label = 9;
      break;
     }
     $23 = $type;
     $24 = ($23|0)==(1);
     if ($24) {
      $25 = HEAP8[(2735)>>0]|0;
      $26 = ($25<<24>>24)!=(0);
      if (!($26)) {
       __ZL20stbi__init_zdefaultsv();
      }
      $27 = $1;
      $28 = ((($27)) + 32|0);
      $29 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($28,2736,288)|0);
      $30 = ($29|0)!=(0);
      if (!($30)) {
       label = 14;
       break;
      }
      $31 = $1;
      $32 = ((($31)) + 2052|0);
      $33 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($32,2704,32)|0);
      $34 = ($33|0)!=(0);
      if (!($34)) {
       label = 16;
       break;
      }
     } else {
      $35 = $1;
      $36 = (__ZL27stbi__compute_huffman_codesP10stbi__zbuf($35)|0);
      $37 = ($36|0)!=(0);
      if (!($37)) {
       label = 18;
       break;
      }
     }
     $38 = $1;
     $39 = (__ZL25stbi__parse_huffman_blockP10stbi__zbuf($38)|0);
     $40 = ($39|0)!=(0);
     if (!($40)) {
      label = 20;
      break;
     }
    }
    $41 = $final;
    $42 = ($41|0)!=(0);
    $43 = $42 ^ 1;
    if (!($43)) {
     label = 22;
     break;
    }
   }
   if ((label|0) == 7) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 9) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 14) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 18) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 20) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 22) {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function __ZL23stbi__parse_zlib_headerP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cm = 0, $cmf = 0, $flg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $1;
 $3 = (__ZL11stbi__zget8P10stbi__zbuf($2)|0);
 $4 = $3&255;
 $cmf = $4;
 $5 = $cmf;
 $6 = $5 & 15;
 $cm = $6;
 $7 = $1;
 $8 = (__ZL11stbi__zget8P10stbi__zbuf($7)|0);
 $9 = $8&255;
 $flg = $9;
 $10 = $cmf;
 $11 = $10<<8;
 $12 = $flg;
 $13 = (($11) + ($12))|0;
 $14 = (($13|0) % 31)&-1;
 $15 = ($14|0)!=(0);
 do {
  if ($15) {
   $16 = (__ZL9stbi__errPKc(3936)|0);
   $0 = $16;
  } else {
   $17 = $flg;
   $18 = $17 & 32;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = (__ZL9stbi__errPKc(3952)|0);
    $0 = $20;
    break;
   }
   $21 = $cm;
   $22 = ($21|0)!=(8);
   if ($22) {
    $23 = (__ZL9stbi__errPKc(3968)|0);
    $0 = $23;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZL14stbi__zreceiveP10stbi__zbufi($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = $0;
  __ZL15stbi__fill_bitsP10stbi__zbuf($7);
 }
 $8 = $0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = 1 << $11;
 $13 = (($12) - 1)|0;
 $14 = $10 & $13;
 $k = $14;
 $15 = $1;
 $16 = $0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> $15;
 HEAP32[$17>>2] = $19;
 $20 = $1;
 $21 = $0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) - ($20))|0;
 HEAP32[$22>>2] = $24;
 $25 = $k;
 STACKTOP = sp;return ($25|0);
}
function __ZL30stbi__parse_uncomperssed_blockP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $header = 0, $k = 0, $len = 0, $nlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 20|0;
 $1 = $a;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 7;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 7;
  (__ZL14stbi__zreceiveP10stbi__zbufi($7,$11)|0);
 }
 $k = 0;
 while(1) {
  $12 = $1;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)>(0);
  $16 = $1;
  if (!($15)) {
   break;
  }
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 255;
  $20 = $19&255;
  $21 = $k;
  $22 = (($21) + 1)|0;
  $k = $22;
  $23 = (($header) + ($21)|0);
  HEAP8[$23>>0] = $20;
  $24 = $1;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 >>> 8;
  HEAP32[$25>>2] = $27;
  $28 = $1;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) - 8)|0;
  HEAP32[$29>>2] = $31;
 }
 $32 = ((($16)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  ___assert_fail((3840|0),(1928|0),3726,(3864|0));
  // unreachable;
 }
 while(1) {
  $35 = $k;
  $36 = ($35|0)<(4);
  if (!($36)) {
   break;
  }
  $37 = $1;
  $38 = (__ZL11stbi__zget8P10stbi__zbuf($37)|0);
  $39 = $k;
  $40 = (($39) + 1)|0;
  $k = $40;
  $41 = (($header) + ($39)|0);
  HEAP8[$41>>0] = $38;
 }
 $42 = ((($header)) + 1|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44<<8;
 $46 = HEAP8[$header>>0]|0;
 $47 = $46&255;
 $48 = (($45) + ($47))|0;
 $len = $48;
 $49 = ((($header)) + 3|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51<<8;
 $53 = ((($header)) + 2|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = (($52) + ($55))|0;
 $nlen = $56;
 $57 = $nlen;
 $58 = $len;
 $59 = $58 ^ 65535;
 $60 = ($57|0)!=($59|0);
 if ($60) {
  $61 = (__ZL9stbi__errPKc(3896)|0);
  $0 = $61;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $62 = $1;
 $63 = HEAP32[$62>>2]|0;
 $64 = $len;
 $65 = (($63) + ($64)|0);
 $66 = $1;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($65>>>0)>($68>>>0);
 if ($69) {
  $70 = (__ZL9stbi__errPKc(3912)|0);
  $0 = $70;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $71 = $1;
 $72 = ((($71)) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $len;
 $75 = (($73) + ($74)|0);
 $76 = $1;
 $77 = ((($76)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)>($78>>>0);
 if ($79) {
  $80 = $1;
  $81 = $1;
  $82 = ((($81)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $len;
  $85 = (__ZL13stbi__zexpandP10stbi__zbufPci($80,$83,$84)|0);
  $86 = ($85|0)!=(0);
  if (!($86)) {
   $0 = 0;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
 }
 $87 = $1;
 $88 = ((($87)) + 16|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $1;
 $91 = HEAP32[$90>>2]|0;
 $92 = $len;
 _memcpy(($89|0),($91|0),($92|0))|0;
 $93 = $len;
 $94 = $1;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + ($93)|0);
 HEAP32[$94>>2] = $96;
 $97 = $len;
 $98 = $1;
 $99 = ((($98)) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($97)|0);
 HEAP32[$99>>2] = $101;
 $0 = 1;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function __ZL20stbi__init_zdefaultsv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<=(143);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (2736 + ($2)|0);
  HEAP8[$3>>0] = 8;
  $4 = $i;
  $5 = (($4) + 1)|0;
  $i = $5;
 }
 while(1) {
  $6 = $i;
  $7 = ($6|0)<=(255);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = (2736 + ($8)|0);
  HEAP8[$9>>0] = 9;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 while(1) {
  $12 = $i;
  $13 = ($12|0)<=(279);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = (2736 + ($14)|0);
  HEAP8[$15>>0] = 7;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 while(1) {
  $18 = $i;
  $19 = ($18|0)<=(287);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (2736 + ($20)|0);
  HEAP8[$21>>0] = 8;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<=(31);
  if (!($25)) {
   break;
  }
  $26 = $i;
  $27 = (2704 + ($26)|0);
  HEAP8[$27>>0] = 5;
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 STACKTOP = sp;return;
}
function __ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($z,$sizelist,$num) {
 $z = $z|0;
 $sizelist = $sizelist|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code = 0, $fastv = 0, $i = 0, $k = 0, $k1 = 0, $next_code = 0, $s = 0, $sizes = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code = sp + 80|0;
 $sizes = sp + 8|0;
 $1 = $z;
 $2 = $sizelist;
 $3 = $num;
 $k = 0;
 dest=$sizes; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = $1;
 _memset(($4|0),0,1024)|0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $2;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($sizes) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 HEAP32[$sizes>>2] = 0;
 $i = 1;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(16);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (($sizes) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $i;
  $24 = 1 << $23;
  $25 = ($22|0)>($24|0);
  if ($25) {
   label = 7;
   break;
  }
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 if ((label|0) == 7) {
  $26 = (__ZL9stbi__errPKc(3824)|0);
  $0 = $26;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $code = 0;
 $i = 1;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(16);
  if (!($30)) {
   break;
  }
  $31 = $code;
  $32 = $i;
  $33 = (($next_code) + ($32<<2)|0);
  HEAP32[$33>>2] = $31;
  $34 = $code;
  $35 = $34&65535;
  $36 = $i;
  $37 = $1;
  $38 = ((($37)) + 1024|0);
  $39 = (($38) + ($36<<1)|0);
  HEAP16[$39>>1] = $35;
  $40 = $k;
  $41 = $40&65535;
  $42 = $i;
  $43 = $1;
  $44 = ((($43)) + 1124|0);
  $45 = (($44) + ($42<<1)|0);
  HEAP16[$45>>1] = $41;
  $46 = $code;
  $47 = $i;
  $48 = (($sizes) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) + ($49))|0;
  $code = $50;
  $51 = $i;
  $52 = (($sizes) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $code;
   $56 = (($55) - 1)|0;
   $57 = $i;
   $58 = 1 << $57;
   $59 = ($56|0)>=($58|0);
   if ($59) {
    label = 13;
    break;
   }
  }
  $61 = $code;
  $62 = $i;
  $63 = (16 - ($62))|0;
  $64 = $61 << $63;
  $65 = $i;
  $66 = $1;
  $67 = ((($66)) + 1056|0);
  $68 = (($67) + ($65<<2)|0);
  HEAP32[$68>>2] = $64;
  $69 = $code;
  $70 = $69 << 1;
  $code = $70;
  $71 = $i;
  $72 = (($sizes) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $k;
  $75 = (($74) + ($73))|0;
  $k = $75;
  $76 = $i;
  $77 = (($76) + 1)|0;
  $i = $77;
 }
 if ((label|0) == 13) {
  $60 = (__ZL9stbi__errPKc(3768)|0);
  $0 = $60;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $78 = $1;
 $79 = ((($78)) + 1056|0);
 $80 = ((($79)) + 64|0);
 HEAP32[$80>>2] = 65536;
 $i = 0;
 while(1) {
  $81 = $i;
  $82 = $3;
  $83 = ($81|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $i;
  $85 = $2;
  $86 = (($85) + ($84)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $s = $88;
  $89 = $s;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $s;
   $92 = (($next_code) + ($91<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $s;
   $95 = $1;
   $96 = ((($95)) + 1024|0);
   $97 = (($96) + ($94<<1)|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98&65535;
   $100 = (($93) - ($99))|0;
   $101 = $s;
   $102 = $1;
   $103 = ((($102)) + 1124|0);
   $104 = (($103) + ($101<<1)|0);
   $105 = HEAP16[$104>>1]|0;
   $106 = $105&65535;
   $107 = (($100) + ($106))|0;
   $c = $107;
   $108 = $s;
   $109 = $108 << 9;
   $110 = $i;
   $111 = $109 | $110;
   $112 = $111&65535;
   $fastv = $112;
   $113 = $s;
   $114 = $113&255;
   $115 = $c;
   $116 = $1;
   $117 = ((($116)) + 1156|0);
   $118 = (($117) + ($115)|0);
   HEAP8[$118>>0] = $114;
   $119 = $i;
   $120 = $119&65535;
   $121 = $c;
   $122 = $1;
   $123 = ((($122)) + 1444|0);
   $124 = (($123) + ($121<<1)|0);
   HEAP16[$124>>1] = $120;
   $125 = $s;
   $126 = ($125|0)<=(9);
   L28: do {
    if ($126) {
     $127 = $s;
     $128 = (($next_code) + ($127<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $s;
     $131 = (__ZL17stbi__bit_reverseii($129,$130)|0);
     $k1 = $131;
     while(1) {
      $132 = $k1;
      $133 = ($132|0)<(512);
      if (!($133)) {
       break L28;
      }
      $134 = $fastv;
      $135 = $k1;
      $136 = $1;
      $137 = (($136) + ($135<<1)|0);
      HEAP16[$137>>1] = $134;
      $138 = $s;
      $139 = 1 << $138;
      $140 = $k1;
      $141 = (($140) + ($139))|0;
      $k1 = $141;
     }
    }
   } while(0);
   $142 = $s;
   $143 = (($next_code) + ($142<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($144) + 1)|0;
   HEAP32[$143>>2] = $145;
  }
  $146 = $i;
  $147 = (($146) + 1)|0;
  $i = $147;
 }
 $0 = 1;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function __ZL27stbi__compute_huffman_codesP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c = 0, $codelength_sizes = 0, $hclen = 0, $hdist = 0, $hlit = 0, $i = 0, $lencodes = 0, $n = 0, $or$cond = 0, $s = 0, $z_codelength = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $z_codelength = sp + 32|0;
 $lencodes = sp + 2056|0;
 $codelength_sizes = sp + 2511|0;
 $1 = $a;
 $2 = $1;
 $3 = (__ZL14stbi__zreceiveP10stbi__zbufi($2,5)|0);
 $4 = (($3) + 257)|0;
 $hlit = $4;
 $5 = $1;
 $6 = (__ZL14stbi__zreceiveP10stbi__zbufi($5,5)|0);
 $7 = (($6) + 1)|0;
 $hdist = $7;
 $8 = $1;
 $9 = (__ZL14stbi__zreceiveP10stbi__zbufi($8,4)|0);
 $10 = (($9) + 4)|0;
 $hclen = $10;
 dest=$codelength_sizes; stop=dest+19|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $hclen;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $1;
  $15 = (__ZL14stbi__zreceiveP10stbi__zbufi($14,3)|0);
  $s = $15;
  $16 = $s;
  $17 = $16&255;
  $18 = $i;
  $19 = (3744 + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (($codelength_sizes) + ($21)|0);
  HEAP8[$22>>0] = $17;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($z_codelength,$codelength_sizes,19)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $0 = 0;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $n = 0;
 while(1) {
  $27 = $n;
  $28 = $hlit;
  $29 = $hdist;
  $30 = (($28) + ($29))|0;
  $31 = ($27|0)<($30|0);
  if (!($31)) {
   label = 19;
   break;
  }
  $32 = $1;
  $33 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($32,$z_codelength)|0);
  $c = $33;
  $34 = $c;
  $35 = ($34|0)<(0);
  $36 = $c;
  $37 = ($36|0)>=(19);
  $or$cond = $35 | $37;
  if ($or$cond) {
   label = 9;
   break;
  }
  $39 = $c;
  $40 = ($39|0)<(16);
  $41 = $c;
  if ($40) {
   $42 = $41&255;
   $43 = $n;
   $44 = (($43) + 1)|0;
   $n = $44;
   $45 = (($lencodes) + ($43)|0);
   HEAP8[$45>>0] = $42;
   continue;
  }
  $46 = ($41|0)==(16);
  if ($46) {
   $47 = $1;
   $48 = (__ZL14stbi__zreceiveP10stbi__zbufi($47,2)|0);
   $49 = (($48) + 3)|0;
   $c = $49;
   $50 = $n;
   $51 = (($lencodes) + ($50)|0);
   $52 = $n;
   $53 = (($52) - 1)|0;
   $54 = (($lencodes) + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56&255;
   $58 = $c;
   _memset(($51|0),($57|0),($58|0))|0;
   $59 = $c;
   $60 = $n;
   $61 = (($60) + ($59))|0;
   $n = $61;
   continue;
  }
  $62 = $c;
  $63 = ($62|0)==(17);
  if ($63) {
   $64 = $1;
   $65 = (__ZL14stbi__zreceiveP10stbi__zbufi($64,3)|0);
   $66 = (($65) + 3)|0;
   $c = $66;
   $67 = $n;
   $68 = (($lencodes) + ($67)|0);
   $69 = $c;
   _memset(($68|0),0,($69|0))|0;
   $70 = $c;
   $71 = $n;
   $72 = (($71) + ($70))|0;
   $n = $72;
   continue;
  }
  $73 = $c;
  $74 = ($73|0)==(18);
  if (!($74)) {
   label = 17;
   break;
  }
  $75 = $1;
  $76 = (__ZL14stbi__zreceiveP10stbi__zbufi($75,7)|0);
  $77 = (($76) + 11)|0;
  $c = $77;
  $78 = $n;
  $79 = (($lencodes) + ($78)|0);
  $80 = $c;
  _memset(($79|0),0,($80|0))|0;
  $81 = $c;
  $82 = $n;
  $83 = (($82) + ($81))|0;
  $n = $83;
 }
 if ((label|0) == 9) {
  $38 = (__ZL9stbi__errPKc(3768)|0);
  $0 = $38;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 else if ((label|0) == 17) {
  ___assert_fail((3784|0),(1928|0),3701,(3792|0));
  // unreachable;
 }
 else if ((label|0) == 19) {
  $84 = $n;
  $85 = $hlit;
  $86 = $hdist;
  $87 = (($85) + ($86))|0;
  $88 = ($84|0)!=($87|0);
  if ($88) {
   $89 = (__ZL9stbi__errPKc(3768)|0);
   $0 = $89;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
  $90 = $1;
  $91 = ((($90)) + 32|0);
  $92 = $hlit;
  $93 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($91,$lencodes,$92)|0);
  $94 = ($93|0)!=(0);
  if (!($94)) {
   $0 = 0;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
  $95 = $1;
  $96 = ((($95)) + 2052|0);
  $97 = $hlit;
  $98 = (($lencodes) + ($97)|0);
  $99 = $hdist;
  $100 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($96,$98,$99)|0);
  $101 = ($100|0)!=(0);
  if ($101) {
   $0 = 1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  } else {
   $0 = 0;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
 }
 return (0)|0;
}
function __ZL25stbi__parse_huffman_blockP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $dist = 0, $len = 0, $p = 0, $v = 0, $z = 0, $zout = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $zout = $4;
 L1: while(1) {
  $5 = $1;
  $6 = $1;
  $7 = ((($6)) + 32|0);
  $8 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($5,$7)|0);
  $z = $8;
  $9 = $z;
  $10 = ($9|0)<(256);
  $11 = $z;
  if ($10) {
   $12 = ($11|0)<(0);
   if ($12) {
    label = 4;
    break;
   }
   $14 = $zout;
   $15 = $1;
   $16 = ((($15)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($14>>>0)>=($17>>>0);
   if ($18) {
    $19 = $1;
    $20 = $zout;
    $21 = (__ZL13stbi__zexpandP10stbi__zbufPci($19,$20,1)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     label = 7;
     break;
    }
    $23 = $1;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $zout = $25;
   }
   $26 = $z;
   $27 = $26&255;
   $28 = $zout;
   $29 = ((($28)) + 1|0);
   $zout = $29;
   HEAP8[$28>>0] = $27;
   continue;
  }
  $30 = ($11|0)==(256);
  if ($30) {
   label = 11;
   break;
  }
  $34 = $z;
  $35 = (($34) - 257)|0;
  $z = $35;
  $36 = $z;
  $37 = (3048 + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $len = $38;
  $39 = $z;
  $40 = (3176 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $1;
   $44 = $z;
   $45 = (3176 + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (__ZL14stbi__zreceiveP10stbi__zbufi($43,$46)|0);
   $48 = $len;
   $49 = (($48) + ($47))|0;
   $len = $49;
  }
  $50 = $1;
  $51 = $1;
  $52 = ((($51)) + 2052|0);
  $53 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($50,$52)|0);
  $z = $53;
  $54 = $z;
  $55 = ($54|0)<(0);
  if ($55) {
   label = 15;
   break;
  }
  $57 = $z;
  $58 = (3304 + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $dist = $59;
  $60 = $z;
  $61 = (3432 + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $1;
   $65 = $z;
   $66 = (3432 + ($65<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (__ZL14stbi__zreceiveP10stbi__zbufi($64,$67)|0);
   $69 = $dist;
   $70 = (($69) + ($68))|0;
   $dist = $70;
  }
  $71 = $zout;
  $72 = $1;
  $73 = ((($72)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $71;
  $76 = $74;
  $77 = (($75) - ($76))|0;
  $78 = $dist;
  $79 = ($77|0)<($78|0);
  if ($79) {
   label = 19;
   break;
  }
  $81 = $zout;
  $82 = $len;
  $83 = (($81) + ($82)|0);
  $84 = $1;
  $85 = ((($84)) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83>>>0)>($86>>>0);
  if ($87) {
   $88 = $1;
   $89 = $zout;
   $90 = $len;
   $91 = (__ZL13stbi__zexpandP10stbi__zbufPci($88,$89,$90)|0);
   $92 = ($91|0)!=(0);
   if (!($92)) {
    label = 22;
    break;
   }
   $93 = $1;
   $94 = ((($93)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $zout = $95;
  }
  $96 = $zout;
  $97 = $dist;
  $98 = (0 - ($97))|0;
  $99 = (($96) + ($98)|0);
  $p = $99;
  $100 = $dist;
  $101 = ($100|0)==(1);
  if ($101) {
   $102 = $p;
   $103 = HEAP8[$102>>0]|0;
   $v = $103;
   $104 = $len;
   $105 = ($104|0)!=(0);
   if (!($105)) {
    continue;
   }
   while(1) {
    $106 = $v;
    $107 = $zout;
    $108 = ((($107)) + 1|0);
    $zout = $108;
    HEAP8[$107>>0] = $106;
    $109 = $len;
    $110 = (($109) + -1)|0;
    $len = $110;
    $111 = ($110|0)!=(0);
    if (!($111)) {
     continue L1;
    }
   }
  } else {
   $112 = $len;
   $113 = ($112|0)!=(0);
   if (!($113)) {
    continue;
   }
   while(1) {
    $114 = $p;
    $115 = ((($114)) + 1|0);
    $p = $115;
    $116 = HEAP8[$114>>0]|0;
    $117 = $zout;
    $118 = ((($117)) + 1|0);
    $zout = $118;
    HEAP8[$117>>0] = $116;
    $119 = $len;
    $120 = (($119) + -1)|0;
    $len = $120;
    $121 = ($120|0)!=(0);
    if (!($121)) {
     continue L1;
    }
   }
  }
 }
 if ((label|0) == 4) {
  $13 = (__ZL9stbi__errPKc(3024)|0);
  $0 = $13;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 11) {
  $31 = $zout;
  $32 = $1;
  $33 = ((($32)) + 16|0);
  HEAP32[$33>>2] = $31;
  $0 = 1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 15) {
  $56 = (__ZL9stbi__errPKc(3024)|0);
  $0 = $56;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 19) {
  $80 = (__ZL9stbi__errPKc(3560)|0);
  $0 = $80;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 22) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 return (0)|0;
}
function __ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $z;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(16);
 if ($6) {
  $7 = $1;
  __ZL15stbi__fill_bitsP10stbi__zbuf($7);
 }
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 511;
 $12 = $2;
 $13 = (($12) + ($11<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $b = $15;
 $16 = $b;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $b;
  $19 = $18 >> 9;
  $s = $19;
  $20 = $s;
  $21 = $1;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >>> $20;
  HEAP32[$22>>2] = $24;
  $25 = $s;
  $26 = $1;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) - ($25))|0;
  HEAP32[$27>>2] = $29;
  $30 = $b;
  $31 = $30 & 511;
  $0 = $31;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 } else {
  $32 = $1;
  $33 = $2;
  $34 = (__ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($32,$33)|0);
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZL13stbi__zexpandP10stbi__zbufPci($z,$zout,$n) {
 $z = $z|0;
 $zout = $zout|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0;
 var $limit = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $zout;
 $3 = $n;
 $4 = $2;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = (__ZL9stbi__errPKc(3576)|0);
  $0 = $11;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $cur = $20;
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $23;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $limit = $29;
 while(1) {
  $30 = $cur;
  $31 = $3;
  $32 = (($30) + ($31))|0;
  $33 = $limit;
  $34 = ($32|0)>($33|0);
  if (!($34)) {
   break;
  }
  $35 = $limit;
  $36 = $35<<1;
  $limit = $36;
 }
 $37 = $1;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $limit;
 $41 = (_realloc($39,$40)|0);
 $q = $41;
 $42 = $q;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $44 = (__ZL9stbi__errPKc(1832)|0);
  $0 = $44;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 } else {
  $45 = $q;
  $46 = $1;
  $47 = ((($46)) + 20|0);
  HEAP32[$47>>2] = $45;
  $48 = $q;
  $49 = $cur;
  $50 = (($48) + ($49)|0);
  $51 = $1;
  $52 = ((($51)) + 16|0);
  HEAP32[$52>>2] = $50;
  $53 = $q;
  $54 = $limit;
  $55 = (($53) + ($54)|0);
  $56 = $1;
  $57 = ((($56)) + 24|0);
  HEAP32[$57>>2] = $55;
  $0 = 1;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __ZL15stbi__fill_bitsP10stbi__zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = 1 << $6;
  $8 = ($3>>>0)<($7>>>0);
  if (!($8)) {
   label = 3;
   break;
  }
  $9 = $0;
  $10 = (__ZL11stbi__zget8P10stbi__zbuf($9)|0);
  $11 = $10&255;
  $12 = $0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $11 << $14;
  $16 = $0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 | $15;
  HEAP32[$17>>2] = $19;
  $20 = $0;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 8)|0;
  HEAP32[$21>>2] = $23;
  $24 = $0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)<=(24);
  if (!($27)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((3688|0),(1928|0),3545,(3728|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function __ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $b = 0, $k = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $z;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZL17stbi__bit_reverseii($5,16)|0);
 $k = $6;
 $s = 10;
 while(1) {
  $7 = $k;
  $8 = $s;
  $9 = $2;
  $10 = ((($9)) + 1056|0);
  $11 = (($10) + ($8<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($7|0)<($12|0);
  $14 = $s;
  if ($13) {
   break;
  }
  $15 = (($14) + 1)|0;
  $s = $15;
 }
 $16 = ($14|0)==(16);
 if ($16) {
  $0 = -1;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $17 = $k;
 $18 = $s;
 $19 = (16 - ($18))|0;
 $20 = $17 >> $19;
 $21 = $s;
 $22 = $2;
 $23 = ((($22)) + 1024|0);
 $24 = (($23) + ($21<<1)|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = (($20) - ($26))|0;
 $28 = $s;
 $29 = $2;
 $30 = ((($29)) + 1124|0);
 $31 = (($30) + ($28<<1)|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($27) + ($33))|0;
 $b = $34;
 $35 = $b;
 $36 = $2;
 $37 = ((($36)) + 1156|0);
 $38 = (($37) + ($35)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $s;
 $42 = ($40|0)==($41|0);
 if (!($42)) {
  ___assert_fail((3600|0),(1928|0),3573,(3616|0));
  // unreachable;
 }
 $43 = $s;
 $44 = $1;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >>> $43;
 HEAP32[$45>>2] = $47;
 $48 = $s;
 $49 = $1;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) - ($48))|0;
 HEAP32[$50>>2] = $52;
 $53 = $b;
 $54 = $2;
 $55 = ((($54)) + 1444|0);
 $56 = (($55) + ($53<<1)|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function __ZL17stbi__bit_reverseii($v,$bits) {
 $v = $v|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $bits;
 $2 = $1;
 $3 = ($2|0)<=(16);
 if ($3) {
  $4 = $0;
  $5 = (__ZL18stbi__bitreverse16i($4)|0);
  $6 = $1;
  $7 = (16 - ($6))|0;
  $8 = $5 >> $7;
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((3648|0),(1928|0),3463,(3664|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18stbi__bitreverse16i($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 $2 = $1 & 43690;
 $3 = $2 >> 1;
 $4 = $0;
 $5 = $4 & 21845;
 $6 = $5 << 1;
 $7 = $3 | $6;
 $0 = $7;
 $8 = $0;
 $9 = $8 & 52428;
 $10 = $9 >> 2;
 $11 = $0;
 $12 = $11 & 13107;
 $13 = $12 << 2;
 $14 = $10 | $13;
 $0 = $14;
 $15 = $0;
 $16 = $15 & 61680;
 $17 = $16 >> 4;
 $18 = $0;
 $19 = $18 & 3855;
 $20 = $19 << 4;
 $21 = $17 | $20;
 $0 = $21;
 $22 = $0;
 $23 = $22 & 65280;
 $24 = $23 >> 8;
 $25 = $0;
 $26 = $25 & 255;
 $27 = $26 << 8;
 $28 = $24 | $27;
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL11stbi__zget8P10stbi__zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3>>>0)>=($6>>>0);
 if ($7) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP8[$9>>0]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZL19stbi__hdr_test_coreP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $signature = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $signature = 3984;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $signature;
  $4 = (($3) + ($2)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $1;
  $8 = (__ZL10stbi__get8P13stbi__context($7)|0);
  $9 = $8&255;
  $10 = $i;
  $11 = $signature;
  $12 = (($11) + ($10)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($9|0)!=($14|0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $c1 = 0, $c2 = 0, $count = 0, $hdr_data = 0, $height = 0, $i = 0, $j = 0, $k = 0, $len = 0, $or$cond = 0, $or$cond3 = 0, $rgbe = 0, $rgbe1 = 0;
 var $scanline = 0, $token = 0, $valid = 0, $value = 0, $width = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 88|0;
 $token = sp + 52|0;
 $rgbe = sp + 80|0;
 $rgbe1 = sp + 76|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $valid = 0;
 $6 = $1;
 $7 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($6,$buffer)|0);
 $8 = (_strcmp($7,1448)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = (__ZL9stbi__errPKc(4000)|0);
  $11 = ($10|0)!=(0);
  $12 = $11 ? 0 : 0;
  $13 = $12;
  $0 = $13;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 while(1) {
  $14 = $1;
  $15 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($14,$buffer)|0);
  HEAP32[$token>>2] = $15;
  $16 = HEAP32[$token>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$token>>2]|0;
  $21 = (_strcmp($20,1464)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   continue;
  }
  $valid = 1;
 }
 $23 = $valid;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = (__ZL9stbi__errPKc(4008)|0);
  $26 = ($25|0)!=(0);
  $27 = $26 ? 0 : 0;
  $28 = $27;
  $0 = $28;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 $29 = $1;
 $30 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($29,$buffer)|0);
 HEAP32[$token>>2] = $30;
 $31 = HEAP32[$token>>2]|0;
 $32 = (_strncmp($31,1488,3)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = (__ZL9stbi__errPKc(4032)|0);
  $35 = ($34|0)!=(0);
  $36 = $35 ? 0 : 0;
  $37 = $36;
  $0 = $37;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 $38 = HEAP32[$token>>2]|0;
 $39 = ((($38)) + 3|0);
 HEAP32[$token>>2] = $39;
 $40 = HEAP32[$token>>2]|0;
 $41 = (_strtol($40,$token,10)|0);
 $height = $41;
 while(1) {
  $42 = HEAP32[$token>>2]|0;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)==(32);
  $46 = HEAP32[$token>>2]|0;
  if (!($45)) {
   break;
  }
  $47 = ((($46)) + 1|0);
  HEAP32[$token>>2] = $47;
 }
 $48 = (_strncmp($46,1496,3)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = (__ZL9stbi__errPKc(4032)|0);
  $51 = ($50|0)!=(0);
  $52 = $51 ? 0 : 0;
  $53 = $52;
  $0 = $53;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 $54 = HEAP32[$token>>2]|0;
 $55 = ((($54)) + 3|0);
 HEAP32[$token>>2] = $55;
 $56 = HEAP32[$token>>2]|0;
 $57 = (_strtol($56,0,10)|0);
 $width = $57;
 $58 = $width;
 $59 = $2;
 HEAP32[$59>>2] = $58;
 $60 = $height;
 $61 = $3;
 HEAP32[$61>>2] = $60;
 $62 = $4;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $4;
  HEAP32[$64>>2] = 3;
 }
 $65 = $5;
 $66 = ($65|0)==(0);
 if ($66) {
  $5 = 3;
 }
 $67 = $height;
 $68 = $width;
 $69 = Math_imul($67, $68)|0;
 $70 = $5;
 $71 = Math_imul($69, $70)|0;
 $72 = $71<<2;
 $73 = (__ZL12stbi__mallocj($72)|0);
 $hdr_data = $73;
 $74 = $width;
 $75 = ($74|0)<(8);
 $76 = $width;
 $77 = ($76|0)>=(32768);
 $or$cond = $75 | $77;
 do {
  if ($or$cond) {
   $j = 0;
   label = 21;
  } else {
   $scanline = 0;
   $j = 0;
   while(1) {
    $101 = $j;
    $102 = $height;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     label = 49;
     break;
    }
    $104 = $1;
    $105 = (__ZL10stbi__get8P13stbi__context($104)|0);
    $106 = $105&255;
    $c1 = $106;
    $107 = $1;
    $108 = (__ZL10stbi__get8P13stbi__context($107)|0);
    $109 = $108&255;
    $c2 = $109;
    $110 = $1;
    $111 = (__ZL10stbi__get8P13stbi__context($110)|0);
    $112 = $111&255;
    $len = $112;
    $113 = $c1;
    $114 = ($113|0)!=(2);
    $115 = $c2;
    $116 = ($115|0)!=(2);
    $or$cond3 = $114 | $116;
    if ($or$cond3) {
     label = 30;
     break;
    }
    $117 = $len;
    $118 = $117 & 128;
    $119 = ($118|0)!=(0);
    if ($119) {
     label = 30;
     break;
    }
    $134 = $len;
    $135 = $134 << 8;
    $len = $135;
    $136 = $1;
    $137 = (__ZL10stbi__get8P13stbi__context($136)|0);
    $138 = $137&255;
    $139 = $len;
    $140 = $139 | $138;
    $len = $140;
    $141 = $len;
    $142 = $width;
    $143 = ($141|0)!=($142|0);
    if ($143) {
     label = 32;
     break;
    }
    $150 = $scanline;
    $151 = ($150|0)==(0|0);
    if ($151) {
     $152 = $width;
     $153 = $152<<2;
     $154 = (__ZL12stbi__mallocj($153)|0);
     $scanline = $154;
    }
    $k = 0;
    while(1) {
     $155 = $k;
     $156 = ($155|0)<(4);
     $i = 0;
     if (!($156)) {
      break;
     }
     L45: while(1) {
      $157 = $i;
      $158 = $width;
      $159 = ($157|0)<($158|0);
      if (!($159)) {
       break;
      }
      $160 = $1;
      $161 = (__ZL10stbi__get8P13stbi__context($160)|0);
      $count = $161;
      $162 = $count;
      $163 = $162&255;
      $164 = ($163|0)>(128);
      if ($164) {
       $165 = $1;
       $166 = (__ZL10stbi__get8P13stbi__context($165)|0);
       $value = $166;
       $167 = $count;
       $168 = $167&255;
       $169 = (($168) - 128)|0;
       $170 = $169&255;
       $count = $170;
       $z = 0;
       while(1) {
        $171 = $z;
        $172 = $count;
        $173 = $172&255;
        $174 = ($171|0)<($173|0);
        if (!($174)) {
         continue L45;
        }
        $175 = $value;
        $176 = $i;
        $177 = (($176) + 1)|0;
        $i = $177;
        $178 = $176<<2;
        $179 = $k;
        $180 = (($178) + ($179))|0;
        $181 = $scanline;
        $182 = (($181) + ($180)|0);
        HEAP8[$182>>0] = $175;
        $183 = $z;
        $184 = (($183) + 1)|0;
        $z = $184;
       }
      } else {
       $z = 0;
       while(1) {
        $185 = $z;
        $186 = $count;
        $187 = $186&255;
        $188 = ($185|0)<($187|0);
        if (!($188)) {
         continue L45;
        }
        $189 = $1;
        $190 = (__ZL10stbi__get8P13stbi__context($189)|0);
        $191 = $i;
        $192 = (($191) + 1)|0;
        $i = $192;
        $193 = $191<<2;
        $194 = $k;
        $195 = (($193) + ($194))|0;
        $196 = $scanline;
        $197 = (($196) + ($195)|0);
        HEAP8[$197>>0] = $190;
        $198 = $z;
        $199 = (($198) + 1)|0;
        $z = $199;
       }
      }
     }
     $200 = $k;
     $201 = (($200) + 1)|0;
     $k = $201;
    }
    while(1) {
     $202 = $i;
     $203 = $width;
     $204 = ($202|0)<($203|0);
     if (!($204)) {
      break;
     }
     $205 = $hdr_data;
     $206 = $j;
     $207 = $width;
     $208 = Math_imul($206, $207)|0;
     $209 = $i;
     $210 = (($208) + ($209))|0;
     $211 = $5;
     $212 = Math_imul($210, $211)|0;
     $213 = (($205) + ($212<<2)|0);
     $214 = $scanline;
     $215 = $i;
     $216 = $215<<2;
     $217 = (($214) + ($216)|0);
     $218 = $5;
     __ZL17stbi__hdr_convertPfPhi($213,$217,$218);
     $219 = $i;
     $220 = (($219) + 1)|0;
     $i = $220;
    }
    $221 = $j;
    $222 = (($221) + 1)|0;
    $j = $222;
   }
   if ((label|0) == 30) {
    $120 = $c1;
    $121 = $120&255;
    HEAP8[$rgbe1>>0] = $121;
    $122 = $c2;
    $123 = $122&255;
    $124 = ((($rgbe1)) + 1|0);
    HEAP8[$124>>0] = $123;
    $125 = $len;
    $126 = $125&255;
    $127 = ((($rgbe1)) + 2|0);
    HEAP8[$127>>0] = $126;
    $128 = $1;
    $129 = (__ZL10stbi__get8P13stbi__context($128)|0);
    $130 = ((($rgbe1)) + 3|0);
    HEAP8[$130>>0] = $129;
    $131 = $hdr_data;
    $132 = $5;
    __ZL17stbi__hdr_convertPfPhi($131,$rgbe1,$132);
    $i = 1;
    $j = 0;
    $133 = $scanline;
    _free($133);
    label = 24;
    break;
   }
   else if ((label|0) == 32) {
    $144 = $hdr_data;
    _free($144);
    $145 = $scanline;
    _free($145);
    $146 = (__ZL9stbi__errPKc(4056)|0);
    $147 = ($146|0)!=(0);
    $148 = $147 ? 0 : 0;
    $149 = $148;
    $0 = $149;
    $225 = $0;
    STACKTOP = sp;return ($225|0);
   }
   else if ((label|0) == 49) {
    $223 = $scanline;
    _free($223);
    label = 50;
    break;
   }
  }
 } while(0);
 while(1) {
  if ((label|0) == 21) {
   label = 0;
   $78 = $j;
   $79 = $height;
   $80 = ($78|0)<($79|0);
   if (!($80)) {
    label = 50;
    continue;
   }
   $i = 0;
  }
  else if ((label|0) == 24) {
   label = 0;
   $84 = $1;
   (__ZL10stbi__getnP13stbi__contextPhi($84,$rgbe,4)|0);
   $85 = $hdr_data;
   $86 = $j;
   $87 = $width;
   $88 = Math_imul($86, $87)|0;
   $89 = $5;
   $90 = Math_imul($88, $89)|0;
   $91 = (($85) + ($90<<2)|0);
   $92 = $i;
   $93 = $5;
   $94 = Math_imul($92, $93)|0;
   $95 = (($91) + ($94<<2)|0);
   $96 = $5;
   __ZL17stbi__hdr_convertPfPhi($95,$rgbe,$96);
   $97 = $i;
   $98 = (($97) + 1)|0;
   $i = $98;
  }
  else if ((label|0) == 50) {
   label = 0;
   $224 = $hdr_data;
   $0 = $224;
   break;
  }
  $81 = $i;
  $82 = $width;
  $83 = ($81|0)<($82|0);
  if ($83) {
   label = 24;
   continue;
  }
  $99 = $j;
  $100 = (($99) + 1)|0;
  $j = $100;
  label = 21;
 }
 $225 = $0;
 STACKTOP = sp;return ($225|0);
}
function __ZL17stbi__hdr_convertPfPhi($output,$input,$req_comp) {
 $output = $output|0;
 $input = $input|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $f1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output;
 $1 = $input;
 $2 = $req_comp;
 $3 = $1;
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $65 = $2;
  if ((($65|0) == 2)) {
   $73 = $0;
   $74 = ((($73)) + 4|0);
   HEAPF32[$74>>2] = 1.0;
   label = 13;
  } else if ((($65|0) == 3)) {
   label = 11;
  } else if ((($65|0) == 1)) {
   label = 13;
  } else if ((($65|0) == 4)) {
   $66 = $0;
   $67 = ((($66)) + 12|0);
   HEAPF32[$67>>2] = 1.0;
   label = 11;
  } else {
   STACKTOP = sp;return;
  }
  if ((label|0) == 11) {
   $68 = $0;
   $69 = ((($68)) + 8|0);
   HEAPF32[$69>>2] = 0.0;
   $70 = $0;
   $71 = ((($70)) + 4|0);
   HEAPF32[$71>>2] = 0.0;
   $72 = $0;
   HEAPF32[$72>>2] = 0.0;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 13) {
   $75 = $0;
   HEAPF32[$75>>2] = 0.0;
   STACKTOP = sp;return;
  }
 }
 $8 = $1;
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($11) - 136)|0;
 $13 = (+_ldexp(1.0,$12));
 $14 = $13;
 $f1 = $14;
 $15 = $2;
 $16 = ($15|0)<=(2);
 $17 = $1;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 if ($16) {
  $20 = $1;
  $21 = ((($20)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (($19) + ($23))|0;
  $25 = $1;
  $26 = ((($25)) + 2|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $30 = (+($29|0));
  $31 = $f1;
  $32 = $30 * $31;
  $33 = $32 / 3.0;
  $34 = $0;
  HEAPF32[$34>>2] = $33;
 } else {
  $35 = (+($19|0));
  $36 = $f1;
  $37 = $35 * $36;
  $38 = $0;
  HEAPF32[$38>>2] = $37;
  $39 = $1;
  $40 = ((($39)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = (+($42|0));
  $44 = $f1;
  $45 = $43 * $44;
  $46 = $0;
  $47 = ((($46)) + 4|0);
  HEAPF32[$47>>2] = $45;
  $48 = $1;
  $49 = ((($48)) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (+($51|0));
  $53 = $f1;
  $54 = $52 * $53;
  $55 = $0;
  $56 = ((($55)) + 8|0);
  HEAPF32[$56>>2] = $54;
 }
 $57 = $2;
 $58 = ($57|0)==(2);
 if ($58) {
  $59 = $0;
  $60 = ((($59)) + 4|0);
  HEAPF32[$60>>2] = 1.0;
 }
 $61 = $2;
 $62 = ($61|0)==(4);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = $0;
 $64 = ((($63)) + 12|0);
 HEAPF32[$64>>2] = 1.0;
 STACKTOP = sp;return;
}
function __ZL15stbi__load_mainP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $hdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL15stbi__jpeg_testP13stbi__context($6)|0);
 $8 = ($7|0)!=(0);
 $9 = $1;
 if ($8) {
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = (__ZL15stbi__jpeg_loadP13stbi__contextPiS1_S1_i($9,$10,$11,$12,$13)|0);
  $0 = $14;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $15 = (__ZL14stbi__png_testP13stbi__context($9)|0);
 $16 = ($15|0)!=(0);
 $17 = $1;
 if ($16) {
  $18 = $2;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  $22 = (__ZL14stbi__png_loadP13stbi__contextPiS1_S1_i($17,$18,$19,$20,$21)|0);
  $0 = $22;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $23 = (__ZL14stbi__bmp_testP13stbi__context($17)|0);
 $24 = ($23|0)!=(0);
 $25 = $1;
 if ($24) {
  $26 = $2;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  $30 = (__ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_i($25,$26,$27,$28,$29)|0);
  $0 = $30;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $31 = (__ZL14stbi__gif_testP13stbi__context($25)|0);
 $32 = ($31|0)!=(0);
 $33 = $1;
 if ($32) {
  $34 = $2;
  $35 = $3;
  $36 = $4;
  $37 = $5;
  $38 = (__ZL14stbi__gif_loadP13stbi__contextPiS1_S1_i($33,$34,$35,$36,$37)|0);
  $0 = $38;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $39 = (__ZL14stbi__psd_testP13stbi__context($33)|0);
 $40 = ($39|0)!=(0);
 $41 = $1;
 if ($40) {
  $42 = $2;
  $43 = $3;
  $44 = $4;
  $45 = $5;
  $46 = (__ZL14stbi__psd_loadP13stbi__contextPiS1_S1_i($41,$42,$43,$44,$45)|0);
  $0 = $46;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $47 = (__ZL14stbi__pic_testP13stbi__context($41)|0);
 $48 = ($47|0)!=(0);
 $49 = $1;
 if ($48) {
  $50 = $2;
  $51 = $3;
  $52 = $4;
  $53 = $5;
  $54 = (__ZL14stbi__pic_loadP13stbi__contextPiS1_S1_i($49,$50,$51,$52,$53)|0);
  $0 = $54;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $55 = (__ZL14stbi__pnm_testP13stbi__context($49)|0);
 $56 = ($55|0)!=(0);
 $57 = $1;
 if ($56) {
  $58 = $2;
  $59 = $3;
  $60 = $4;
  $61 = $5;
  $62 = (__ZL14stbi__pnm_loadP13stbi__contextPiS1_S1_i($57,$58,$59,$60,$61)|0);
  $0 = $62;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $63 = (__ZL14stbi__hdr_testP13stbi__context($57)|0);
 $64 = ($63|0)!=(0);
 $65 = $1;
 if ($64) {
  $66 = $2;
  $67 = $3;
  $68 = $4;
  $69 = $5;
  $70 = (__ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_i($65,$66,$67,$68,$69)|0);
  $hdr = $70;
  $71 = $hdr;
  $72 = $2;
  $73 = HEAP32[$72>>2]|0;
  $74 = $3;
  $75 = HEAP32[$74>>2]|0;
  $76 = $5;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = $5;
   $81 = $78;
  } else {
   $79 = $4;
   $80 = HEAP32[$79>>2]|0;
   $81 = $80;
  }
  $82 = (__ZL16stbi__hdr_to_ldrPfiii($71,$73,$75,$81)|0);
  $0 = $82;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 } else {
  $83 = (__ZL14stbi__tga_testP13stbi__context($65)|0);
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $1;
   $86 = $2;
   $87 = $3;
   $88 = $4;
   $89 = $5;
   $90 = (__ZL14stbi__tga_loadP13stbi__contextPiS1_S1_i($85,$86,$87,$88,$89)|0);
   $0 = $90;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  } else {
   $91 = (__ZL9stbi__errPKc(1424)|0);
   $92 = ($91|0)!=(0);
   $93 = $92 ? 0 : 0;
   $94 = $93;
   $0 = $94;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  }
 }
 return (0)|0;
}
function __ZL15stbi__jpeg_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $j = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = sp + 4|0;
 $0 = $s;
 $1 = $0;
 HEAP32[$j>>2] = $1;
 __ZL16stbi__setup_jpegP10stbi__jpeg($j);
 $2 = (__ZL24stbi__decode_jpeg_headerP10stbi__jpegi($j,1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL15stbi__jpeg_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = sp + 16|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 HEAP32[$j>>2] = $5;
 __ZL16stbi__setup_jpegP10stbi__jpeg($j);
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL15load_jpeg_imageP10stbi__jpegPiS1_S1_i($j,$6,$7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZL14stbi__png_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL22stbi__check_png_headerP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL14stbi__png_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 16|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 HEAP32[$p>>2] = $5;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL12stbi__do_pngP9stbi__pngPiS1_S1_i($p,$6,$7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZL14stbi__bmp_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL18stbi__bmp_test_rawP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a4 = 0, $acount = 0, $ashift = 0, $bcount = 0, $bpp = 0, $bshift = 0, $compress = 0, $easy = 0, $fake_a = 0, $flip_vertically = 0, $gcount = 0, $gshift = 0, $hsz = 0, $i = 0;
 var $j = 0, $ma = 0, $mb = 0, $mg = 0, $mr = 0, $offset = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $out = 0, $p1 = 0, $p2 = 0, $pad = 0, $pal = 0, $psize = 0, $rcount = 0, $rshift = 0, $t = 0, $target = 0, $v = 0, $v2 = 0, $v3 = 0, $width = 0, $z = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pal = sp + 168|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $mr = 0;
 $mg = 0;
 $mb = 0;
 $ma = 0;
 $fake_a = 0;
 $psize = 0;
 $compress = 0;
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = ($8|0)!=(66);
 if (!($9)) {
  $10 = $1;
  $11 = (__ZL10stbi__get8P13stbi__context($10)|0);
  $12 = $11&255;
  $13 = ($12|0)!=(77);
  if (!($13)) {
   $18 = $1;
   (__ZL13stbi__get32leP13stbi__context($18)|0);
   $19 = $1;
   (__ZL13stbi__get16leP13stbi__context($19)|0);
   $20 = $1;
   (__ZL13stbi__get16leP13stbi__context($20)|0);
   $21 = $1;
   $22 = (__ZL13stbi__get32leP13stbi__context($21)|0);
   $offset = $22;
   $23 = $1;
   $24 = (__ZL13stbi__get32leP13stbi__context($23)|0);
   $hsz = $24;
   $25 = $hsz;
   $26 = ($25|0)!=(12);
   $27 = $hsz;
   $28 = ($27|0)!=(40);
   $or$cond = $26 & $28;
   $29 = $hsz;
   $30 = ($29|0)!=(56);
   $or$cond3 = $or$cond & $30;
   $31 = $hsz;
   $32 = ($31|0)!=(108);
   $or$cond5 = $or$cond3 & $32;
   $33 = $hsz;
   $34 = ($33|0)!=(124);
   $or$cond7 = $or$cond5 & $34;
   if ($or$cond7) {
    $35 = (__ZL9stbi__errPKc(4440)|0);
    $36 = ($35|0)!=(0);
    $37 = $36 ? 0 : 0;
    $38 = $37;
    $0 = $38;
    $624 = $0;
    STACKTOP = sp;return ($624|0);
   }
   $39 = $hsz;
   $40 = ($39|0)==(12);
   $41 = $1;
   if ($40) {
    $42 = (__ZL13stbi__get16leP13stbi__context($41)|0);
    $43 = $1;
    HEAP32[$43>>2] = $42;
    $44 = $1;
    $45 = (__ZL13stbi__get16leP13stbi__context($44)|0);
    $46 = $1;
    $47 = ((($46)) + 4|0);
    HEAP32[$47>>2] = $45;
   } else {
    $48 = (__ZL13stbi__get32leP13stbi__context($41)|0);
    $49 = $1;
    HEAP32[$49>>2] = $48;
    $50 = $1;
    $51 = (__ZL13stbi__get32leP13stbi__context($50)|0);
    $52 = $1;
    $53 = ((($52)) + 4|0);
    HEAP32[$53>>2] = $51;
   }
   $54 = $1;
   $55 = (__ZL13stbi__get16leP13stbi__context($54)|0);
   $56 = ($55|0)!=(1);
   if ($56) {
    $57 = (__ZL9stbi__errPKc(4456)|0);
    $58 = ($57|0)!=(0);
    $59 = $58 ? 0 : 0;
    $60 = $59;
    $0 = $60;
    $624 = $0;
    STACKTOP = sp;return ($624|0);
   }
   $61 = $1;
   $62 = (__ZL13stbi__get16leP13stbi__context($61)|0);
   $bpp = $62;
   $63 = $bpp;
   $64 = ($63|0)==(1);
   if ($64) {
    $65 = (__ZL9stbi__errPKc(4464)|0);
    $66 = ($65|0)!=(0);
    $67 = $66 ? 0 : 0;
    $68 = $67;
    $0 = $68;
    $624 = $0;
    STACKTOP = sp;return ($624|0);
   }
   $69 = $1;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)>(0);
   $73 = $72&1;
   $flip_vertically = $73;
   $74 = $1;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (_abs($76)|0);
   $78 = $1;
   $79 = ((($78)) + 4|0);
   HEAP32[$79>>2] = $77;
   $80 = $hsz;
   $81 = ($80|0)==(12);
   if ($81) {
    $82 = $bpp;
    $83 = ($82|0)<(24);
    if ($83) {
     $84 = $offset;
     $85 = (($84) - 14)|0;
     $86 = (($85) - 24)|0;
     $87 = (($86|0) / 3)&-1;
     $psize = $87;
    }
   } else {
    $88 = $1;
    $89 = (__ZL13stbi__get32leP13stbi__context($88)|0);
    $compress = $89;
    $90 = $compress;
    $91 = ($90|0)==(1);
    $92 = $compress;
    $93 = ($92|0)==(2);
    $or$cond9 = $91 | $93;
    if ($or$cond9) {
     $94 = (__ZL9stbi__errPKc(4480)|0);
     $95 = ($94|0)!=(0);
     $96 = $95 ? 0 : 0;
     $97 = $96;
     $0 = $97;
     $624 = $0;
     STACKTOP = sp;return ($624|0);
    }
    $98 = $1;
    (__ZL13stbi__get32leP13stbi__context($98)|0);
    $99 = $1;
    (__ZL13stbi__get32leP13stbi__context($99)|0);
    $100 = $1;
    (__ZL13stbi__get32leP13stbi__context($100)|0);
    $101 = $1;
    (__ZL13stbi__get32leP13stbi__context($101)|0);
    $102 = $1;
    (__ZL13stbi__get32leP13stbi__context($102)|0);
    $103 = $hsz;
    $104 = ($103|0)==(40);
    $105 = $hsz;
    $106 = ($105|0)==(56);
    $or$cond11 = $104 | $106;
    $107 = $hsz;
    do {
     if ($or$cond11) {
      $108 = ($107|0)==(56);
      if ($108) {
       $109 = $1;
       (__ZL13stbi__get32leP13stbi__context($109)|0);
       $110 = $1;
       (__ZL13stbi__get32leP13stbi__context($110)|0);
       $111 = $1;
       (__ZL13stbi__get32leP13stbi__context($111)|0);
       $112 = $1;
       (__ZL13stbi__get32leP13stbi__context($112)|0);
      }
      $113 = $bpp;
      $114 = ($113|0)==(16);
      $115 = $bpp;
      $116 = ($115|0)==(32);
      $or$cond13 = $114 | $116;
      if ($or$cond13) {
       $mb = 0;
       $mg = 0;
       $mr = 0;
       $117 = $compress;
       $118 = ($117|0)==(0);
       if ($118) {
        $119 = $bpp;
        $120 = ($119|0)==(32);
        if ($120) {
         $mr = 16711680;
         $mg = 65280;
         $mb = 255;
         $ma = -16777216;
         $fake_a = 1;
         break;
        } else {
         $mr = 31744;
         $mg = 992;
         $mb = 31;
         break;
        }
       }
       $121 = $compress;
       $122 = ($121|0)==(3);
       if (!($122)) {
        $139 = (__ZL9stbi__errPKc(4456)|0);
        $140 = ($139|0)!=(0);
        $141 = $140 ? 0 : 0;
        $142 = $141;
        $0 = $142;
        $624 = $0;
        STACKTOP = sp;return ($624|0);
       }
       $123 = $1;
       $124 = (__ZL13stbi__get32leP13stbi__context($123)|0);
       $mr = $124;
       $125 = $1;
       $126 = (__ZL13stbi__get32leP13stbi__context($125)|0);
       $mg = $126;
       $127 = $1;
       $128 = (__ZL13stbi__get32leP13stbi__context($127)|0);
       $mb = $128;
       $129 = $mr;
       $130 = $mg;
       $131 = ($129|0)==($130|0);
       if ($131) {
        $132 = $mg;
        $133 = $mb;
        $134 = ($132|0)==($133|0);
        if ($134) {
         $135 = (__ZL9stbi__errPKc(4456)|0);
         $136 = ($135|0)!=(0);
         $137 = $136 ? 0 : 0;
         $138 = $137;
         $0 = $138;
         $624 = $0;
         STACKTOP = sp;return ($624|0);
        }
       }
      }
     } else {
      $143 = ($107|0)==(108);
      $144 = $hsz;
      $145 = ($144|0)==(124);
      $or$cond15 = $143 | $145;
      if (!($or$cond15)) {
       ___assert_fail((4488|0),(1928|0),4650,(4520|0));
       // unreachable;
      }
      $146 = $1;
      $147 = (__ZL13stbi__get32leP13stbi__context($146)|0);
      $mr = $147;
      $148 = $1;
      $149 = (__ZL13stbi__get32leP13stbi__context($148)|0);
      $mg = $149;
      $150 = $1;
      $151 = (__ZL13stbi__get32leP13stbi__context($150)|0);
      $mb = $151;
      $152 = $1;
      $153 = (__ZL13stbi__get32leP13stbi__context($152)|0);
      $ma = $153;
      $154 = $1;
      (__ZL13stbi__get32leP13stbi__context($154)|0);
      $i = 0;
      while(1) {
       $155 = $i;
       $156 = ($155|0)<(12);
       if (!($156)) {
        break;
       }
       $157 = $1;
       (__ZL13stbi__get32leP13stbi__context($157)|0);
       $158 = $i;
       $159 = (($158) + 1)|0;
       $i = $159;
      }
      $160 = $hsz;
      $161 = ($160|0)==(124);
      if ($161) {
       $162 = $1;
       (__ZL13stbi__get32leP13stbi__context($162)|0);
       $163 = $1;
       (__ZL13stbi__get32leP13stbi__context($163)|0);
       $164 = $1;
       (__ZL13stbi__get32leP13stbi__context($164)|0);
       $165 = $1;
       (__ZL13stbi__get32leP13stbi__context($165)|0);
      }
     }
    } while(0);
    $166 = $bpp;
    $167 = ($166|0)<(16);
    if ($167) {
     $168 = $offset;
     $169 = (($168) - 14)|0;
     $170 = $hsz;
     $171 = (($169) - ($170))|0;
     $172 = $171 >> 2;
     $psize = $172;
    }
   }
   $173 = $ma;
   $174 = ($173|0)!=(0);
   $175 = $174 ? 4 : 3;
   $176 = $1;
   $177 = ((($176)) + 8|0);
   HEAP32[$177>>2] = $175;
   $178 = $5;
   $179 = ($178|0)!=(0);
   $180 = $5;
   $181 = ($180|0)>=(3);
   $or$cond17 = $179 & $181;
   if ($or$cond17) {
    $182 = $5;
    $target = $182;
   } else {
    $183 = $1;
    $184 = ((($183)) + 8|0);
    $185 = HEAP32[$184>>2]|0;
    $target = $185;
   }
   $186 = $target;
   $187 = $1;
   $188 = HEAP32[$187>>2]|0;
   $189 = Math_imul($186, $188)|0;
   $190 = $1;
   $191 = ((($190)) + 4|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = Math_imul($189, $192)|0;
   $194 = (__ZL12stbi__mallocj($193)|0);
   $out = $194;
   $195 = $out;
   $196 = ($195|0)!=(0|0);
   if (!($196)) {
    $197 = (__ZL9stbi__errPKc(1832)|0);
    $198 = ($197|0)!=(0);
    $199 = $198 ? 0 : 0;
    $200 = $199;
    $0 = $200;
    $624 = $0;
    STACKTOP = sp;return ($624|0);
   }
   $201 = $bpp;
   $202 = ($201|0)<(16);
   L67: do {
    if ($202) {
     $z = 0;
     $203 = $psize;
     $204 = ($203|0)==(0);
     $205 = $psize;
     $206 = ($205|0)>(256);
     $or$cond19 = $204 | $206;
     if ($or$cond19) {
      $207 = $out;
      _free($207);
      $208 = (__ZL9stbi__errPKc(4536)|0);
      $209 = ($208|0)!=(0);
      $210 = $209 ? 0 : 0;
      $211 = $210;
      $0 = $211;
      $624 = $0;
      STACKTOP = sp;return ($624|0);
     }
     $i = 0;
     while(1) {
      $212 = $i;
      $213 = $psize;
      $214 = ($212|0)<($213|0);
      $215 = $1;
      if (!($214)) {
       break;
      }
      $216 = (__ZL10stbi__get8P13stbi__context($215)|0);
      $217 = $i;
      $218 = (($pal) + ($217<<2)|0);
      $219 = ((($218)) + 2|0);
      HEAP8[$219>>0] = $216;
      $220 = $1;
      $221 = (__ZL10stbi__get8P13stbi__context($220)|0);
      $222 = $i;
      $223 = (($pal) + ($222<<2)|0);
      $224 = ((($223)) + 1|0);
      HEAP8[$224>>0] = $221;
      $225 = $1;
      $226 = (__ZL10stbi__get8P13stbi__context($225)|0);
      $227 = $i;
      $228 = (($pal) + ($227<<2)|0);
      HEAP8[$228>>0] = $226;
      $229 = $hsz;
      $230 = ($229|0)!=(12);
      if ($230) {
       $231 = $1;
       (__ZL10stbi__get8P13stbi__context($231)|0);
      }
      $232 = $i;
      $233 = (($pal) + ($232<<2)|0);
      $234 = ((($233)) + 3|0);
      HEAP8[$234>>0] = -1;
      $235 = $i;
      $236 = (($235) + 1)|0;
      $i = $236;
     }
     $237 = $offset;
     $238 = (($237) - 14)|0;
     $239 = $hsz;
     $240 = (($238) - ($239))|0;
     $241 = $psize;
     $242 = $hsz;
     $243 = ($242|0)==(12);
     $244 = $243 ? 3 : 4;
     $245 = Math_imul($241, $244)|0;
     $246 = (($240) - ($245))|0;
     __ZL10stbi__skipP13stbi__contexti($215,$246);
     $247 = $bpp;
     $248 = ($247|0)==(4);
     do {
      if ($248) {
       $249 = $1;
       $250 = HEAP32[$249>>2]|0;
       $251 = (($250) + 1)|0;
       $252 = $251 >>> 1;
       $width = $252;
      } else {
       $253 = $bpp;
       $254 = ($253|0)==(8);
       if ($254) {
        $255 = $1;
        $256 = HEAP32[$255>>2]|0;
        $width = $256;
        break;
       }
       $257 = $out;
       _free($257);
       $258 = (__ZL9stbi__errPKc(4544)|0);
       $259 = ($258|0)!=(0);
       $260 = $259 ? 0 : 0;
       $261 = $260;
       $0 = $261;
       $624 = $0;
       STACKTOP = sp;return ($624|0);
      }
     } while(0);
     $262 = $width;
     $263 = (0 - ($262))|0;
     $264 = $263 & 3;
     $pad = $264;
     $j = 0;
     while(1) {
      $265 = $j;
      $266 = $1;
      $267 = ((($266)) + 4|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = ($265|0)<($268|0);
      if (!($269)) {
       break L67;
      }
      $i = 0;
      while(1) {
       $270 = $i;
       $271 = $1;
       $272 = HEAP32[$271>>2]|0;
       $273 = ($270|0)<($272|0);
       if (!($273)) {
        break;
       }
       $274 = $1;
       $275 = (__ZL10stbi__get8P13stbi__context($274)|0);
       $276 = $275&255;
       $v = $276;
       $v2 = 0;
       $277 = $bpp;
       $278 = ($277|0)==(4);
       if ($278) {
        $279 = $v;
        $280 = $279 & 15;
        $v2 = $280;
        $281 = $v;
        $282 = $281 >> 4;
        $v = $282;
       }
       $283 = $v;
       $284 = (($pal) + ($283<<2)|0);
       $285 = HEAP8[$284>>0]|0;
       $286 = $z;
       $287 = (($286) + 1)|0;
       $z = $287;
       $288 = $out;
       $289 = (($288) + ($286)|0);
       HEAP8[$289>>0] = $285;
       $290 = $v;
       $291 = (($pal) + ($290<<2)|0);
       $292 = ((($291)) + 1|0);
       $293 = HEAP8[$292>>0]|0;
       $294 = $z;
       $295 = (($294) + 1)|0;
       $z = $295;
       $296 = $out;
       $297 = (($296) + ($294)|0);
       HEAP8[$297>>0] = $293;
       $298 = $v;
       $299 = (($pal) + ($298<<2)|0);
       $300 = ((($299)) + 2|0);
       $301 = HEAP8[$300>>0]|0;
       $302 = $z;
       $303 = (($302) + 1)|0;
       $z = $303;
       $304 = $out;
       $305 = (($304) + ($302)|0);
       HEAP8[$305>>0] = $301;
       $306 = $target;
       $307 = ($306|0)==(4);
       if ($307) {
        $308 = $z;
        $309 = (($308) + 1)|0;
        $z = $309;
        $310 = $out;
        $311 = (($310) + ($308)|0);
        HEAP8[$311>>0] = -1;
       }
       $312 = $i;
       $313 = (($312) + 1)|0;
       $314 = $1;
       $315 = HEAP32[$314>>2]|0;
       $316 = ($313|0)==($315|0);
       if ($316) {
        break;
       }
       $317 = $bpp;
       $318 = ($317|0)==(8);
       if ($318) {
        $319 = $1;
        $320 = (__ZL10stbi__get8P13stbi__context($319)|0);
        $321 = $320&255;
        $323 = $321;
       } else {
        $322 = $v2;
        $323 = $322;
       }
       $v = $323;
       $324 = $v;
       $325 = (($pal) + ($324<<2)|0);
       $326 = HEAP8[$325>>0]|0;
       $327 = $z;
       $328 = (($327) + 1)|0;
       $z = $328;
       $329 = $out;
       $330 = (($329) + ($327)|0);
       HEAP8[$330>>0] = $326;
       $331 = $v;
       $332 = (($pal) + ($331<<2)|0);
       $333 = ((($332)) + 1|0);
       $334 = HEAP8[$333>>0]|0;
       $335 = $z;
       $336 = (($335) + 1)|0;
       $z = $336;
       $337 = $out;
       $338 = (($337) + ($335)|0);
       HEAP8[$338>>0] = $334;
       $339 = $v;
       $340 = (($pal) + ($339<<2)|0);
       $341 = ((($340)) + 2|0);
       $342 = HEAP8[$341>>0]|0;
       $343 = $z;
       $344 = (($343) + 1)|0;
       $z = $344;
       $345 = $out;
       $346 = (($345) + ($343)|0);
       HEAP8[$346>>0] = $342;
       $347 = $target;
       $348 = ($347|0)==(4);
       if ($348) {
        $349 = $z;
        $350 = (($349) + 1)|0;
        $z = $350;
        $351 = $out;
        $352 = (($351) + ($349)|0);
        HEAP8[$352>>0] = -1;
       }
       $353 = $i;
       $354 = (($353) + 2)|0;
       $i = $354;
      }
      $355 = $1;
      $356 = $pad;
      __ZL10stbi__skipP13stbi__contexti($355,$356);
      $357 = $j;
      $358 = (($357) + 1)|0;
      $j = $358;
     }
    } else {
     $rshift = 0;
     $gshift = 0;
     $bshift = 0;
     $ashift = 0;
     $rcount = 0;
     $gcount = 0;
     $bcount = 0;
     $acount = 0;
     $z1 = 0;
     $easy = 0;
     $359 = $1;
     $360 = $offset;
     $361 = (($360) - 14)|0;
     $362 = $hsz;
     $363 = (($361) - ($362))|0;
     __ZL10stbi__skipP13stbi__contexti($359,$363);
     $364 = $bpp;
     $365 = ($364|0)==(24);
     do {
      if ($365) {
       $366 = $1;
       $367 = HEAP32[$366>>2]|0;
       $368 = ($367*3)|0;
       $width = $368;
      } else {
       $369 = $bpp;
       $370 = ($369|0)==(16);
       if ($370) {
        $371 = $1;
        $372 = HEAP32[$371>>2]|0;
        $373 = $372<<1;
        $width = $373;
        break;
       } else {
        $width = 0;
        break;
       }
      }
     } while(0);
     $374 = $width;
     $375 = (0 - ($374))|0;
     $376 = $375 & 3;
     $pad = $376;
     $377 = $bpp;
     $378 = ($377|0)==(24);
     if ($378) {
      $easy = 1;
     } else {
      $379 = $bpp;
      $380 = ($379|0)==(32);
      if ($380) {
       $381 = $mb;
       $382 = ($381|0)==(255);
       $383 = $mg;
       $384 = ($383|0)==(65280);
       $or$cond21 = $382 & $384;
       $385 = $mr;
       $386 = ($385|0)==(16711680);
       $or$cond23 = $or$cond21 & $386;
       $387 = $ma;
       $388 = ($387|0)==(-16777216);
       $or$cond25 = $or$cond23 & $388;
       if ($or$cond25) {
        $easy = 2;
       }
      }
     }
     $389 = $easy;
     $390 = ($389|0)!=(0);
     do {
      if (!($390)) {
       $391 = $mr;
       $392 = ($391|0)!=(0);
       $393 = $mg;
       $394 = ($393|0)!=(0);
       $or$cond27 = $392 & $394;
       $395 = $mb;
       $396 = ($395|0)!=(0);
       $or$cond29 = $or$cond27 & $396;
       if ($or$cond29) {
        $402 = $mr;
        $403 = (__ZL14stbi__high_bitj($402)|0);
        $404 = (($403) - 7)|0;
        $rshift = $404;
        $405 = $mr;
        $406 = (__ZL14stbi__bitcountj($405)|0);
        $rcount = $406;
        $407 = $mg;
        $408 = (__ZL14stbi__high_bitj($407)|0);
        $409 = (($408) - 7)|0;
        $gshift = $409;
        $410 = $mg;
        $411 = (__ZL14stbi__bitcountj($410)|0);
        $gcount = $411;
        $412 = $mb;
        $413 = (__ZL14stbi__high_bitj($412)|0);
        $414 = (($413) - 7)|0;
        $bshift = $414;
        $415 = $mb;
        $416 = (__ZL14stbi__bitcountj($415)|0);
        $bcount = $416;
        $417 = $ma;
        $418 = (__ZL14stbi__high_bitj($417)|0);
        $419 = (($418) - 7)|0;
        $ashift = $419;
        $420 = $ma;
        $421 = (__ZL14stbi__bitcountj($420)|0);
        $acount = $421;
        break;
       }
       $397 = $out;
       _free($397);
       $398 = (__ZL9stbi__errPKc(4552)|0);
       $399 = ($398|0)!=(0);
       $400 = $399 ? 0 : 0;
       $401 = $400;
       $0 = $401;
       $624 = $0;
       STACKTOP = sp;return ($624|0);
      }
     } while(0);
     $j = 0;
     while(1) {
      $422 = $j;
      $423 = $1;
      $424 = ((($423)) + 4|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = ($422|0)<($425|0);
      if (!($426)) {
       break L67;
      }
      $427 = $easy;
      $428 = ($427|0)!=(0);
      $i = 0;
      L133: do {
       if ($428) {
        while(1) {
         $429 = $i;
         $430 = $1;
         $431 = HEAP32[$430>>2]|0;
         $432 = ($429|0)<($431|0);
         if (!($432)) {
          break L133;
         }
         $433 = $1;
         $434 = (__ZL10stbi__get8P13stbi__context($433)|0);
         $435 = $z1;
         $436 = (($435) + 2)|0;
         $437 = $out;
         $438 = (($437) + ($436)|0);
         HEAP8[$438>>0] = $434;
         $439 = $1;
         $440 = (__ZL10stbi__get8P13stbi__context($439)|0);
         $441 = $z1;
         $442 = (($441) + 1)|0;
         $443 = $out;
         $444 = (($443) + ($442)|0);
         HEAP8[$444>>0] = $440;
         $445 = $1;
         $446 = (__ZL10stbi__get8P13stbi__context($445)|0);
         $447 = $z1;
         $448 = (($447) + 0)|0;
         $449 = $out;
         $450 = (($449) + ($448)|0);
         HEAP8[$450>>0] = $446;
         $451 = $z1;
         $452 = (($451) + 3)|0;
         $z1 = $452;
         $453 = $easy;
         $454 = ($453|0)==(2);
         if ($454) {
          $455 = $1;
          $456 = (__ZL10stbi__get8P13stbi__context($455)|0);
          $457 = $456&255;
          $459 = $457;
         } else {
          $459 = 255;
         }
         $458 = $459&255;
         $a = $458;
         $460 = $target;
         $461 = ($460|0)==(4);
         if ($461) {
          $462 = $a;
          $463 = $z1;
          $464 = (($463) + 1)|0;
          $z1 = $464;
          $465 = $out;
          $466 = (($465) + ($463)|0);
          HEAP8[$466>>0] = $462;
         }
         $467 = $i;
         $468 = (($467) + 1)|0;
         $i = $468;
        }
       } else {
        while(1) {
         $469 = $i;
         $470 = $1;
         $471 = HEAP32[$470>>2]|0;
         $472 = ($469|0)<($471|0);
         if (!($472)) {
          break L133;
         }
         $473 = $bpp;
         $474 = ($473|0)==(16);
         $475 = $1;
         if ($474) {
          $476 = (__ZL13stbi__get16leP13stbi__context($475)|0);
          $478 = $476;
         } else {
          $477 = (__ZL13stbi__get32leP13stbi__context($475)|0);
          $478 = $477;
         }
         $v3 = $478;
         $479 = $v3;
         $480 = $mr;
         $481 = $479 & $480;
         $482 = $rshift;
         $483 = $rcount;
         $484 = (__ZL17stbi__shiftsignediii($481,$482,$483)|0);
         $485 = $484 & 255;
         $486 = $485&255;
         $487 = $z1;
         $488 = (($487) + 1)|0;
         $z1 = $488;
         $489 = $out;
         $490 = (($489) + ($487)|0);
         HEAP8[$490>>0] = $486;
         $491 = $v3;
         $492 = $mg;
         $493 = $491 & $492;
         $494 = $gshift;
         $495 = $gcount;
         $496 = (__ZL17stbi__shiftsignediii($493,$494,$495)|0);
         $497 = $496 & 255;
         $498 = $497&255;
         $499 = $z1;
         $500 = (($499) + 1)|0;
         $z1 = $500;
         $501 = $out;
         $502 = (($501) + ($499)|0);
         HEAP8[$502>>0] = $498;
         $503 = $v3;
         $504 = $mb;
         $505 = $503 & $504;
         $506 = $bshift;
         $507 = $bcount;
         $508 = (__ZL17stbi__shiftsignediii($505,$506,$507)|0);
         $509 = $508 & 255;
         $510 = $509&255;
         $511 = $z1;
         $512 = (($511) + 1)|0;
         $z1 = $512;
         $513 = $out;
         $514 = (($513) + ($511)|0);
         HEAP8[$514>>0] = $510;
         $515 = $ma;
         $516 = ($515|0)!=(0);
         if ($516) {
          $517 = $v3;
          $518 = $ma;
          $519 = $517 & $518;
          $520 = $ashift;
          $521 = $acount;
          $522 = (__ZL17stbi__shiftsignediii($519,$520,$521)|0);
          $523 = $522;
         } else {
          $523 = 255;
         }
         $a4 = $523;
         $524 = $target;
         $525 = ($524|0)==(4);
         if ($525) {
          $526 = $a4;
          $527 = $526 & 255;
          $528 = $527&255;
          $529 = $z1;
          $530 = (($529) + 1)|0;
          $z1 = $530;
          $531 = $out;
          $532 = (($531) + ($529)|0);
          HEAP8[$532>>0] = $528;
         }
         $533 = $i;
         $534 = (($533) + 1)|0;
         $i = $534;
        }
       }
      } while(0);
      $535 = $1;
      $536 = $pad;
      __ZL10stbi__skipP13stbi__contexti($535,$536);
      $537 = $j;
      $538 = (($537) + 1)|0;
      $j = $538;
     }
    }
   } while(0);
   $539 = $flip_vertically;
   $540 = ($539|0)!=(0);
   L158: do {
    if ($540) {
     $j = 0;
     while(1) {
      $541 = $j;
      $542 = $1;
      $543 = ((($542)) + 4|0);
      $544 = HEAP32[$543>>2]|0;
      $545 = $544 >> 1;
      $546 = ($541|0)<($545|0);
      if (!($546)) {
       break L158;
      }
      $547 = $out;
      $548 = $j;
      $549 = $1;
      $550 = HEAP32[$549>>2]|0;
      $551 = Math_imul($548, $550)|0;
      $552 = $target;
      $553 = Math_imul($551, $552)|0;
      $554 = (($547) + ($553)|0);
      $p1 = $554;
      $555 = $out;
      $556 = $1;
      $557 = ((($556)) + 4|0);
      $558 = HEAP32[$557>>2]|0;
      $559 = (($558) - 1)|0;
      $560 = $j;
      $561 = (($559) - ($560))|0;
      $562 = $1;
      $563 = HEAP32[$562>>2]|0;
      $564 = Math_imul($561, $563)|0;
      $565 = $target;
      $566 = Math_imul($564, $565)|0;
      $567 = (($555) + ($566)|0);
      $p2 = $567;
      $i = 0;
      while(1) {
       $568 = $i;
       $569 = $1;
       $570 = HEAP32[$569>>2]|0;
       $571 = $target;
       $572 = Math_imul($570, $571)|0;
       $573 = ($568|0)<($572|0);
       if (!($573)) {
        break;
       }
       $574 = $i;
       $575 = $p1;
       $576 = (($575) + ($574)|0);
       $577 = HEAP8[$576>>0]|0;
       $t = $577;
       $578 = $i;
       $579 = $p2;
       $580 = (($579) + ($578)|0);
       $581 = HEAP8[$580>>0]|0;
       $582 = $i;
       $583 = $p1;
       $584 = (($583) + ($582)|0);
       HEAP8[$584>>0] = $581;
       $585 = $t;
       $586 = $i;
       $587 = $p2;
       $588 = (($587) + ($586)|0);
       HEAP8[$588>>0] = $585;
       $589 = $i;
       $590 = (($589) + 1)|0;
       $i = $590;
      }
      $591 = $j;
      $592 = (($591) + 1)|0;
      $j = $592;
     }
    }
   } while(0);
   $593 = $5;
   $594 = ($593|0)!=(0);
   if ($594) {
    $595 = $5;
    $596 = $target;
    $597 = ($595|0)!=($596|0);
    if ($597) {
     $598 = $out;
     $599 = $target;
     $600 = $5;
     $601 = $1;
     $602 = HEAP32[$601>>2]|0;
     $603 = $1;
     $604 = ((($603)) + 4|0);
     $605 = HEAP32[$604>>2]|0;
     $606 = (__ZL20stbi__convert_formatPhiijj($598,$599,$600,$602,$605)|0);
     $out = $606;
     $607 = $out;
     $608 = ($607|0)==(0|0);
     if ($608) {
      $609 = $out;
      $0 = $609;
      $624 = $0;
      STACKTOP = sp;return ($624|0);
     }
    }
   }
   $610 = $1;
   $611 = HEAP32[$610>>2]|0;
   $612 = $2;
   HEAP32[$612>>2] = $611;
   $613 = $1;
   $614 = ((($613)) + 4|0);
   $615 = HEAP32[$614>>2]|0;
   $616 = $3;
   HEAP32[$616>>2] = $615;
   $617 = $4;
   $618 = ($617|0)!=(0|0);
   if ($618) {
    $619 = $1;
    $620 = ((($619)) + 8|0);
    $621 = HEAP32[$620>>2]|0;
    $622 = $4;
    HEAP32[$622>>2] = $621;
   }
   $623 = $out;
   $0 = $623;
   $624 = $0;
   STACKTOP = sp;return ($624|0);
  }
 }
 $14 = (__ZL9stbi__errPKc(4432)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 0 : 0;
 $17 = $16;
 $0 = $17;
 $624 = $0;
 STACKTOP = sp;return ($624|0);
}
function __ZL14stbi__gif_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL18stbi__gif_test_rawP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL14stbi__gif_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $g = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g = sp + 20|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $u = 0;
 _memset(($g|0),0,18508)|0;
 $5 = $0;
 $6 = $3;
 $7 = $4;
 $8 = (__ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPii($5,$g,$6,$7)|0);
 $u = $8;
 $9 = $u;
 $10 = $0;
 $11 = ($9|0)==($10|0);
 $$ = $11 ? 0 : $8;
 $u = $$;
 $12 = $u;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $19 = $u;
  STACKTOP = sp;return ($19|0);
 }
 $14 = HEAP32[$g>>2]|0;
 $15 = $1;
 HEAP32[$15>>2] = $14;
 $16 = ((($g)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 HEAP32[$18>>2] = $17;
 $19 = $u;
 STACKTOP = sp;return ($19|0);
}
function __ZL14stbi__psd_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get32beP13stbi__context($1)|0);
 $3 = ($2|0)==(943870035);
 $4 = $3&1;
 $r = $4;
 $5 = $0;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $r;
 STACKTOP = sp;return ($6|0);
}
function __ZL14stbi__psd_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $channel = 0, $channelCount = 0, $compression = 0, $count = 0, $h = 0, $i = 0, $len = 0, $or$cond = 0, $or$cond3 = 0, $out = 0, $p = 0, $p1 = 0, $pixelCount = 0, $val = 0, $w = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL13stbi__get32beP13stbi__context($6)|0);
 $8 = ($7|0)!=(943870035);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(4216)|0);
  $10 = ($9|0)!=(0);
  $11 = $10 ? 0 : 0;
  $12 = $11;
  $0 = $12;
  $203 = $0;
  STACKTOP = sp;return ($203|0);
 }
 $13 = $1;
 $14 = (__ZL13stbi__get16beP13stbi__context($13)|0);
 $15 = ($14|0)!=(1);
 if ($15) {
  $16 = (__ZL9stbi__errPKc(4224)|0);
  $17 = ($16|0)!=(0);
  $18 = $17 ? 0 : 0;
  $19 = $18;
  $0 = $19;
  $203 = $0;
  STACKTOP = sp;return ($203|0);
 }
 $20 = $1;
 __ZL10stbi__skipP13stbi__contexti($20,6);
 $21 = $1;
 $22 = (__ZL13stbi__get16beP13stbi__context($21)|0);
 $channelCount = $22;
 $23 = $channelCount;
 $24 = ($23|0)<(0);
 $25 = $channelCount;
 $26 = ($25|0)>(16);
 $or$cond = $24 | $26;
 if ($or$cond) {
  $27 = (__ZL9stbi__errPKc(4240)|0);
  $28 = ($27|0)!=(0);
  $29 = $28 ? 0 : 0;
  $30 = $29;
  $0 = $30;
  $203 = $0;
  STACKTOP = sp;return ($203|0);
 }
 $31 = $1;
 $32 = (__ZL13stbi__get32beP13stbi__context($31)|0);
 $h = $32;
 $33 = $1;
 $34 = (__ZL13stbi__get32beP13stbi__context($33)|0);
 $w = $34;
 $35 = $1;
 $36 = (__ZL13stbi__get16beP13stbi__context($35)|0);
 $37 = ($36|0)!=(8);
 if ($37) {
  $38 = (__ZL9stbi__errPKc(4264)|0);
  $39 = ($38|0)!=(0);
  $40 = $39 ? 0 : 0;
  $41 = $40;
  $0 = $41;
  $203 = $0;
  STACKTOP = sp;return ($203|0);
 }
 $42 = $1;
 $43 = (__ZL13stbi__get16beP13stbi__context($42)|0);
 $44 = ($43|0)!=(3);
 if ($44) {
  $45 = (__ZL9stbi__errPKc(4288)|0);
  $46 = ($45|0)!=(0);
  $47 = $46 ? 0 : 0;
  $48 = $47;
  $0 = $48;
  $203 = $0;
  STACKTOP = sp;return ($203|0);
 }
 $49 = $1;
 $50 = $1;
 $51 = (__ZL13stbi__get32beP13stbi__context($50)|0);
 __ZL10stbi__skipP13stbi__contexti($49,$51);
 $52 = $1;
 $53 = $1;
 $54 = (__ZL13stbi__get32beP13stbi__context($53)|0);
 __ZL10stbi__skipP13stbi__contexti($52,$54);
 $55 = $1;
 $56 = $1;
 $57 = (__ZL13stbi__get32beP13stbi__context($56)|0);
 __ZL10stbi__skipP13stbi__contexti($55,$57);
 $58 = $1;
 $59 = (__ZL13stbi__get16beP13stbi__context($58)|0);
 $compression = $59;
 $60 = $compression;
 $61 = ($60|0)>(1);
 if ($61) {
  $62 = (__ZL9stbi__errPKc(3968)|0);
  $63 = ($62|0)!=(0);
  $64 = $63 ? 0 : 0;
  $65 = $64;
  $0 = $65;
  $203 = $0;
  STACKTOP = sp;return ($203|0);
 }
 $66 = $w;
 $67 = $66<<2;
 $68 = $h;
 $69 = Math_imul($67, $68)|0;
 $70 = (__ZL12stbi__mallocj($69)|0);
 $out = $70;
 $71 = $out;
 $72 = ($71|0)!=(0|0);
 if (!($72)) {
  $73 = (__ZL9stbi__errPKc(1832)|0);
  $74 = ($73|0)!=(0);
  $75 = $74 ? 0 : 0;
  $76 = $75;
  $0 = $76;
  $203 = $0;
  STACKTOP = sp;return ($203|0);
 }
 $77 = $w;
 $78 = $h;
 $79 = Math_imul($77, $78)|0;
 $pixelCount = $79;
 $80 = $compression;
 $81 = ($80|0)!=(0);
 L29: do {
  if ($81) {
   $82 = $1;
   $83 = $h;
   $84 = $channelCount;
   $85 = Math_imul($83, $84)|0;
   $86 = $85<<1;
   __ZL10stbi__skipP13stbi__contexti($82,$86);
   $channel = 0;
   while(1) {
    $87 = $channel;
    $88 = ($87|0)<(4);
    if (!($88)) {
     break L29;
    }
    $89 = $out;
    $90 = $channel;
    $91 = (($89) + ($90)|0);
    $p = $91;
    $92 = $channel;
    $93 = $channelCount;
    $94 = ($92|0)>=($93|0);
    L34: do {
     if ($94) {
      $i = 0;
      while(1) {
       $95 = $i;
       $96 = $pixelCount;
       $97 = ($95|0)<($96|0);
       if (!($97)) {
        break L34;
       }
       $98 = $channel;
       $99 = ($98|0)==(3);
       $100 = $99 ? 255 : 0;
       $101 = $100&255;
       $102 = $p;
       HEAP8[$102>>0] = $101;
       $103 = $i;
       $104 = (($103) + 1)|0;
       $i = $104;
       $105 = $p;
       $106 = ((($105)) + 4|0);
       $p = $106;
      }
     } else {
      $count = 0;
      L40: while(1) {
       $107 = $count;
       $108 = $pixelCount;
       $109 = ($107|0)<($108|0);
       if (!($109)) {
        break L34;
       }
       $110 = $1;
       $111 = (__ZL10stbi__get8P13stbi__context($110)|0);
       $112 = $111&255;
       $len = $112;
       $113 = $len;
       $114 = ($113|0)==(128);
       if ($114) {
        continue;
       }
       $115 = $len;
       $116 = ($115|0)<(128);
       $117 = $len;
       if ($116) {
        $118 = (($117) + 1)|0;
        $len = $118;
        $119 = $len;
        $120 = $count;
        $121 = (($120) + ($119))|0;
        $count = $121;
        while(1) {
         $122 = $len;
         $123 = ($122|0)!=(0);
         if (!($123)) {
          continue L40;
         }
         $124 = $1;
         $125 = (__ZL10stbi__get8P13stbi__context($124)|0);
         $126 = $p;
         HEAP8[$126>>0] = $125;
         $127 = $p;
         $128 = ((($127)) + 4|0);
         $p = $128;
         $129 = $len;
         $130 = (($129) + -1)|0;
         $len = $130;
        }
       }
       $131 = ($117|0)>(128);
       if (!($131)) {
        continue;
       }
       $132 = $len;
       $133 = $132 ^ 255;
       $len = $133;
       $134 = $len;
       $135 = (($134) + 2)|0;
       $len = $135;
       $136 = $1;
       $137 = (__ZL10stbi__get8P13stbi__context($136)|0);
       $val = $137;
       $138 = $len;
       $139 = $count;
       $140 = (($139) + ($138))|0;
       $count = $140;
       while(1) {
        $141 = $len;
        $142 = ($141|0)!=(0);
        if (!($142)) {
         continue L40;
        }
        $143 = $val;
        $144 = $p;
        HEAP8[$144>>0] = $143;
        $145 = $p;
        $146 = ((($145)) + 4|0);
        $p = $146;
        $147 = $len;
        $148 = (($147) + -1)|0;
        $len = $148;
       }
      }
     }
    } while(0);
    $149 = $channel;
    $150 = (($149) + 1)|0;
    $channel = $150;
   }
  } else {
   $channel = 0;
   while(1) {
    $151 = $channel;
    $152 = ($151|0)<(4);
    if (!($152)) {
     break L29;
    }
    $153 = $out;
    $154 = $channel;
    $155 = (($153) + ($154)|0);
    $p1 = $155;
    $156 = $channel;
    $157 = $channelCount;
    $158 = ($156|0)>($157|0);
    $i = 0;
    L59: do {
     if ($158) {
      while(1) {
       $159 = $i;
       $160 = $pixelCount;
       $161 = ($159|0)<($160|0);
       if (!($161)) {
        break L59;
       }
       $162 = $channel;
       $163 = ($162|0)==(3);
       $164 = $163 ? 255 : 0;
       $165 = $164&255;
       $166 = $p1;
       HEAP8[$166>>0] = $165;
       $167 = $i;
       $168 = (($167) + 1)|0;
       $i = $168;
       $169 = $p1;
       $170 = ((($169)) + 4|0);
       $p1 = $170;
      }
     } else {
      while(1) {
       $171 = $i;
       $172 = $pixelCount;
       $173 = ($171|0)<($172|0);
       if (!($173)) {
        break L59;
       }
       $174 = $1;
       $175 = (__ZL10stbi__get8P13stbi__context($174)|0);
       $176 = $p1;
       HEAP8[$176>>0] = $175;
       $177 = $i;
       $178 = (($177) + 1)|0;
       $i = $178;
       $179 = $p1;
       $180 = ((($179)) + 4|0);
       $p1 = $180;
      }
     }
    } while(0);
    $181 = $channel;
    $182 = (($181) + 1)|0;
    $channel = $182;
   }
  }
 } while(0);
 $183 = $5;
 $184 = ($183|0)!=(0);
 $185 = $5;
 $186 = ($185|0)!=(4);
 $or$cond3 = $184 & $186;
 if ($or$cond3) {
  $187 = $out;
  $188 = $5;
  $189 = $w;
  $190 = $h;
  $191 = (__ZL20stbi__convert_formatPhiijj($187,4,$188,$189,$190)|0);
  $out = $191;
  $192 = $out;
  $193 = ($192|0)==(0|0);
  if ($193) {
   $194 = $out;
   $0 = $194;
   $203 = $0;
   STACKTOP = sp;return ($203|0);
  }
 }
 $195 = $4;
 $196 = ($195|0)!=(0|0);
 if ($196) {
  $197 = $4;
  HEAP32[$197>>2] = 4;
 }
 $198 = $h;
 $199 = $3;
 HEAP32[$199>>2] = $198;
 $200 = $w;
 $201 = $2;
 HEAP32[$201>>2] = $200;
 $202 = $out;
 $0 = $202;
 $203 = $0;
 STACKTOP = sp;return ($203|0);
}
function __ZL14stbi__pic_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL19stbi__pic_test_coreP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL14stbi__pic_loadP13stbi__contextPiS1_S1_i($s,$px,$py,$comp,$req_comp) {
 $s = $s|0;
 $px = $px|0;
 $py = $py|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $px;
 $3 = $py;
 $4 = $comp;
 $5 = $req_comp;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(92);
  $8 = $1;
  if (!($7)) {
   break;
  }
  (__ZL10stbi__get8P13stbi__context($8)|0);
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 $11 = (__ZL13stbi__get16beP13stbi__context($8)|0);
 $x = $11;
 $12 = $1;
 $13 = (__ZL13stbi__get16beP13stbi__context($12)|0);
 $y = $13;
 $14 = $1;
 $15 = (__ZL12stbi__at_eofP13stbi__context($14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = (__ZL9stbi__errPKc(4168)|0);
  $18 = ($17|0)!=(0);
  $19 = $18 ? 0 : 0;
  $20 = $19;
  $0 = $20;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $21 = $x;
 $22 = (268435456 / ($21|0))&-1;
 $23 = $y;
 $24 = ($22|0)<($23|0);
 if ($24) {
  $25 = (__ZL9stbi__errPKc(1568)|0);
  $26 = ($25|0)!=(0);
  $27 = $26 ? 0 : 0;
  $28 = $27;
  $0 = $28;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $29 = $1;
 (__ZL13stbi__get32beP13stbi__context($29)|0);
 $30 = $1;
 (__ZL13stbi__get16beP13stbi__context($30)|0);
 $31 = $1;
 (__ZL13stbi__get16beP13stbi__context($31)|0);
 $32 = $x;
 $33 = $y;
 $34 = Math_imul($32, $33)|0;
 $35 = $34<<2;
 $36 = (__ZL12stbi__mallocj($35)|0);
 $result = $36;
 $37 = $result;
 $38 = $x;
 $39 = $y;
 $40 = Math_imul($38, $39)|0;
 $41 = $40<<2;
 _memset(($37|0),-1,($41|0))|0;
 $42 = $1;
 $43 = $x;
 $44 = $y;
 $45 = $4;
 $46 = $result;
 $47 = (__ZL19stbi__pic_load_coreP13stbi__contextiiPiPh($42,$43,$44,$45,$46)|0);
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  $49 = $result;
  _free($49);
  $result = 0;
 }
 $50 = $x;
 $51 = $2;
 HEAP32[$51>>2] = $50;
 $52 = $y;
 $53 = $3;
 HEAP32[$53>>2] = $52;
 $54 = $5;
 $55 = ($54|0)==(0);
 if ($55) {
  $56 = $4;
  $57 = HEAP32[$56>>2]|0;
  $5 = $57;
 }
 $58 = $result;
 $59 = $5;
 $60 = $x;
 $61 = $y;
 $62 = (__ZL20stbi__convert_formatPhiijj($58,4,$59,$60,$61)|0);
 $result = $62;
 $63 = $result;
 $0 = $63;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function __ZL14stbi__pnm_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $t = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $p = $3;
 $4 = $1;
 $5 = (__ZL10stbi__get8P13stbi__context($4)|0);
 $t = $5;
 $6 = $p;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)!=(80);
 do {
  if (!($8)) {
   $9 = $t;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)!=(53);
   if ($11) {
    $12 = $t;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)!=(54);
    if ($14) {
     break;
    }
   }
   $0 = 1;
   $16 = $0;
   STACKTOP = sp;return ($16|0);
  }
 } while(0);
 $15 = $1;
 __ZL12stbi__rewindP13stbi__context($15);
 $0 = 0;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __ZL14stbi__pnm_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = $1;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = (__ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_($6,$7,$9,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 HEAP32[$16>>2] = $15;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 HEAP32[$20>>2] = $19;
 $21 = $1;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 HEAP32[$24>>2] = $23;
 $25 = $1;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($27, $29)|0;
 $31 = $1;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = Math_imul($30, $33)|0;
 $35 = (__ZL12stbi__mallocj($34)|0);
 $out = $35;
 $36 = $out;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $38 = (__ZL9stbi__errPKc(1832)|0);
  $39 = ($38|0)!=(0);
  $40 = $39 ? 0 : 0;
  $41 = $40;
  $0 = $41;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $42 = $1;
 $43 = $out;
 $44 = $1;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $1;
 $48 = HEAP32[$47>>2]|0;
 $49 = Math_imul($46, $48)|0;
 $50 = $1;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = Math_imul($49, $52)|0;
 (__ZL10stbi__getnP13stbi__contextPhi($42,$43,$53)|0);
 $54 = $5;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $5;
  $57 = $1;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)!=($59|0);
  if ($60) {
   $61 = $out;
   $62 = $1;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $5;
   $66 = $1;
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (__ZL20stbi__convert_formatPhiijj($61,$64,$65,$67,$70)|0);
   $out = $71;
   $72 = $out;
   $73 = ($72|0)==(0|0);
   if ($73) {
    $74 = $out;
    $0 = $74;
    $76 = $0;
    STACKTOP = sp;return ($76|0);
   }
  }
 }
 $75 = $out;
 $0 = $75;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function __ZL16stbi__hdr_to_ldrPfiii($data,$x,$y,$comp) {
 $data = $data|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $i = 0, $k = 0, $n = 0, $output = 0;
 var $z = 0.0, $z1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $2;
 $6 = $3;
 $7 = Math_imul($5, $6)|0;
 $8 = $4;
 $9 = Math_imul($7, $8)|0;
 $10 = (__ZL12stbi__mallocj($9)|0);
 $output = $10;
 $11 = $output;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $1;
  _free($13);
  $14 = (__ZL9stbi__errPKc(1832)|0);
  $15 = ($14|0)!=(0);
  $16 = $15 ? 0 : 0;
  $17 = $16;
  $0 = $17;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $18 = $4;
 $19 = $18 & 1;
 $20 = ($19|0)!=(0);
 $21 = $4;
 if ($20) {
  $n = $21;
 } else {
  $22 = (($21) - 1)|0;
  $n = $22;
 }
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $2;
  $25 = $3;
  $26 = Math_imul($24, $25)|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   break;
  }
  $k = 0;
  while(1) {
   $28 = $k;
   $29 = $n;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $i;
   $32 = $4;
   $33 = Math_imul($31, $32)|0;
   $34 = $k;
   $35 = (($33) + ($34))|0;
   $36 = $1;
   $37 = (($36) + ($35<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = +HEAPF32[120>>2];
   $40 = $38 * $39;
   $41 = $40;
   $42 = +HEAPF32[112>>2];
   $43 = $42;
   $44 = (+Math_pow((+$41),(+$43)));
   $45 = $44;
   $46 = $45 * 255.0;
   $47 = $46 + 0.5;
   $z = $47;
   $48 = $z;
   $49 = $48 < 0.0;
   if ($49) {
    $z = 0.0;
   }
   $50 = $z;
   $51 = $50 > 255.0;
   if ($51) {
    $z = 255.0;
   }
   $52 = $z;
   $53 = (~~(($52)));
   $54 = $53&255;
   $55 = $i;
   $56 = $4;
   $57 = Math_imul($55, $56)|0;
   $58 = $k;
   $59 = (($57) + ($58))|0;
   $60 = $output;
   $61 = (($60) + ($59)|0);
   HEAP8[$61>>0] = $54;
   $62 = $k;
   $63 = (($62) + 1)|0;
   $k = $63;
  }
  $64 = $k;
  $65 = $4;
  $66 = ($64|0)<($65|0);
  if ($66) {
   $67 = $i;
   $68 = $4;
   $69 = Math_imul($67, $68)|0;
   $70 = $k;
   $71 = (($69) + ($70))|0;
   $72 = $1;
   $73 = (($72) + ($71<<2)|0);
   $74 = +HEAPF32[$73>>2];
   $75 = $74 * 255.0;
   $76 = $75 + 0.5;
   $z1 = $76;
   $77 = $z1;
   $78 = $77 < 0.0;
   if ($78) {
    $z1 = 0.0;
   }
   $79 = $z1;
   $80 = $79 > 255.0;
   if ($80) {
    $z1 = 255.0;
   }
   $81 = $z1;
   $82 = (~~(($81)));
   $83 = $82&255;
   $84 = $i;
   $85 = $4;
   $86 = Math_imul($84, $85)|0;
   $87 = $k;
   $88 = (($86) + ($87))|0;
   $89 = $output;
   $90 = (($89) + ($88)|0);
   HEAP8[$90>>0] = $83;
  }
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 $93 = $1;
 _free($93);
 $94 = $output;
 $0 = $94;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function __ZL14stbi__tga_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $res = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 (__ZL10stbi__get8P13stbi__context($2)|0);
 $3 = $1;
 $4 = (__ZL10stbi__get8P13stbi__context($3)|0);
 $5 = $4&255;
 $sz = $5;
 $6 = $sz;
 $7 = ($6|0)>(1);
 if ($7) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $8 = $1;
 $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
 $10 = $9&255;
 $sz = $10;
 $11 = $sz;
 $12 = ($11|0)!=(1);
 $13 = $sz;
 $14 = ($13|0)!=(2);
 $or$cond = $12 & $14;
 $15 = $sz;
 $16 = ($15|0)!=(3);
 $or$cond3 = $or$cond & $16;
 $17 = $sz;
 $18 = ($17|0)!=(9);
 $or$cond5 = $or$cond3 & $18;
 $19 = $sz;
 $20 = ($19|0)!=(10);
 $or$cond7 = $or$cond5 & $20;
 $21 = $sz;
 $22 = ($21|0)!=(11);
 $or$cond9 = $or$cond7 & $22;
 if ($or$cond9) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $23 = $1;
 (__ZL13stbi__get16beP13stbi__context($23)|0);
 $24 = $1;
 (__ZL13stbi__get16beP13stbi__context($24)|0);
 $25 = $1;
 (__ZL10stbi__get8P13stbi__context($25)|0);
 $26 = $1;
 (__ZL13stbi__get16beP13stbi__context($26)|0);
 $27 = $1;
 (__ZL13stbi__get16beP13stbi__context($27)|0);
 $28 = $1;
 $29 = (__ZL13stbi__get16beP13stbi__context($28)|0);
 $30 = ($29|0)<(1);
 if ($30) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $31 = $1;
 $32 = (__ZL13stbi__get16beP13stbi__context($31)|0);
 $33 = ($32|0)<(1);
 if ($33) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $34 = $1;
 $35 = (__ZL10stbi__get8P13stbi__context($34)|0);
 $36 = $35&255;
 $sz = $36;
 $37 = $sz;
 $38 = ($37|0)!=(8);
 $39 = $sz;
 $40 = ($39|0)!=(16);
 $or$cond11 = $38 & $40;
 $41 = $sz;
 $42 = ($41|0)!=(24);
 $or$cond13 = $or$cond11 & $42;
 $43 = $sz;
 $44 = ($43|0)!=(32);
 $or$cond15 = $or$cond13 & $44;
 if ($or$cond15) {
  $res = 0;
 } else {
  $res = 1;
 }
 $45 = $1;
 __ZL12stbi__rewindP13stbi__context($45);
 $46 = $res;
 $0 = $46;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function __ZL14stbi__tga_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $RLE_cmd = 0, $RLE_count = 0, $RLE_repeating = 0, $i = 0, $index1 = 0, $index2 = 0, $j = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pal_idx = 0, $raw_data = 0, $read_next_pixel = 0, $temp = 0, $temp2 = 0, $tga_bits_per_pixel = 0, $tga_comp = 0, $tga_data = 0, $tga_height = 0, $tga_image_type = 0, $tga_indexed = 0, $tga_inverted = 0, $tga_is_RLE = 0, $tga_offset = 0, $tga_palette = 0, $tga_palette_bits = 0, $tga_palette_len = 0;
 var $tga_palette_start = 0, $tga_pixel = 0, $tga_row = 0, $tga_width = 0, $tga_x_origin = 0, $tga_y_origin = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $raw_data = sp + 140|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $tga_offset = $8;
 $9 = $1;
 $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
 $11 = $10&255;
 $tga_indexed = $11;
 $12 = $1;
 $13 = (__ZL10stbi__get8P13stbi__context($12)|0);
 $14 = $13&255;
 $tga_image_type = $14;
 $tga_is_RLE = 0;
 $15 = $1;
 $16 = (__ZL13stbi__get16leP13stbi__context($15)|0);
 $tga_palette_start = $16;
 $17 = $1;
 $18 = (__ZL13stbi__get16leP13stbi__context($17)|0);
 $tga_palette_len = $18;
 $19 = $1;
 $20 = (__ZL10stbi__get8P13stbi__context($19)|0);
 $21 = $20&255;
 $tga_palette_bits = $21;
 $22 = $1;
 $23 = (__ZL13stbi__get16leP13stbi__context($22)|0);
 $tga_x_origin = $23;
 $24 = $1;
 $25 = (__ZL13stbi__get16leP13stbi__context($24)|0);
 $tga_y_origin = $25;
 $26 = $1;
 $27 = (__ZL13stbi__get16leP13stbi__context($26)|0);
 $tga_width = $27;
 $28 = $1;
 $29 = (__ZL13stbi__get16leP13stbi__context($28)|0);
 $tga_height = $29;
 $30 = $1;
 $31 = (__ZL10stbi__get8P13stbi__context($30)|0);
 $32 = $31&255;
 $tga_bits_per_pixel = $32;
 $33 = $tga_bits_per_pixel;
 $34 = (($33|0) / 8)&-1;
 $tga_comp = $34;
 $35 = $1;
 $36 = (__ZL10stbi__get8P13stbi__context($35)|0);
 $37 = $36&255;
 $tga_inverted = $37;
 $tga_palette = 0;
 $RLE_count = 0;
 $RLE_repeating = 0;
 $read_next_pixel = 1;
 $38 = $tga_image_type;
 $39 = ($38|0)>=(8);
 if ($39) {
  $40 = $tga_image_type;
  $41 = (($40) - 8)|0;
  $tga_image_type = $41;
  $tga_is_RLE = 1;
 }
 $42 = $tga_inverted;
 $43 = $42 >> 5;
 $44 = $43 & 1;
 $45 = (1 - ($44))|0;
 $tga_inverted = $45;
 $46 = $tga_width;
 $47 = ($46|0)<(1);
 $48 = $tga_height;
 $49 = ($48|0)<(1);
 $or$cond = $47 | $49;
 $50 = $tga_image_type;
 $51 = ($50|0)<(1);
 $or$cond3 = $or$cond | $51;
 $52 = $tga_image_type;
 $53 = ($52|0)>(3);
 $or$cond5 = $or$cond3 | $53;
 if (!($or$cond5)) {
  $54 = $tga_bits_per_pixel;
  $55 = ($54|0)!=(8);
  $56 = $tga_bits_per_pixel;
  $57 = ($56|0)!=(16);
  $or$cond7 = $55 & $57;
  $58 = $tga_bits_per_pixel;
  $59 = ($58|0)!=(24);
  $or$cond9 = $or$cond7 & $59;
  $60 = $tga_bits_per_pixel;
  $61 = ($60|0)!=(32);
  $or$cond11 = $or$cond9 & $61;
  if (!($or$cond11)) {
   $62 = $tga_indexed;
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $tga_palette_bits;
    $65 = (($64|0) / 8)&-1;
    $tga_comp = $65;
   }
   $66 = $tga_width;
   $67 = $2;
   HEAP32[$67>>2] = $66;
   $68 = $tga_height;
   $69 = $3;
   HEAP32[$69>>2] = $68;
   $70 = $4;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    $72 = $tga_comp;
    $73 = $4;
    HEAP32[$73>>2] = $72;
   }
   $74 = $tga_width;
   $75 = $tga_height;
   $76 = Math_imul($74, $75)|0;
   $77 = $tga_comp;
   $78 = Math_imul($76, $77)|0;
   $79 = (__ZL12stbi__mallocj($78)|0);
   $tga_data = $79;
   $80 = $tga_data;
   $81 = ($80|0)!=(0|0);
   if (!($81)) {
    $82 = (__ZL9stbi__errPKc(1832)|0);
    $83 = ($82|0)!=(0);
    $84 = $83 ? 0 : 0;
    $85 = $84;
    $0 = $85;
    $307 = $0;
    STACKTOP = sp;return ($307|0);
   }
   $86 = $1;
   $87 = $tga_offset;
   __ZL10stbi__skipP13stbi__contexti($86,$87);
   $88 = $tga_indexed;
   $89 = ($88|0)!=(0);
   $90 = $tga_is_RLE;
   $91 = ($90|0)!=(0);
   $or$cond13 = $89 | $91;
   L17: do {
    if ($or$cond13) {
     $117 = $tga_indexed;
     $118 = ($117|0)!=(0);
     if ($118) {
      $119 = $1;
      $120 = $tga_palette_start;
      __ZL10stbi__skipP13stbi__contexti($119,$120);
      $121 = $tga_palette_len;
      $122 = $tga_palette_bits;
      $123 = Math_imul($121, $122)|0;
      $124 = (($123|0) / 8)&-1;
      $125 = (__ZL12stbi__mallocj($124)|0);
      $tga_palette = $125;
      $126 = $tga_palette;
      $127 = ($126|0)!=(0|0);
      if (!($127)) {
       $128 = $tga_data;
       _free($128);
       $129 = (__ZL9stbi__errPKc(1832)|0);
       $130 = ($129|0)!=(0);
       $131 = $130 ? 0 : 0;
       $132 = $131;
       $0 = $132;
       $307 = $0;
       STACKTOP = sp;return ($307|0);
      }
      $133 = $1;
      $134 = $tga_palette;
      $135 = $tga_palette_len;
      $136 = $tga_palette_bits;
      $137 = Math_imul($135, $136)|0;
      $138 = (($137|0) / 8)&-1;
      $139 = (__ZL10stbi__getnP13stbi__contextPhi($133,$134,$138)|0);
      $140 = ($139|0)!=(0);
      if (!($140)) {
       $141 = $tga_data;
       _free($141);
       $142 = $tga_palette;
       _free($142);
       $143 = (__ZL9stbi__errPKc(4088)|0);
       $144 = ($143|0)!=(0);
       $145 = $144 ? 0 : 0;
       $146 = $145;
       $0 = $146;
       $307 = $0;
       STACKTOP = sp;return ($307|0);
      }
     }
     $i = 0;
     while(1) {
      $147 = $i;
      $148 = $tga_width;
      $149 = $tga_height;
      $150 = Math_imul($148, $149)|0;
      $151 = ($147|0)<($150|0);
      if (!($151)) {
       break;
      }
      $152 = $tga_is_RLE;
      $153 = ($152|0)!=(0);
      do {
       if ($153) {
        $154 = $RLE_count;
        $155 = ($154|0)==(0);
        if ($155) {
         $156 = $1;
         $157 = (__ZL10stbi__get8P13stbi__context($156)|0);
         $158 = $157&255;
         $RLE_cmd = $158;
         $159 = $RLE_cmd;
         $160 = $159 & 127;
         $161 = (1 + ($160))|0;
         $RLE_count = $161;
         $162 = $RLE_cmd;
         $163 = $162 >> 7;
         $RLE_repeating = $163;
         $read_next_pixel = 1;
         break;
        }
        $164 = $RLE_repeating;
        $165 = ($164|0)!=(0);
        if (!($165)) {
         $read_next_pixel = 1;
        }
       } else {
        $read_next_pixel = 1;
       }
      } while(0);
      $166 = $read_next_pixel;
      $167 = ($166|0)!=(0);
      if ($167) {
       $168 = $tga_indexed;
       $169 = ($168|0)!=(0);
       L41: do {
        if ($169) {
         $170 = $1;
         $171 = (__ZL10stbi__get8P13stbi__context($170)|0);
         $172 = $171&255;
         $pal_idx = $172;
         $173 = $pal_idx;
         $174 = $tga_palette_len;
         $175 = ($173|0)>=($174|0);
         $$ = $175 ? 0 : $172;
         $pal_idx = $$;
         $176 = $tga_bits_per_pixel;
         $177 = (($176|0) / 8)&-1;
         $178 = $pal_idx;
         $179 = Math_imul($178, $177)|0;
         $pal_idx = $179;
         $j = 0;
         while(1) {
          $180 = $j;
          $181 = $180<<3;
          $182 = $tga_bits_per_pixel;
          $183 = ($181|0)<($182|0);
          if (!($183)) {
           break L41;
          }
          $184 = $pal_idx;
          $185 = $j;
          $186 = (($184) + ($185))|0;
          $187 = $tga_palette;
          $188 = (($187) + ($186)|0);
          $189 = HEAP8[$188>>0]|0;
          $190 = $j;
          $191 = (($raw_data) + ($190)|0);
          HEAP8[$191>>0] = $189;
          $192 = $j;
          $193 = (($192) + 1)|0;
          $j = $193;
         }
        } else {
         $j = 0;
         while(1) {
          $194 = $j;
          $195 = $194<<3;
          $196 = $tga_bits_per_pixel;
          $197 = ($195|0)<($196|0);
          if (!($197)) {
           break L41;
          }
          $198 = $1;
          $199 = (__ZL10stbi__get8P13stbi__context($198)|0);
          $200 = $j;
          $201 = (($raw_data) + ($200)|0);
          HEAP8[$201>>0] = $199;
          $202 = $j;
          $203 = (($202) + 1)|0;
          $j = $203;
         }
        }
       } while(0);
       $read_next_pixel = 0;
      }
      $j = 0;
      while(1) {
       $204 = $j;
       $205 = $tga_comp;
       $206 = ($204|0)<($205|0);
       if (!($206)) {
        break;
       }
       $207 = $j;
       $208 = (($raw_data) + ($207)|0);
       $209 = HEAP8[$208>>0]|0;
       $210 = $i;
       $211 = $tga_comp;
       $212 = Math_imul($210, $211)|0;
       $213 = $j;
       $214 = (($212) + ($213))|0;
       $215 = $tga_data;
       $216 = (($215) + ($214)|0);
       HEAP8[$216>>0] = $209;
       $217 = $j;
       $218 = (($217) + 1)|0;
       $j = $218;
      }
      $219 = $RLE_count;
      $220 = (($219) + -1)|0;
      $RLE_count = $220;
      $221 = $i;
      $222 = (($221) + 1)|0;
      $i = $222;
     }
     $223 = $tga_inverted;
     $224 = ($223|0)!=(0);
     L57: do {
      if ($224) {
       $j = 0;
       while(1) {
        $225 = $j;
        $226 = $225<<1;
        $227 = $tga_height;
        $228 = ($226|0)<($227|0);
        if (!($228)) {
         break L57;
        }
        $229 = $j;
        $230 = $tga_width;
        $231 = Math_imul($229, $230)|0;
        $232 = $tga_comp;
        $233 = Math_imul($231, $232)|0;
        $index1 = $233;
        $234 = $tga_height;
        $235 = (($234) - 1)|0;
        $236 = $j;
        $237 = (($235) - ($236))|0;
        $238 = $tga_width;
        $239 = Math_imul($237, $238)|0;
        $240 = $tga_comp;
        $241 = Math_imul($239, $240)|0;
        $index2 = $241;
        $242 = $tga_width;
        $243 = $tga_comp;
        $244 = Math_imul($242, $243)|0;
        $i = $244;
        while(1) {
         $245 = $i;
         $246 = ($245|0)>(0);
         if (!($246)) {
          break;
         }
         $247 = $index1;
         $248 = $tga_data;
         $249 = (($248) + ($247)|0);
         $250 = HEAP8[$249>>0]|0;
         $temp = $250;
         $251 = $index2;
         $252 = $tga_data;
         $253 = (($252) + ($251)|0);
         $254 = HEAP8[$253>>0]|0;
         $255 = $index1;
         $256 = $tga_data;
         $257 = (($256) + ($255)|0);
         HEAP8[$257>>0] = $254;
         $258 = $temp;
         $259 = $index2;
         $260 = $tga_data;
         $261 = (($260) + ($259)|0);
         HEAP8[$261>>0] = $258;
         $262 = $index1;
         $263 = (($262) + 1)|0;
         $index1 = $263;
         $264 = $index2;
         $265 = (($264) + 1)|0;
         $index2 = $265;
         $266 = $i;
         $267 = (($266) + -1)|0;
         $i = $267;
        }
        $268 = $j;
        $269 = (($268) + 1)|0;
        $j = $269;
       }
      }
     } while(0);
     $270 = $tga_palette;
     $271 = ($270|0)!=(0|0);
     if ($271) {
      $272 = $tga_palette;
      _free($272);
     }
    } else {
     $i = 0;
     while(1) {
      $92 = $i;
      $93 = $tga_height;
      $94 = ($92|0)<($93|0);
      if (!($94)) {
       break L17;
      }
      $95 = $tga_inverted;
      $96 = ($95|0)!=(0);
      if ($96) {
       $97 = $tga_height;
       $98 = $i;
       $99 = (($97) - ($98))|0;
       $100 = (($99) - 1)|0;
       $102 = $100;
      } else {
       $101 = $i;
       $102 = $101;
      }
      $y1 = $102;
      $103 = $tga_data;
      $104 = $y1;
      $105 = $tga_width;
      $106 = Math_imul($104, $105)|0;
      $107 = $tga_comp;
      $108 = Math_imul($106, $107)|0;
      $109 = (($103) + ($108)|0);
      $tga_row = $109;
      $110 = $1;
      $111 = $tga_row;
      $112 = $tga_width;
      $113 = $tga_comp;
      $114 = Math_imul($112, $113)|0;
      (__ZL10stbi__getnP13stbi__contextPhi($110,$111,$114)|0);
      $115 = $i;
      $116 = (($115) + 1)|0;
      $i = $116;
     }
    }
   } while(0);
   $273 = $tga_comp;
   $274 = ($273|0)>=(3);
   L77: do {
    if ($274) {
     $275 = $tga_data;
     $tga_pixel = $275;
     $i = 0;
     while(1) {
      $276 = $i;
      $277 = $tga_width;
      $278 = $tga_height;
      $279 = Math_imul($277, $278)|0;
      $280 = ($276|0)<($279|0);
      if (!($280)) {
       break L77;
      }
      $281 = $tga_pixel;
      $282 = HEAP8[$281>>0]|0;
      $temp2 = $282;
      $283 = $tga_pixel;
      $284 = ((($283)) + 2|0);
      $285 = HEAP8[$284>>0]|0;
      $286 = $tga_pixel;
      HEAP8[$286>>0] = $285;
      $287 = $temp2;
      $288 = $tga_pixel;
      $289 = ((($288)) + 2|0);
      HEAP8[$289>>0] = $287;
      $290 = $tga_comp;
      $291 = $tga_pixel;
      $292 = (($291) + ($290)|0);
      $tga_pixel = $292;
      $293 = $i;
      $294 = (($293) + 1)|0;
      $i = $294;
     }
    }
   } while(0);
   $295 = $5;
   $296 = ($295|0)!=(0);
   if ($296) {
    $297 = $5;
    $298 = $tga_comp;
    $299 = ($297|0)!=($298|0);
    if ($299) {
     $300 = $tga_data;
     $301 = $tga_comp;
     $302 = $5;
     $303 = $tga_width;
     $304 = $tga_height;
     $305 = (__ZL20stbi__convert_formatPhiijj($300,$301,$302,$303,$304)|0);
     $tga_data = $305;
    }
   }
   $tga_y_origin = 0;
   $tga_x_origin = 0;
   $tga_palette_bits = 0;
   $tga_palette_len = 0;
   $tga_palette_start = 0;
   $306 = $tga_data;
   $0 = $306;
   $307 = $0;
   STACKTOP = sp;return ($307|0);
  }
 }
 $0 = 0;
 $307 = $0;
 STACKTOP = sp;return ($307|0);
}
function __ZL20stbi__convert_formatPhiijj($data,$img_n,$req_comp,$x,$y) {
 $data = $data|0;
 $img_n = $img_n|0;
 $req_comp = $req_comp|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $dest = 0, $good = 0, $i = 0, $j = 0, $or$cond = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $img_n;
 $3 = $req_comp;
 $4 = $x;
 $5 = $y;
 $6 = $3;
 $7 = $2;
 $8 = ($6|0)==($7|0);
 if ($8) {
  $9 = $1;
  $0 = $9;
  $301 = $0;
  STACKTOP = sp;return ($301|0);
 }
 $10 = $3;
 $11 = ($10|0)>=(1);
 $12 = $3;
 $13 = ($12|0)<=(4);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  ___assert_fail((4104|0),(1928|0),1325,(4136|0));
  // unreachable;
 }
 $14 = $3;
 $15 = $4;
 $16 = Math_imul($14, $15)|0;
 $17 = $5;
 $18 = Math_imul($16, $17)|0;
 $19 = (__ZL12stbi__mallocj($18)|0);
 $good = $19;
 $20 = $good;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = $1;
  _free($22);
  $23 = (__ZL9stbi__errPKc(1832)|0);
  $24 = ($23|0)!=(0);
  $25 = $24 ? 0 : 0;
  $26 = $25;
  $0 = $26;
  $301 = $0;
  STACKTOP = sp;return ($301|0);
 }
 $j = 0;
 L12: while(1) {
  $27 = $j;
  $28 = $5;
  $29 = ($27|0)<($28|0);
  $30 = $1;
  if (!($29)) {
   break;
  }
  $31 = $j;
  $32 = $4;
  $33 = Math_imul($31, $32)|0;
  $34 = $2;
  $35 = Math_imul($33, $34)|0;
  $36 = (($30) + ($35)|0);
  $src = $36;
  $37 = $good;
  $38 = $j;
  $39 = $4;
  $40 = Math_imul($38, $39)|0;
  $41 = $3;
  $42 = Math_imul($40, $41)|0;
  $43 = (($37) + ($42)|0);
  $dest = $43;
  $44 = $2;
  $45 = $44<<3;
  $46 = $3;
  $47 = (($45) + ($46))|0;
  L15: do {
   switch ($47|0) {
   case 19:  {
    $112 = $4;
    $113 = (($112) - 1)|0;
    $i = $113;
    while(1) {
     $114 = $i;
     $115 = ($114|0)>=(0);
     if (!($115)) {
      break L15;
     }
     $116 = $src;
     $117 = HEAP8[$116>>0]|0;
     $118 = $dest;
     $119 = ((($118)) + 2|0);
     HEAP8[$119>>0] = $117;
     $120 = $dest;
     $121 = ((($120)) + 1|0);
     HEAP8[$121>>0] = $117;
     $122 = $dest;
     HEAP8[$122>>0] = $117;
     $123 = $i;
     $124 = (($123) + -1)|0;
     $i = $124;
     $125 = $src;
     $126 = ((($125)) + 2|0);
     $src = $126;
     $127 = $dest;
     $128 = ((($127)) + 3|0);
     $dest = $128;
    }
    break;
   }
   case 10:  {
    $48 = $4;
    $49 = (($48) - 1)|0;
    $i = $49;
    while(1) {
     $50 = $i;
     $51 = ($50|0)>=(0);
     if (!($51)) {
      break L15;
     }
     $52 = $src;
     $53 = HEAP8[$52>>0]|0;
     $54 = $dest;
     HEAP8[$54>>0] = $53;
     $55 = $dest;
     $56 = ((($55)) + 1|0);
     HEAP8[$56>>0] = -1;
     $57 = $i;
     $58 = (($57) + -1)|0;
     $i = $58;
     $59 = $src;
     $60 = ((($59)) + 1|0);
     $src = $60;
     $61 = $dest;
     $62 = ((($61)) + 2|0);
     $dest = $62;
    }
    break;
   }
   case 11:  {
    $63 = $4;
    $64 = (($63) - 1)|0;
    $i = $64;
    while(1) {
     $65 = $i;
     $66 = ($65|0)>=(0);
     if (!($66)) {
      break L15;
     }
     $67 = $src;
     $68 = HEAP8[$67>>0]|0;
     $69 = $dest;
     $70 = ((($69)) + 2|0);
     HEAP8[$70>>0] = $68;
     $71 = $dest;
     $72 = ((($71)) + 1|0);
     HEAP8[$72>>0] = $68;
     $73 = $dest;
     HEAP8[$73>>0] = $68;
     $74 = $i;
     $75 = (($74) + -1)|0;
     $i = $75;
     $76 = $src;
     $77 = ((($76)) + 1|0);
     $src = $77;
     $78 = $dest;
     $79 = ((($78)) + 3|0);
     $dest = $79;
    }
    break;
   }
   case 12:  {
    $80 = $4;
    $81 = (($80) - 1)|0;
    $i = $81;
    while(1) {
     $82 = $i;
     $83 = ($82|0)>=(0);
     if (!($83)) {
      break L15;
     }
     $84 = $src;
     $85 = HEAP8[$84>>0]|0;
     $86 = $dest;
     $87 = ((($86)) + 2|0);
     HEAP8[$87>>0] = $85;
     $88 = $dest;
     $89 = ((($88)) + 1|0);
     HEAP8[$89>>0] = $85;
     $90 = $dest;
     HEAP8[$90>>0] = $85;
     $91 = $dest;
     $92 = ((($91)) + 3|0);
     HEAP8[$92>>0] = -1;
     $93 = $i;
     $94 = (($93) + -1)|0;
     $i = $94;
     $95 = $src;
     $96 = ((($95)) + 1|0);
     $src = $96;
     $97 = $dest;
     $98 = ((($97)) + 4|0);
     $dest = $98;
    }
    break;
   }
   case 17:  {
    $99 = $4;
    $100 = (($99) - 1)|0;
    $i = $100;
    while(1) {
     $101 = $i;
     $102 = ($101|0)>=(0);
     if (!($102)) {
      break L15;
     }
     $103 = $src;
     $104 = HEAP8[$103>>0]|0;
     $105 = $dest;
     HEAP8[$105>>0] = $104;
     $106 = $i;
     $107 = (($106) + -1)|0;
     $i = $107;
     $108 = $src;
     $109 = ((($108)) + 2|0);
     $src = $109;
     $110 = $dest;
     $111 = ((($110)) + 1|0);
     $dest = $111;
    }
    break;
   }
   case 33:  {
    $224 = $4;
    $225 = (($224) - 1)|0;
    $i = $225;
    while(1) {
     $226 = $i;
     $227 = ($226|0)>=(0);
     if (!($227)) {
      break L15;
     }
     $228 = $src;
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = $src;
     $232 = ((($231)) + 1|0);
     $233 = HEAP8[$232>>0]|0;
     $234 = $233&255;
     $235 = $src;
     $236 = ((($235)) + 2|0);
     $237 = HEAP8[$236>>0]|0;
     $238 = $237&255;
     $239 = (__ZL15stbi__compute_yiii($230,$234,$238)|0);
     $240 = $dest;
     HEAP8[$240>>0] = $239;
     $241 = $i;
     $242 = (($241) + -1)|0;
     $i = $242;
     $243 = $src;
     $244 = ((($243)) + 4|0);
     $src = $244;
     $245 = $dest;
     $246 = ((($245)) + 1|0);
     $dest = $246;
    }
    break;
   }
   case 35:  {
    $275 = $4;
    $276 = (($275) - 1)|0;
    $i = $276;
    while(1) {
     $277 = $i;
     $278 = ($277|0)>=(0);
     if (!($278)) {
      break L15;
     }
     $279 = $src;
     $280 = HEAP8[$279>>0]|0;
     $281 = $dest;
     HEAP8[$281>>0] = $280;
     $282 = $src;
     $283 = ((($282)) + 1|0);
     $284 = HEAP8[$283>>0]|0;
     $285 = $dest;
     $286 = ((($285)) + 1|0);
     HEAP8[$286>>0] = $284;
     $287 = $src;
     $288 = ((($287)) + 2|0);
     $289 = HEAP8[$288>>0]|0;
     $290 = $dest;
     $291 = ((($290)) + 2|0);
     HEAP8[$291>>0] = $289;
     $292 = $i;
     $293 = (($292) + -1)|0;
     $i = $293;
     $294 = $src;
     $295 = ((($294)) + 4|0);
     $src = $295;
     $296 = $dest;
     $297 = ((($296)) + 3|0);
     $dest = $297;
    }
    break;
   }
   case 25:  {
    $176 = $4;
    $177 = (($176) - 1)|0;
    $i = $177;
    while(1) {
     $178 = $i;
     $179 = ($178|0)>=(0);
     if (!($179)) {
      break L15;
     }
     $180 = $src;
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = $src;
     $184 = ((($183)) + 1|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = $src;
     $188 = ((($187)) + 2|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = (__ZL15stbi__compute_yiii($182,$186,$190)|0);
     $192 = $dest;
     HEAP8[$192>>0] = $191;
     $193 = $i;
     $194 = (($193) + -1)|0;
     $i = $194;
     $195 = $src;
     $196 = ((($195)) + 3|0);
     $src = $196;
     $197 = $dest;
     $198 = ((($197)) + 1|0);
     $dest = $198;
    }
    break;
   }
   case 26:  {
    $199 = $4;
    $200 = (($199) - 1)|0;
    $i = $200;
    while(1) {
     $201 = $i;
     $202 = ($201|0)>=(0);
     if (!($202)) {
      break L15;
     }
     $203 = $src;
     $204 = HEAP8[$203>>0]|0;
     $205 = $204&255;
     $206 = $src;
     $207 = ((($206)) + 1|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = $src;
     $211 = ((($210)) + 2|0);
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $214 = (__ZL15stbi__compute_yiii($205,$209,$213)|0);
     $215 = $dest;
     HEAP8[$215>>0] = $214;
     $216 = $dest;
     $217 = ((($216)) + 1|0);
     HEAP8[$217>>0] = -1;
     $218 = $i;
     $219 = (($218) + -1)|0;
     $i = $219;
     $220 = $src;
     $221 = ((($220)) + 3|0);
     $src = $221;
     $222 = $dest;
     $223 = ((($222)) + 2|0);
     $dest = $223;
    }
    break;
   }
   case 28:  {
    $151 = $4;
    $152 = (($151) - 1)|0;
    $i = $152;
    while(1) {
     $153 = $i;
     $154 = ($153|0)>=(0);
     if (!($154)) {
      break L15;
     }
     $155 = $src;
     $156 = HEAP8[$155>>0]|0;
     $157 = $dest;
     HEAP8[$157>>0] = $156;
     $158 = $src;
     $159 = ((($158)) + 1|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $dest;
     $162 = ((($161)) + 1|0);
     HEAP8[$162>>0] = $160;
     $163 = $src;
     $164 = ((($163)) + 2|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $dest;
     $167 = ((($166)) + 2|0);
     HEAP8[$167>>0] = $165;
     $168 = $dest;
     $169 = ((($168)) + 3|0);
     HEAP8[$169>>0] = -1;
     $170 = $i;
     $171 = (($170) + -1)|0;
     $i = $171;
     $172 = $src;
     $173 = ((($172)) + 3|0);
     $src = $173;
     $174 = $dest;
     $175 = ((($174)) + 4|0);
     $dest = $175;
    }
    break;
   }
   case 20:  {
    $129 = $4;
    $130 = (($129) - 1)|0;
    $i = $130;
    while(1) {
     $131 = $i;
     $132 = ($131|0)>=(0);
     if (!($132)) {
      break L15;
     }
     $133 = $src;
     $134 = HEAP8[$133>>0]|0;
     $135 = $dest;
     $136 = ((($135)) + 2|0);
     HEAP8[$136>>0] = $134;
     $137 = $dest;
     $138 = ((($137)) + 1|0);
     HEAP8[$138>>0] = $134;
     $139 = $dest;
     HEAP8[$139>>0] = $134;
     $140 = $src;
     $141 = ((($140)) + 1|0);
     $142 = HEAP8[$141>>0]|0;
     $143 = $dest;
     $144 = ((($143)) + 3|0);
     HEAP8[$144>>0] = $142;
     $145 = $i;
     $146 = (($145) + -1)|0;
     $i = $146;
     $147 = $src;
     $148 = ((($147)) + 2|0);
     $src = $148;
     $149 = $dest;
     $150 = ((($149)) + 4|0);
     $dest = $150;
    }
    break;
   }
   case 34:  {
    $247 = $4;
    $248 = (($247) - 1)|0;
    $i = $248;
    while(1) {
     $249 = $i;
     $250 = ($249|0)>=(0);
     if (!($250)) {
      break L15;
     }
     $251 = $src;
     $252 = HEAP8[$251>>0]|0;
     $253 = $252&255;
     $254 = $src;
     $255 = ((($254)) + 1|0);
     $256 = HEAP8[$255>>0]|0;
     $257 = $256&255;
     $258 = $src;
     $259 = ((($258)) + 2|0);
     $260 = HEAP8[$259>>0]|0;
     $261 = $260&255;
     $262 = (__ZL15stbi__compute_yiii($253,$257,$261)|0);
     $263 = $dest;
     HEAP8[$263>>0] = $262;
     $264 = $src;
     $265 = ((($264)) + 3|0);
     $266 = HEAP8[$265>>0]|0;
     $267 = $dest;
     $268 = ((($267)) + 1|0);
     HEAP8[$268>>0] = $266;
     $269 = $i;
     $270 = (($269) + -1)|0;
     $i = $270;
     $271 = $src;
     $272 = ((($271)) + 4|0);
     $src = $272;
     $273 = $dest;
     $274 = ((($273)) + 2|0);
     $dest = $274;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $298 = $j;
  $299 = (($298) + 1)|0;
  $j = $299;
 }
 if ((label|0) == 46) {
  ___assert_fail((4160|0),(1928|0),1354,(4136|0));
  // unreachable;
 }
 _free($30);
 $300 = $good;
 $0 = $300;
 $301 = $0;
 STACKTOP = sp;return ($301|0);
}
function __ZL15stbi__compute_yiii($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $g;
 $2 = $b;
 $3 = $0;
 $4 = ($3*77)|0;
 $5 = $1;
 $6 = ($5*150)|0;
 $7 = (($4) + ($6))|0;
 $8 = $2;
 $9 = ($8*29)|0;
 $10 = (($7) + ($9))|0;
 $11 = $10 >> 8;
 $12 = $11&255;
 STACKTOP = sp;return ($12|0);
}
function __ZL19stbi__pic_load_coreP13stbi__contextiiPiPh($s,$width,$height,$comp,$result) {
 $s = $s|0;
 $width = $width|0;
 $height = $height|0;
 $comp = $comp|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $act_comp = 0, $chained = 0, $count = 0, $count3 = 0, $dest = 0;
 var $i = 0, $i4 = 0, $i6 = 0, $left = 0, $left2 = 0, $num_packets = 0, $packet = 0, $packet1 = 0, $packet_idx = 0, $packets = 0, $value = 0, $value5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $packets = sp + 94|0;
 $value = sp + 84|0;
 $value5 = sp + 88|0;
 $1 = $s;
 $2 = $width;
 $3 = $height;
 $4 = $comp;
 $5 = $result;
 $act_comp = 0;
 $num_packets = 0;
 while(1) {
  $6 = $num_packets;
  $7 = ($6|0)==(10);
  if ($7) {
   label = 3;
   break;
  }
  $12 = $num_packets;
  $13 = (($12) + 1)|0;
  $num_packets = $13;
  $14 = (($packets) + (($12*3)|0)|0);
  $packet = $14;
  $15 = $1;
  $16 = (__ZL10stbi__get8P13stbi__context($15)|0);
  $17 = $16&255;
  $chained = $17;
  $18 = $1;
  $19 = (__ZL10stbi__get8P13stbi__context($18)|0);
  $20 = $packet;
  HEAP8[$20>>0] = $19;
  $21 = $1;
  $22 = (__ZL10stbi__get8P13stbi__context($21)|0);
  $23 = $packet;
  $24 = ((($23)) + 1|0);
  HEAP8[$24>>0] = $22;
  $25 = $1;
  $26 = (__ZL10stbi__get8P13stbi__context($25)|0);
  $27 = $packet;
  $28 = ((($27)) + 2|0);
  HEAP8[$28>>0] = $26;
  $29 = $packet;
  $30 = ((($29)) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $act_comp;
  $34 = $33 | $32;
  $act_comp = $34;
  $35 = $1;
  $36 = (__ZL12stbi__at_eofP13stbi__context($35)|0);
  $37 = ($36|0)!=(0);
  if ($37) {
   label = 5;
   break;
  }
  $42 = $packet;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($44|0)!=(8);
  if ($45) {
   label = 7;
   break;
  }
  $50 = $chained;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 3) {
  $8 = (__ZL9stbi__errPKc(4184)|0);
  $9 = ($8|0)!=(0);
  $10 = $9 ? 0 : 0;
  $11 = $10;
  $0 = $11;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 else if ((label|0) == 5) {
  $38 = (__ZL9stbi__errPKc(4168)|0);
  $39 = ($38|0)!=(0);
  $40 = $39 ? 0 : 0;
  $41 = $40;
  $0 = $41;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 else if ((label|0) == 7) {
  $46 = (__ZL9stbi__errPKc(4184)|0);
  $47 = ($46|0)!=(0);
  $48 = $47 ? 0 : 0;
  $49 = $48;
  $0 = $49;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 else if ((label|0) == 9) {
  $52 = $act_comp;
  $53 = $52 & 16;
  $54 = ($53|0)!=(0);
  $55 = $54 ? 4 : 3;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  $y = 0;
  L10: while(1) {
   $57 = $y;
   $58 = $3;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    label = 57;
    break;
   }
   $packet_idx = 0;
   while(1) {
    $60 = $packet_idx;
    $61 = $num_packets;
    $62 = ($60|0)<($61|0);
    if (!($62)) {
     break;
    }
    $63 = $packet_idx;
    $64 = (($packets) + (($63*3)|0)|0);
    $packet1 = $64;
    $65 = $5;
    $66 = $y;
    $67 = $2;
    $68 = Math_imul($66, $67)|0;
    $69 = $68<<2;
    $70 = (($65) + ($69)|0);
    $dest = $70;
    $71 = $packet1;
    $72 = ((($71)) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    L16: do {
     if ((($74|0) == 0)) {
      $x = 0;
      while(1) {
       $79 = $x;
       $80 = $2;
       $81 = ($79|0)<($80|0);
       if (!($81)) {
        break L16;
       }
       $82 = $1;
       $83 = $packet1;
       $84 = ((($83)) + 2|0);
       $85 = HEAP8[$84>>0]|0;
       $86 = $85&255;
       $87 = $dest;
       $88 = (__ZL13stbi__readvalP13stbi__contextiPh($82,$86,$87)|0);
       $89 = ($88|0)!=(0|0);
       if (!($89)) {
        label = 18;
        break L10;
       }
       $90 = $x;
       $91 = (($90) + 1)|0;
       $x = $91;
       $92 = $dest;
       $93 = ((($92)) + 4|0);
       $dest = $93;
      }
     } else if ((($74|0) == 1)) {
      $94 = $2;
      $left = $94;
      while(1) {
       $95 = $left;
       $96 = ($95|0)>(0);
       if (!($96)) {
        break L16;
       }
       $97 = $1;
       $98 = (__ZL10stbi__get8P13stbi__context($97)|0);
       $count = $98;
       $99 = $1;
       $100 = (__ZL12stbi__at_eofP13stbi__context($99)|0);
       $101 = ($100|0)!=(0);
       if ($101) {
        label = 23;
        break L10;
       }
       $106 = $count;
       $107 = $106&255;
       $108 = $left;
       $109 = ($107|0)>($108|0);
       if ($109) {
        $110 = $left;
        $111 = $110&255;
        $count = $111;
       }
       $112 = $1;
       $113 = $packet1;
       $114 = ((($113)) + 2|0);
       $115 = HEAP8[$114>>0]|0;
       $116 = $115&255;
       $117 = (__ZL13stbi__readvalP13stbi__contextiPh($112,$116,$value)|0);
       $118 = ($117|0)!=(0|0);
       if (!($118)) {
        label = 27;
        break L10;
       }
       $i = 0;
       while(1) {
        $119 = $i;
        $120 = $count;
        $121 = $120&255;
        $122 = ($119|0)<($121|0);
        if (!($122)) {
         break;
        }
        $123 = $packet1;
        $124 = ((($123)) + 2|0);
        $125 = HEAP8[$124>>0]|0;
        $126 = $125&255;
        $127 = $dest;
        __ZL13stbi__copyvaliPhPKh($126,$127,$value);
        $128 = $i;
        $129 = (($128) + 1)|0;
        $i = $129;
        $130 = $dest;
        $131 = ((($130)) + 4|0);
        $dest = $131;
       }
       $132 = $count;
       $133 = $132&255;
       $134 = $left;
       $135 = (($134) - ($133))|0;
       $left = $135;
      }
     } else if ((($74|0) == 2)) {
      $136 = $2;
      $left2 = $136;
      while(1) {
       $137 = $left2;
       $138 = ($137|0)>(0);
       if (!($138)) {
        break L16;
       }
       $139 = $1;
       $140 = (__ZL10stbi__get8P13stbi__context($139)|0);
       $141 = $140&255;
       $count3 = $141;
       $142 = $1;
       $143 = (__ZL12stbi__at_eofP13stbi__context($142)|0);
       $144 = ($143|0)!=(0);
       if ($144) {
        label = 35;
        break L10;
       }
       $149 = $count3;
       $150 = ($149|0)>=(128);
       $151 = $count3;
       L40: do {
        if ($150) {
         $152 = ($151|0)==(128);
         if ($152) {
          $153 = $1;
          $154 = (__ZL13stbi__get16beP13stbi__context($153)|0);
          $count3 = $154;
         } else {
          $155 = $count3;
          $156 = (($155) - 127)|0;
          $count3 = $156;
         }
         $157 = $count3;
         $158 = $left2;
         $159 = ($157|0)>($158|0);
         if ($159) {
          label = 41;
          break L10;
         }
         $164 = $1;
         $165 = $packet1;
         $166 = ((($165)) + 2|0);
         $167 = HEAP8[$166>>0]|0;
         $168 = $167&255;
         $169 = (__ZL13stbi__readvalP13stbi__contextiPh($164,$168,$value5)|0);
         $170 = ($169|0)!=(0|0);
         if (!($170)) {
          label = 43;
          break L10;
         }
         $i6 = 0;
         while(1) {
          $171 = $i6;
          $172 = $count3;
          $173 = ($171|0)<($172|0);
          if (!($173)) {
           break L40;
          }
          $174 = $packet1;
          $175 = ((($174)) + 2|0);
          $176 = HEAP8[$175>>0]|0;
          $177 = $176&255;
          $178 = $dest;
          __ZL13stbi__copyvaliPhPKh($177,$178,$value5);
          $179 = $i6;
          $180 = (($179) + 1)|0;
          $i6 = $180;
          $181 = $dest;
          $182 = ((($181)) + 4|0);
          $dest = $182;
         }
        } else {
         $183 = (($151) + 1)|0;
         $count3 = $183;
         $184 = $count3;
         $185 = $left2;
         $186 = ($184|0)>($185|0);
         if ($186) {
          label = 48;
          break L10;
         }
         $i4 = 0;
         while(1) {
          $191 = $i4;
          $192 = $count3;
          $193 = ($191|0)<($192|0);
          if (!($193)) {
           break L40;
          }
          $194 = $1;
          $195 = $packet1;
          $196 = ((($195)) + 2|0);
          $197 = HEAP8[$196>>0]|0;
          $198 = $197&255;
          $199 = $dest;
          $200 = (__ZL13stbi__readvalP13stbi__contextiPh($194,$198,$199)|0);
          $201 = ($200|0)!=(0|0);
          if (!($201)) {
           label = 52;
           break L10;
          }
          $202 = $i4;
          $203 = (($202) + 1)|0;
          $i4 = $203;
          $204 = $dest;
          $205 = ((($204)) + 4|0);
          $dest = $205;
         }
        }
       } while(0);
       $206 = $count3;
       $207 = $left2;
       $208 = (($207) - ($206))|0;
       $left2 = $208;
      }
     } else {
      label = 14;
      break L10;
     }
    } while(0);
    $209 = $packet_idx;
    $210 = (($209) + 1)|0;
    $packet_idx = $210;
   }
   $211 = $y;
   $212 = (($211) + 1)|0;
   $y = $212;
  }
  switch (label|0) {
   case 14: {
    $75 = (__ZL9stbi__errPKc(4184)|0);
    $76 = ($75|0)!=(0);
    $77 = $76 ? 0 : 0;
    $78 = $77;
    $0 = $78;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 18: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 23: {
    $102 = (__ZL9stbi__errPKc(4168)|0);
    $103 = ($102|0)!=(0);
    $104 = $103 ? 0 : 0;
    $105 = $104;
    $0 = $105;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 27: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 35: {
    $145 = (__ZL9stbi__errPKc(4168)|0);
    $146 = ($145|0)!=(0);
    $147 = $146 ? 0 : 0;
    $148 = $147;
    $0 = $148;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 41: {
    $160 = (__ZL9stbi__errPKc(4168)|0);
    $161 = ($160|0)!=(0);
    $162 = $161 ? 0 : 0;
    $163 = $162;
    $0 = $163;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 43: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 48: {
    $187 = (__ZL9stbi__errPKc(4168)|0);
    $188 = ($187|0)!=(0);
    $189 = $188 ? 0 : 0;
    $190 = $189;
    $0 = $190;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 52: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 57: {
    $213 = $5;
    $0 = $213;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
  }
 }
 return (0)|0;
}
function __ZL13stbi__readvalP13stbi__contextiPh($s,$channel,$dest) {
 $s = $s|0;
 $channel = $channel|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $channel;
 $3 = $dest;
 $mask = 128;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(4);
  if (!($5)) {
   label = 8;
   break;
  }
  $6 = $2;
  $7 = $mask;
  $8 = $6 & $7;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $1;
   $11 = (__ZL12stbi__at_eofP13stbi__context($10)|0);
   $12 = ($11|0)!=(0);
   if ($12) {
    label = 5;
    break;
   }
   $17 = $1;
   $18 = (__ZL10stbi__get8P13stbi__context($17)|0);
   $19 = $i;
   $20 = $3;
   $21 = (($20) + ($19)|0);
   HEAP8[$21>>0] = $18;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
  $24 = $mask;
  $25 = $24 >> 1;
  $mask = $25;
 }
 if ((label|0) == 5) {
  $13 = (__ZL9stbi__errPKc(4168)|0);
  $14 = ($13|0)!=(0);
  $15 = $14 ? 0 : 0;
  $16 = $15;
  $0 = $16;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 8) {
  $26 = $3;
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZL13stbi__copyvaliPhPKh($channel,$dest,$src) {
 $channel = $channel|0;
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $channel;
 $1 = $dest;
 $2 = $src;
 $mask = 128;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $mask;
  $7 = $5 & $6;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $i;
   $10 = $2;
   $11 = (($10) + ($9)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $i;
   $14 = $1;
   $15 = (($14) + ($13)|0);
   HEAP8[$15>>0] = $12;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
  $18 = $mask;
  $19 = $18 >> 1;
  $mask = $19;
 }
 STACKTOP = sp;return;
}
function __ZL19stbi__pic_test_coreP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL13stbi__pic_is4P13stbi__contextPKc($2,4200)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $i = 0;
   while(1) {
    $5 = $i;
    $6 = ($5|0)<(84);
    $7 = $1;
    if (!($6)) {
     break;
    }
    (__ZL10stbi__get8P13stbi__context($7)|0);
    $8 = $i;
    $9 = (($8) + 1)|0;
    $i = $9;
   }
   $10 = (__ZL13stbi__pic_is4P13stbi__contextPKc($7,4208)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function __ZL13stbi__pic_is4P13stbi__contextPKc($s,$str) {
 $s = $s|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $str;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $1;
  $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
  $7 = $6&255;
  $8 = $i;
  $9 = $2;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($7|0)!=($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPii($s,$g,$comp,$req_comp) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $h = 0, $i = 0, $len = 0, $o = 0, $old_out = 0, $or$cond = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $g;
 $3 = $comp;
 $4 = $req_comp;
 $old_out = 0;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   $9 = $1;
   $10 = $2;
   $11 = $3;
   $12 = (__ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii($9,$10,$11,0)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    $0 = 0;
    $280 = $0;
    STACKTOP = sp;return ($280|0);
   }
   $14 = $2;
   $15 = HEAP32[$14>>2]|0;
   $16 = $15<<2;
   $17 = $2;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = Math_imul($16, $19)|0;
   $21 = (__ZL12stbi__mallocj($20)|0);
   $22 = $2;
   $23 = ((($22)) + 8|0);
   HEAP32[$23>>2] = $21;
   $24 = $2;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    $32 = $2;
    __ZL25stbi__fill_gif_backgroundP9stbi__gif($32);
    break;
   }
   $28 = (__ZL9stbi__errPKc(1832)|0);
   $29 = ($28|0)!=(0);
   $30 = $29 ? 0 : 0;
   $31 = $30;
   $0 = $31;
   $280 = $0;
   STACKTOP = sp;return ($280|0);
  } else {
   $33 = $2;
   $34 = ((($33)) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & 28;
   $37 = $36 >> 2;
   $38 = ($37|0)==(3);
   if ($38) {
    $39 = $2;
    $40 = ((($39)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $old_out = $41;
    $42 = $2;
    $43 = HEAP32[$42>>2]|0;
    $44 = $43<<2;
    $45 = $2;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = Math_imul($44, $47)|0;
    $49 = (__ZL12stbi__mallocj($48)|0);
    $50 = $2;
    $51 = ((($50)) + 8|0);
    HEAP32[$51>>2] = $49;
    $52 = $2;
    $53 = ((($52)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(0|0);
    if (!($55)) {
     $60 = $2;
     $61 = ((($60)) + 8|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $old_out;
     $64 = $2;
     $65 = HEAP32[$64>>2]|0;
     $66 = $2;
     $67 = ((($66)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = Math_imul($65, $68)|0;
     $70 = $69<<2;
     _memcpy(($62|0),($63|0),($70|0))|0;
     break;
    }
    $56 = (__ZL9stbi__errPKc(1832)|0);
    $57 = ($56|0)!=(0);
    $58 = $57 ? 0 : 0;
    $59 = $58;
    $0 = $59;
    $280 = $0;
    STACKTOP = sp;return ($280|0);
   }
  }
 } while(0);
 L17: while(1) {
  $71 = $1;
  $72 = (__ZL10stbi__get8P13stbi__context($71)|0);
  $73 = $72&255;
  if ((($73|0) == 44)) {
   label = 12;
   break;
  } else if ((($73|0) == 59)) {
   label = 42;
   break;
  } else if (!((($73|0) == 33))) {
   label = 43;
   break;
  }
  $248 = $1;
  $249 = (__ZL10stbi__get8P13stbi__context($248)|0);
  $250 = $249&255;
  $251 = ($250|0)==(249);
  do {
   if ($251) {
    $252 = $1;
    $253 = (__ZL10stbi__get8P13stbi__context($252)|0);
    $254 = $253&255;
    $len = $254;
    $255 = $len;
    $256 = ($255|0)==(4);
    $257 = $1;
    if ($256) {
     $258 = (__ZL10stbi__get8P13stbi__context($257)|0);
     $259 = $258&255;
     $260 = $2;
     $261 = ((($260)) + 28|0);
     HEAP32[$261>>2] = $259;
     $262 = $1;
     (__ZL13stbi__get16leP13stbi__context($262)|0);
     $263 = $1;
     $264 = (__ZL10stbi__get8P13stbi__context($263)|0);
     $265 = $264&255;
     $266 = $2;
     $267 = ((($266)) + 24|0);
     HEAP32[$267>>2] = $265;
     break;
    } else {
     $268 = $len;
     __ZL10stbi__skipP13stbi__contexti($257,$268);
     continue L17;
    }
   }
  } while(0);
  while(1) {
   $269 = $1;
   $270 = (__ZL10stbi__get8P13stbi__context($269)|0);
   $271 = $270&255;
   $len = $271;
   $272 = ($271|0)!=(0);
   if (!($272)) {
    continue L17;
   }
   $273 = $1;
   $274 = $len;
   __ZL10stbi__skipP13stbi__contexti($273,$274);
  }
 }
 if ((label|0) == 12) {
  $74 = $1;
  $75 = (__ZL13stbi__get16leP13stbi__context($74)|0);
  $x = $75;
  $76 = $1;
  $77 = (__ZL13stbi__get16leP13stbi__context($76)|0);
  $y = $77;
  $78 = $1;
  $79 = (__ZL13stbi__get16leP13stbi__context($78)|0);
  $w = $79;
  $80 = $1;
  $81 = (__ZL13stbi__get16leP13stbi__context($80)|0);
  $h = $81;
  $82 = $x;
  $83 = $w;
  $84 = (($82) + ($83))|0;
  $85 = $2;
  $86 = HEAP32[$85>>2]|0;
  $87 = ($84|0)>($86|0);
  if (!($87)) {
   $88 = $y;
   $89 = $h;
   $90 = (($88) + ($89))|0;
   $91 = $2;
   $92 = ((($91)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($90|0)>($93|0);
   if (!($94)) {
    $99 = $2;
    $100 = HEAP32[$99>>2]|0;
    $101 = $100<<2;
    $102 = $2;
    $103 = ((($102)) + 18504|0);
    HEAP32[$103>>2] = $101;
    $104 = $x;
    $105 = $104<<2;
    $106 = $2;
    $107 = ((($106)) + 18480|0);
    HEAP32[$107>>2] = $105;
    $108 = $y;
    $109 = $2;
    $110 = ((($109)) + 18504|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = Math_imul($108, $111)|0;
    $113 = $2;
    $114 = ((($113)) + 18484|0);
    HEAP32[$114>>2] = $112;
    $115 = $2;
    $116 = ((($115)) + 18480|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $w;
    $119 = $118<<2;
    $120 = (($117) + ($119))|0;
    $121 = $2;
    $122 = ((($121)) + 18488|0);
    HEAP32[$122>>2] = $120;
    $123 = $2;
    $124 = ((($123)) + 18484|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $h;
    $127 = $2;
    $128 = ((($127)) + 18504|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = Math_imul($126, $129)|0;
    $131 = (($125) + ($130))|0;
    $132 = $2;
    $133 = ((($132)) + 18492|0);
    HEAP32[$133>>2] = $131;
    $134 = $2;
    $135 = ((($134)) + 18480|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $2;
    $138 = ((($137)) + 18496|0);
    HEAP32[$138>>2] = $136;
    $139 = $2;
    $140 = ((($139)) + 18484|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $2;
    $143 = ((($142)) + 18500|0);
    HEAP32[$143>>2] = $141;
    $144 = $1;
    $145 = (__ZL10stbi__get8P13stbi__context($144)|0);
    $146 = $145&255;
    $147 = $2;
    $148 = ((($147)) + 18476|0);
    HEAP32[$148>>2] = $146;
    $149 = $2;
    $150 = ((($149)) + 18476|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151 & 64;
    $153 = ($152|0)!=(0);
    $154 = $2;
    $155 = ((($154)) + 18504|0);
    $156 = HEAP32[$155>>2]|0;
    if ($153) {
     $157 = $156<<3;
     $158 = $2;
     $159 = ((($158)) + 18472|0);
     HEAP32[$159>>2] = $157;
     $160 = $2;
     $161 = ((($160)) + 18468|0);
     HEAP32[$161>>2] = 3;
    } else {
     $162 = $2;
     $163 = ((($162)) + 18472|0);
     HEAP32[$163>>2] = $156;
     $164 = $2;
     $165 = ((($164)) + 18468|0);
     HEAP32[$165>>2] = 0;
    }
    $166 = $2;
    $167 = ((($166)) + 18476|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $168 & 128;
    $170 = ($169|0)!=(0);
    if ($170) {
     $171 = $1;
     $172 = $2;
     $173 = ((($172)) + 1056|0);
     $174 = $2;
     $175 = ((($174)) + 18476|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $176 & 7;
     $178 = 2 << $177;
     $179 = $2;
     $180 = ((($179)) + 28|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $181 & 1;
     $183 = ($182|0)!=(0);
     if ($183) {
      $184 = $2;
      $185 = ((($184)) + 24|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186;
     } else {
      $187 = -1;
     }
     __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($171,$173,$178,$187);
     $188 = $2;
     $189 = ((($188)) + 1056|0);
     $190 = $2;
     $191 = ((($190)) + 18464|0);
     HEAP32[$191>>2] = $189;
    } else {
     $192 = $2;
     $193 = ((($192)) + 12|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $194 & 128;
     $196 = ($195|0)!=(0);
     if (!($196)) {
      $226 = (__ZL9stbi__errPKc(4336)|0);
      $227 = ($226|0)!=(0);
      $228 = $227 ? 0 : 0;
      $229 = $228;
      $0 = $229;
      $280 = $0;
      STACKTOP = sp;return ($280|0);
     }
     $i = 0;
     while(1) {
      $197 = $i;
      $198 = ($197|0)<(256);
      if (!($198)) {
       break;
      }
      $199 = $i;
      $200 = $2;
      $201 = ((($200)) + 32|0);
      $202 = (($201) + ($199<<2)|0);
      $203 = ((($202)) + 3|0);
      HEAP8[$203>>0] = -1;
      $204 = $i;
      $205 = (($204) + 1)|0;
      $i = $205;
     }
     $206 = $2;
     $207 = ((($206)) + 24|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)>=(0);
     if ($209) {
      $210 = $2;
      $211 = ((($210)) + 28|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $212 & 1;
      $214 = ($213|0)!=(0);
      if ($214) {
       $215 = $2;
       $216 = ((($215)) + 24|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $2;
       $219 = ((($218)) + 32|0);
       $220 = (($219) + ($217<<2)|0);
       $221 = ((($220)) + 3|0);
       HEAP8[$221>>0] = 0;
      }
     }
     $222 = $2;
     $223 = ((($222)) + 32|0);
     $224 = $2;
     $225 = ((($224)) + 18464|0);
     HEAP32[$225>>2] = $223;
    }
    $230 = $1;
    $231 = $2;
    $232 = (__ZL24stbi__process_gif_rasterP13stbi__contextP9stbi__gif($230,$231)|0);
    $o = $232;
    $233 = $o;
    $234 = ($233|0)==(0|0);
    if ($234) {
     $0 = 0;
     $280 = $0;
     STACKTOP = sp;return ($280|0);
    }
    $235 = $4;
    $236 = ($235|0)!=(0);
    $237 = $4;
    $238 = ($237|0)!=(4);
    $or$cond = $236 & $238;
    if ($or$cond) {
     $239 = $o;
     $240 = $4;
     $241 = $2;
     $242 = HEAP32[$241>>2]|0;
     $243 = $2;
     $244 = ((($243)) + 4|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = (__ZL20stbi__convert_formatPhiijj($239,4,$240,$242,$245)|0);
     $o = $246;
    }
    $247 = $o;
    $0 = $247;
    $280 = $0;
    STACKTOP = sp;return ($280|0);
   }
  }
  $95 = (__ZL9stbi__errPKc(4312)|0);
  $96 = ($95|0)!=(0);
  $97 = $96 ? 0 : 0;
  $98 = $97;
  $0 = $98;
  $280 = $0;
  STACKTOP = sp;return ($280|0);
 }
 else if ((label|0) == 42) {
  $275 = $1;
  $0 = $275;
  $280 = $0;
  STACKTOP = sp;return ($280|0);
 }
 else if ((label|0) == 43) {
  $276 = (__ZL9stbi__errPKc(4360)|0);
  $277 = ($276|0)!=(0);
  $278 = $277 ? 0 : 0;
  $279 = $278;
  $0 = $279;
  $280 = $0;
  STACKTOP = sp;return ($280|0);
 }
 return (0)|0;
}
function __ZL25stbi__fill_gif_backgroundP9stbi__gif($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $c = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $g;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 32|0);
 $6 = (($5) + ($3<<2)|0);
 $c = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = Math_imul($9, $12)|0;
  $14 = $13<<2;
  $15 = ($7|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16)|0);
  $p = $20;
  $21 = $c;
  $22 = ((($21)) + 2|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $p;
  HEAP8[$24>>0] = $23;
  $25 = $c;
  $26 = ((($25)) + 1|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $p;
  $29 = ((($28)) + 1|0);
  HEAP8[$29>>0] = $27;
  $30 = $c;
  $31 = HEAP8[$30>>0]|0;
  $32 = $p;
  $33 = ((($32)) + 2|0);
  HEAP8[$33>>0] = $31;
  $34 = $c;
  $35 = ((($34)) + 3|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $p;
  $38 = ((($37)) + 3|0);
  HEAP8[$38>>0] = $36;
  $39 = $i;
  $40 = (($39) + 4)|0;
  $i = $40;
 }
 STACKTOP = sp;return;
}
function __ZL24stbi__process_gif_rasterP13stbi__contextP9stbi__gif($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail = 0, $bits = 0, $clear = 0, $code = 0;
 var $code1 = 0, $codemask = 0, $codesize = 0, $first = 0, $len = 0, $lzw_cs = 0, $oldcode = 0, $or$cond = 0, $p = 0, $valid_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $g;
 $3 = $1;
 $4 = (__ZL10stbi__get8P13stbi__context($3)|0);
 $lzw_cs = $4;
 $5 = $lzw_cs;
 $6 = $5&255;
 $7 = ($6|0)>(12);
 if ($7) {
  $0 = 0;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $8 = $lzw_cs;
 $9 = $8&255;
 $10 = 1 << $9;
 $clear = $10;
 $first = 1;
 $11 = $lzw_cs;
 $12 = $11&255;
 $13 = (($12) + 1)|0;
 $codesize = $13;
 $14 = $codesize;
 $15 = 1 << $14;
 $16 = (($15) - 1)|0;
 $codemask = $16;
 $bits = 0;
 $valid_bits = 0;
 $code = 0;
 while(1) {
  $17 = $code;
  $18 = $clear;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $code;
  $21 = $2;
  $22 = ((($21)) + 2080|0);
  $23 = (($22) + ($20<<2)|0);
  HEAP16[$23>>1] = -1;
  $24 = $code;
  $25 = $24&255;
  $26 = $code;
  $27 = $2;
  $28 = ((($27)) + 2080|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = ((($29)) + 2|0);
  HEAP8[$30>>0] = $25;
  $31 = $code;
  $32 = $31&255;
  $33 = $code;
  $34 = $2;
  $35 = ((($34)) + 2080|0);
  $36 = (($35) + ($33<<2)|0);
  $37 = ((($36)) + 3|0);
  HEAP8[$37>>0] = $32;
  $38 = $code;
  $39 = (($38) + 1)|0;
  $code = $39;
 }
 $40 = $clear;
 $41 = (($40) + 2)|0;
 $avail = $41;
 $oldcode = -1;
 $len = 0;
 while(1) {
  $42 = $valid_bits;
  $43 = $codesize;
  $44 = ($42|0)<($43|0);
  if ($44) {
   $45 = $len;
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = $1;
    $48 = (__ZL10stbi__get8P13stbi__context($47)|0);
    $49 = $48&255;
    $len = $49;
    $50 = $len;
    $51 = ($50|0)==(0);
    if ($51) {
     label = 10;
     break;
    }
   }
   $55 = $len;
   $56 = (($55) + -1)|0;
   $len = $56;
   $57 = $1;
   $58 = (__ZL10stbi__get8P13stbi__context($57)|0);
   $59 = $58&255;
   $60 = $valid_bits;
   $61 = $59 << $60;
   $62 = $bits;
   $63 = $62 | $61;
   $bits = $63;
   $64 = $valid_bits;
   $65 = (($64) + 8)|0;
   $valid_bits = $65;
   continue;
  }
  $66 = $bits;
  $67 = $codemask;
  $68 = $66 & $67;
  $code1 = $68;
  $69 = $codesize;
  $70 = $bits;
  $71 = $70 >> $69;
  $bits = $71;
  $72 = $codesize;
  $73 = $valid_bits;
  $74 = (($73) - ($72))|0;
  $valid_bits = $74;
  $75 = $code1;
  $76 = $clear;
  $77 = ($75|0)==($76|0);
  if ($77) {
   $78 = $lzw_cs;
   $79 = $78&255;
   $80 = (($79) + 1)|0;
   $codesize = $80;
   $81 = $codesize;
   $82 = 1 << $81;
   $83 = (($82) - 1)|0;
   $codemask = $83;
   $84 = $clear;
   $85 = (($84) + 2)|0;
   $avail = $85;
   $oldcode = -1;
   $first = 0;
   continue;
  }
  $86 = $code1;
  $87 = $clear;
  $88 = (($87) + 1)|0;
  $89 = ($86|0)==($88|0);
  if ($89) {
   label = 15;
   break;
  }
  $101 = $code1;
  $102 = $avail;
  $103 = ($101|0)<=($102|0);
  if (!($103)) {
   label = 34;
   break;
  }
  $104 = $first;
  $105 = ($104|0)!=(0);
  if ($105) {
   label = 21;
   break;
  }
  $110 = $oldcode;
  $111 = ($110|0)>=(0);
  if ($111) {
   $112 = $avail;
   $113 = (($112) + 1)|0;
   $avail = $113;
   $114 = $2;
   $115 = ((($114)) + 2080|0);
   $116 = (($115) + ($112<<2)|0);
   $p = $116;
   $117 = $avail;
   $118 = ($117|0)>(4096);
   if ($118) {
    label = 24;
    break;
   }
   $123 = $oldcode;
   $124 = $123&65535;
   $125 = $p;
   HEAP16[$125>>1] = $124;
   $126 = $oldcode;
   $127 = $2;
   $128 = ((($127)) + 2080|0);
   $129 = (($128) + ($126<<2)|0);
   $130 = ((($129)) + 2|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $p;
   $133 = ((($132)) + 2|0);
   HEAP8[$133>>0] = $131;
   $134 = $code1;
   $135 = $avail;
   $136 = ($134|0)==($135|0);
   if ($136) {
    $137 = $p;
    $138 = ((($137)) + 2|0);
    $139 = HEAP8[$138>>0]|0;
    $148 = $139;
   } else {
    $140 = $code1;
    $141 = $2;
    $142 = ((($141)) + 2080|0);
    $143 = (($142) + ($140<<2)|0);
    $144 = ((($143)) + 2|0);
    $145 = HEAP8[$144>>0]|0;
    $148 = $145;
   }
   $146 = $p;
   $147 = ((($146)) + 3|0);
   HEAP8[$147>>0] = $148;
  } else {
   $149 = $code1;
   $150 = $avail;
   $151 = ($149|0)==($150|0);
   if ($151) {
    label = 30;
    break;
   }
  }
  $156 = $2;
  $157 = $code1;
  $158 = $157&65535;
  __ZL18stbi__out_gif_codeP9stbi__gift($156,$158);
  $159 = $avail;
  $160 = $codemask;
  $161 = $159 & $160;
  $162 = ($161|0)==(0);
  $163 = $avail;
  $164 = ($163|0)<=(4095);
  $or$cond = $162 & $164;
  if ($or$cond) {
   $165 = $codesize;
   $166 = (($165) + 1)|0;
   $codesize = $166;
   $167 = $codesize;
   $168 = 1 << $167;
   $169 = (($168) - 1)|0;
   $codemask = $169;
  }
  $170 = $code1;
  $oldcode = $170;
 }
 if ((label|0) == 10) {
  $52 = $2;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $0 = $54;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 15) {
  $90 = $1;
  $91 = $len;
  __ZL10stbi__skipP13stbi__contexti($90,$91);
  while(1) {
   $92 = $1;
   $93 = (__ZL10stbi__get8P13stbi__context($92)|0);
   $94 = $93&255;
   $len = $94;
   $95 = ($94|0)>(0);
   if (!($95)) {
    break;
   }
   $96 = $1;
   $97 = $len;
   __ZL10stbi__skipP13stbi__contexti($96,$97);
  }
  $98 = $2;
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $0 = $100;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 21) {
  $106 = (__ZL9stbi__errPKc(4376)|0);
  $107 = ($106|0)!=(0);
  $108 = $107 ? 0 : 0;
  $109 = $108;
  $0 = $109;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 24) {
  $119 = (__ZL9stbi__errPKc(4392)|0);
  $120 = ($119|0)!=(0);
  $121 = $120 ? 0 : 0;
  $122 = $121;
  $0 = $122;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 30) {
  $152 = (__ZL9stbi__errPKc(4408)|0);
  $153 = ($152|0)!=(0);
  $154 = $153 ? 0 : 0;
  $155 = $154;
  $0 = $155;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 34) {
  $171 = (__ZL9stbi__errPKc(4408)|0);
  $172 = ($171|0)!=(0);
  $173 = $172 ? 0 : 0;
  $174 = $173;
  $0 = $174;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 return (0)|0;
}
function __ZL18stbi__out_gif_codeP9stbi__gift($g,$code) {
 $g = $g|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $g;
 $1 = $code;
 $2 = $1;
 $3 = $2&65535;
 $4 = $0;
 $5 = ((($4)) + 2080|0);
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $0;
  $11 = $1;
  $12 = $11&65535;
  $13 = $0;
  $14 = ((($13)) + 2080|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP16[$15>>1]|0;
  __ZL18stbi__out_gif_codeP9stbi__gift($10,$16);
 }
 $17 = $0;
 $18 = ((($17)) + 18500|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 18492|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)>=($22|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 18496|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 18500|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26) + ($29))|0;
 $31 = $0;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30)|0);
 $p = $34;
 $35 = $1;
 $36 = $35&65535;
 $37 = $0;
 $38 = ((($37)) + 2080|0);
 $39 = (($38) + ($36<<2)|0);
 $40 = ((($39)) + 3|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42<<2;
 $44 = $0;
 $45 = ((($44)) + 18464|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($43)|0);
 $c = $47;
 $48 = $c;
 $49 = ((($48)) + 3|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = ($51|0)>=(128);
 if ($52) {
  $53 = $c;
  $54 = ((($53)) + 2|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $p;
  HEAP8[$56>>0] = $55;
  $57 = $c;
  $58 = ((($57)) + 1|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $p;
  $61 = ((($60)) + 1|0);
  HEAP8[$61>>0] = $59;
  $62 = $c;
  $63 = HEAP8[$62>>0]|0;
  $64 = $p;
  $65 = ((($64)) + 2|0);
  HEAP8[$65>>0] = $63;
  $66 = $c;
  $67 = ((($66)) + 3|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $p;
  $70 = ((($69)) + 3|0);
  HEAP8[$70>>0] = $68;
 }
 $71 = $0;
 $72 = ((($71)) + 18496|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + 4)|0;
 HEAP32[$72>>2] = $74;
 $75 = $0;
 $76 = ((($75)) + 18496|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $0;
 $79 = ((($78)) + 18488|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($77|0)>=($80|0);
 if (!($81)) {
  STACKTOP = sp;return;
 }
 $82 = $0;
 $83 = ((($82)) + 18480|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $0;
 $86 = ((($85)) + 18496|0);
 HEAP32[$86>>2] = $84;
 $87 = $0;
 $88 = ((($87)) + 18472|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $0;
 $91 = ((($90)) + 18500|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($89))|0;
 HEAP32[$91>>2] = $93;
 while(1) {
  $94 = $0;
  $95 = ((($94)) + 18500|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $0;
  $98 = ((($97)) + 18492|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($96|0)>=($99|0);
  if (!($100)) {
   label = 11;
   break;
  }
  $101 = $0;
  $102 = ((($101)) + 18468|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)>(0);
  if (!($104)) {
   label = 11;
   break;
  }
  $105 = $0;
  $106 = ((($105)) + 18468|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = 1 << $107;
  $109 = $0;
  $110 = ((($109)) + 18504|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = Math_imul($108, $111)|0;
  $113 = $0;
  $114 = ((($113)) + 18472|0);
  HEAP32[$114>>2] = $112;
  $115 = $0;
  $116 = ((($115)) + 18484|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $0;
  $119 = ((($118)) + 18472|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $120 >> 1;
  $122 = (($117) + ($121))|0;
  $123 = $0;
  $124 = ((($123)) + 18500|0);
  HEAP32[$124>>2] = $122;
  $125 = $0;
  $126 = ((($125)) + 18468|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + -1)|0;
  HEAP32[$126>>2] = $128;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function __ZL18stbi__gif_test_rawP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $4 = $3&255;
 $5 = ($4|0)!=(71);
 if (!($5)) {
  $6 = $1;
  $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
  $8 = $7&255;
  $9 = ($8|0)!=(73);
  if (!($9)) {
   $10 = $1;
   $11 = (__ZL10stbi__get8P13stbi__context($10)|0);
   $12 = $11&255;
   $13 = ($12|0)!=(70);
   if (!($13)) {
    $14 = $1;
    $15 = (__ZL10stbi__get8P13stbi__context($14)|0);
    $16 = $15&255;
    $17 = ($16|0)!=(56);
    if (!($17)) {
     $18 = $1;
     $19 = (__ZL10stbi__get8P13stbi__context($18)|0);
     $20 = $19&255;
     $sz = $20;
     $21 = $sz;
     $22 = ($21|0)!=(57);
     $23 = $sz;
     $24 = ($23|0)!=(55);
     $or$cond = $22 & $24;
     if ($or$cond) {
      $0 = 0;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     }
     $25 = $1;
     $26 = (__ZL10stbi__get8P13stbi__context($25)|0);
     $27 = $26&255;
     $28 = ($27|0)!=(97);
     if ($28) {
      $0 = 0;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     } else {
      $0 = 1;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     }
    }
   }
  }
 }
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL14stbi__high_bitj($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $n = 0;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $0 = -1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $4 = $1;
 $5 = ($4>>>0)>=(65536);
 if ($5) {
  $6 = $n;
  $7 = (($6) + 16)|0;
  $n = $7;
  $8 = $1;
  $9 = $8 >>> 16;
  $1 = $9;
 }
 $10 = $1;
 $11 = ($10>>>0)>=(256);
 if ($11) {
  $12 = $n;
  $13 = (($12) + 8)|0;
  $n = $13;
  $14 = $1;
  $15 = $14 >>> 8;
  $1 = $15;
 }
 $16 = $1;
 $17 = ($16>>>0)>=(16);
 if ($17) {
  $18 = $n;
  $19 = (($18) + 4)|0;
  $n = $19;
  $20 = $1;
  $21 = $20 >>> 4;
  $1 = $21;
 }
 $22 = $1;
 $23 = ($22>>>0)>=(4);
 if ($23) {
  $24 = $n;
  $25 = (($24) + 2)|0;
  $n = $25;
  $26 = $1;
  $27 = $26 >>> 2;
  $1 = $27;
 }
 $28 = $1;
 $29 = ($28>>>0)>=(2);
 if ($29) {
  $30 = $n;
  $31 = (($30) + 1)|0;
  $n = $31;
  $32 = $1;
  $33 = $32 >>> 1;
  $1 = $33;
 }
 $34 = $n;
 $0 = $34;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function __ZL14stbi__bitcountj($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $1 & 1431655765;
 $3 = $0;
 $4 = $3 >>> 1;
 $5 = $4 & 1431655765;
 $6 = (($2) + ($5))|0;
 $0 = $6;
 $7 = $0;
 $8 = $7 & 858993459;
 $9 = $0;
 $10 = $9 >>> 2;
 $11 = $10 & 858993459;
 $12 = (($8) + ($11))|0;
 $0 = $12;
 $13 = $0;
 $14 = $0;
 $15 = $14 >>> 4;
 $16 = (($13) + ($15))|0;
 $17 = $16 & 252645135;
 $0 = $17;
 $18 = $0;
 $19 = $0;
 $20 = $19 >>> 8;
 $21 = (($18) + ($20))|0;
 $0 = $21;
 $22 = $0;
 $23 = $0;
 $24 = $23 >>> 16;
 $25 = (($22) + ($24))|0;
 $0 = $25;
 $26 = $0;
 $27 = $26 & 255;
 STACKTOP = sp;return ($27|0);
}
function __ZL17stbi__shiftsignediii($v,$shift,$bits) {
 $v = $v|0;
 $shift = $shift|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $shift;
 $2 = $bits;
 $z = 0;
 $3 = $1;
 $4 = ($3|0)<(0);
 $5 = $1;
 if ($4) {
  $6 = (0 - ($5))|0;
  $7 = $0;
  $8 = $7 << $6;
  $0 = $8;
 } else {
  $9 = $0;
  $10 = $9 >> $5;
  $0 = $10;
 }
 $11 = $0;
 $result = $11;
 $12 = $2;
 $z = $12;
 while(1) {
  $13 = $z;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $0;
  $16 = $z;
  $17 = $15 >> $16;
  $18 = $result;
  $19 = (($18) + ($17))|0;
  $result = $19;
  $20 = $2;
  $21 = $z;
  $22 = (($21) + ($20))|0;
  $z = $22;
 }
 $23 = $result;
 STACKTOP = sp;return ($23|0);
}
function __ZL18stbi__bmp_test_rawP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $r = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $4 = $3&255;
 $5 = ($4|0)!=(66);
 if ($5) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = ($8|0)!=(77);
 if ($9) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $10 = $1;
 (__ZL13stbi__get32leP13stbi__context($10)|0);
 $11 = $1;
 (__ZL13stbi__get16leP13stbi__context($11)|0);
 $12 = $1;
 (__ZL13stbi__get16leP13stbi__context($12)|0);
 $13 = $1;
 (__ZL13stbi__get32leP13stbi__context($13)|0);
 $14 = $1;
 $15 = (__ZL13stbi__get32leP13stbi__context($14)|0);
 $sz = $15;
 $16 = $sz;
 $17 = ($16|0)==(12);
 $18 = $sz;
 $19 = ($18|0)==(40);
 $or$cond = $17 | $19;
 $20 = $sz;
 $21 = ($20|0)==(56);
 $or$cond3 = $or$cond | $21;
 $22 = $sz;
 $23 = ($22|0)==(108);
 $or$cond5 = $or$cond3 | $23;
 if ($or$cond5) {
  $27 = 1;
 } else {
  $24 = $sz;
  $25 = ($24|0)==(124);
  $27 = $25;
 }
 $26 = $27&1;
 $r = $26;
 $28 = $r;
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL12stbi__do_pngP9stbi__pngPiS1_S1_i($p,$x,$y,$n,$req_comp) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $x;
 $3 = $y;
 $4 = $n;
 $5 = $req_comp;
 $result = 0;
 $6 = $5;
 $7 = ($6|0)<(0);
 $8 = $5;
 $9 = ($8|0)>(4);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $10 = (__ZL9stbi__errPKc(4568)|0);
  $11 = ($10|0)!=(0);
  $12 = $11 ? 0 : 0;
  $13 = $12;
  $0 = $13;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 $14 = $1;
 $15 = $5;
 $16 = (__ZL20stbi__parse_png_fileP9stbi__pngii($14,0,$15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $result = $20;
  $21 = $1;
  $22 = ((($21)) + 12|0);
  HEAP32[$22>>2] = 0;
  $23 = $5;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $5;
   $26 = $1;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($25|0)!=($29|0);
   if ($30) {
    $31 = $result;
    $32 = $1;
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $5;
    $37 = $1;
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$38>>2]|0;
    $40 = $1;
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (__ZL20stbi__convert_formatPhiijj($31,$35,$36,$39,$43)|0);
    $result = $44;
    $45 = $5;
    $46 = $1;
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + 12|0);
    HEAP32[$48>>2] = $45;
    $49 = $result;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $51 = $result;
     $0 = $51;
     $84 = $0;
     STACKTOP = sp;return ($84|0);
    }
   }
  }
  $52 = $1;
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $2;
  HEAP32[$55>>2] = $54;
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $3;
  HEAP32[$60>>2] = $59;
  $61 = $4;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $1;
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $4;
   HEAP32[$67>>2] = $66;
  }
 }
 $68 = $1;
 $69 = ((($68)) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 _free($70);
 $71 = $1;
 $72 = ((($71)) + 12|0);
 HEAP32[$72>>2] = 0;
 $73 = $1;
 $74 = ((($73)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 _free($75);
 $76 = $1;
 $77 = ((($76)) + 8|0);
 HEAP32[$77>>2] = 0;
 $78 = $1;
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 _free($80);
 $81 = $1;
 $82 = ((($81)) + 4|0);
 HEAP32[$82>>2] = 0;
 $83 = $result;
 $0 = $83;
 $84 = $0;
 STACKTOP = sp;return ($84|0);
}
function __ZL16stbi__setup_jpegP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 18176|0);
 HEAP32[$2>>2] = 30;
 $3 = $0;
 $4 = ((($3)) + 18180|0);
 HEAP32[$4>>2] = 31;
 $5 = $0;
 $6 = ((($5)) + 18184|0);
 HEAP32[$6>>2] = 32;
 STACKTOP = sp;return;
}
function __ZL15load_jpeg_imageP10stbi__jpegPiS1_S1_i($z,$out_x,$out_y,$comp,$req_comp) {
 $z = $z|0;
 $out_x = $out_x|0;
 $out_y = $out_y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coutput = 0, $decode_n = 0, $i = 0;
 var $j = 0, $k = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, $out = 0, $output = 0, $r = 0, $r1 = 0, $res_comp = 0, $y = 0, $y2 = 0, $y_bot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $coutput = sp;
 $res_comp = sp + 16|0;
 $1 = $z;
 $2 = $out_x;
 $3 = $out_y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $5;
 $10 = ($9|0)<(0);
 $11 = $5;
 $12 = ($11|0)>(4);
 $or$cond = $10 | $12;
 if ($or$cond) {
  $13 = (__ZL9stbi__errPKc(4568)|0);
  $14 = ($13|0)!=(0);
  $15 = $14 ? 0 : 0;
  $16 = $15;
  $0 = $16;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $17 = $1;
 $18 = (__ZL23stbi__decode_jpeg_imageP10stbi__jpeg($17)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $1;
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($20);
  $0 = 0;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $21 = $5;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $5;
  $28 = $23;
 } else {
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27;
 }
 $n = $28;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(3);
 $34 = $n;
 $35 = ($34|0)<(3);
 $or$cond3 = $33 & $35;
 if ($or$cond3) {
  $decode_n = 1;
 } else {
  $36 = $1;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $decode_n = $39;
 }
 $k = 0;
 while(1) {
  $40 = $k;
  $41 = $decode_n;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $k;
  $44 = (($res_comp) + ($43<<5)|0);
  $r = $44;
  $45 = $1;
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 3)|0;
  $49 = (__ZL12stbi__mallocj($48)|0);
  $50 = $k;
  $51 = $1;
  $52 = ((($51)) + 17820|0);
  $53 = (($52) + (($50*72)|0)|0);
  $54 = ((($53)) + 56|0);
  HEAP32[$54>>2] = $49;
  $55 = $k;
  $56 = $1;
  $57 = ((($56)) + 17820|0);
  $58 = (($57) + (($55*72)|0)|0);
  $59 = ((($58)) + 56|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  $62 = $1;
  if (!($61)) {
   label = 14;
   break;
  }
  $67 = ((($62)) + 17796|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $k;
  $70 = $1;
  $71 = ((($70)) + 17820|0);
  $72 = (($71) + (($69*72)|0)|0);
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($68|0) / ($74|0))&-1;
  $76 = $r;
  $77 = ((($76)) + 12|0);
  HEAP32[$77>>2] = $75;
  $78 = $1;
  $79 = ((($78)) + 17800|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $k;
  $82 = $1;
  $83 = ((($82)) + 17820|0);
  $84 = (($83) + (($81*72)|0)|0);
  $85 = ((($84)) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($80|0) / ($86|0))&-1;
  $88 = $r;
  $89 = ((($88)) + 16|0);
  HEAP32[$89>>2] = $87;
  $90 = $r;
  $91 = ((($90)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 >> 1;
  $94 = $r;
  $95 = ((($94)) + 24|0);
  HEAP32[$95>>2] = $93;
  $96 = $1;
  $97 = HEAP32[$96>>2]|0;
  $98 = HEAP32[$97>>2]|0;
  $99 = $r;
  $100 = ((($99)) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) + ($101))|0;
  $103 = (($102) - 1)|0;
  $104 = $r;
  $105 = ((($104)) + 12|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($103>>>0) / ($106>>>0))&-1;
  $108 = $r;
  $109 = ((($108)) + 20|0);
  HEAP32[$109>>2] = $107;
  $110 = $r;
  $111 = ((($110)) + 28|0);
  HEAP32[$111>>2] = 0;
  $112 = $k;
  $113 = $1;
  $114 = ((($113)) + 17820|0);
  $115 = (($114) + (($112*72)|0)|0);
  $116 = ((($115)) + 44|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $r;
  $119 = ((($118)) + 8|0);
  HEAP32[$119>>2] = $117;
  $120 = $r;
  $121 = ((($120)) + 4|0);
  HEAP32[$121>>2] = $117;
  $122 = $r;
  $123 = ((($122)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)==(1);
  if ($125) {
   $126 = $r;
   $127 = ((($126)) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)==(1);
   if ($129) {
    $130 = $r;
    HEAP32[$130>>2] = 33;
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
  do {
   if ((label|0) == 18) {
    label = 0;
    $131 = $r;
    $132 = ((($131)) + 12|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)==(1);
    if ($134) {
     $135 = $r;
     $136 = ((($135)) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==(2);
     if ($138) {
      $139 = $r;
      HEAP32[$139>>2] = 34;
      break;
     }
    }
    $140 = $r;
    $141 = ((($140)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)==(2);
    if ($143) {
     $144 = $r;
     $145 = ((($144)) + 16|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==(1);
     if ($147) {
      $148 = $r;
      HEAP32[$148>>2] = 35;
      break;
     }
    }
    $149 = $r;
    $150 = ((($149)) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)==(2);
    if ($152) {
     $153 = $r;
     $154 = ((($153)) + 16|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ($155|0)==(2);
     if ($156) {
      $157 = $1;
      $158 = ((($157)) + 18184|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $r;
      HEAP32[$160>>2] = $159;
      break;
     }
    }
    $161 = $r;
    HEAP32[$161>>2] = 36;
   }
  } while(0);
  $162 = $k;
  $163 = (($162) + 1)|0;
  $k = $163;
 }
 if ((label|0) == 14) {
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($62);
  $63 = (__ZL9stbi__errPKc(1832)|0);
  $64 = ($63|0)!=(0);
  $65 = $64 ? 0 : 0;
  $66 = $65;
  $0 = $66;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $164 = $n;
 $165 = $1;
 $166 = HEAP32[$165>>2]|0;
 $167 = HEAP32[$166>>2]|0;
 $168 = Math_imul($164, $167)|0;
 $169 = $1;
 $170 = HEAP32[$169>>2]|0;
 $171 = ((($170)) + 4|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = Math_imul($168, $172)|0;
 $174 = (($173) + 1)|0;
 $175 = (__ZL12stbi__mallocj($174)|0);
 $output = $175;
 $176 = $output;
 $177 = ($176|0)!=(0|0);
 if (!($177)) {
  $178 = $1;
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($178);
  $179 = (__ZL9stbi__errPKc(1832)|0);
  $180 = ($179|0)!=(0);
  $181 = $180 ? 0 : 0;
  $182 = $181;
  $0 = $182;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $j = 0;
 while(1) {
  $183 = $j;
  $184 = $1;
  $185 = HEAP32[$184>>2]|0;
  $186 = ((($185)) + 4|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($183>>>0)<($187>>>0);
  if (!($188)) {
   break;
  }
  $189 = $output;
  $190 = $n;
  $191 = $1;
  $192 = HEAP32[$191>>2]|0;
  $193 = HEAP32[$192>>2]|0;
  $194 = Math_imul($190, $193)|0;
  $195 = $j;
  $196 = Math_imul($194, $195)|0;
  $197 = (($189) + ($196)|0);
  $out = $197;
  $k = 0;
  while(1) {
   $198 = $k;
   $199 = $decode_n;
   $200 = ($198|0)<($199|0);
   if (!($200)) {
    break;
   }
   $201 = $k;
   $202 = (($res_comp) + ($201<<5)|0);
   $r1 = $202;
   $203 = $r1;
   $204 = ((($203)) + 24|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $r1;
   $207 = ((($206)) + 16|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $208 >> 1;
   $210 = ($205|0)>=($209|0);
   $211 = $210&1;
   $y_bot = $211;
   $212 = $r1;
   $213 = HEAP32[$212>>2]|0;
   $214 = $k;
   $215 = $1;
   $216 = ((($215)) + 17820|0);
   $217 = (($216) + (($214*72)|0)|0);
   $218 = ((($217)) + 56|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $y_bot;
   $221 = ($220|0)!=(0);
   $222 = $r1;
   if ($221) {
    $223 = ((($222)) + 8|0);
    $224 = HEAP32[$223>>2]|0;
    $240 = $224;
   } else {
    $225 = ((($222)) + 4|0);
    $226 = HEAP32[$225>>2]|0;
    $240 = $226;
   }
   $227 = $y_bot;
   $228 = ($227|0)!=(0);
   $229 = $r1;
   if ($228) {
    $230 = ((($229)) + 4|0);
    $231 = HEAP32[$230>>2]|0;
    $241 = $231;
   } else {
    $232 = ((($229)) + 8|0);
    $233 = HEAP32[$232>>2]|0;
    $241 = $233;
   }
   $234 = $r1;
   $235 = ((($234)) + 20|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $r1;
   $238 = ((($237)) + 12|0);
   $239 = HEAP32[$238>>2]|0;
   $242 = (FUNCTION_TABLE_iiiiii[$213 & 63]($219,$240,$241,$236,$239)|0);
   $243 = $k;
   $244 = (($coutput) + ($243<<2)|0);
   HEAP32[$244>>2] = $242;
   $245 = $r1;
   $246 = ((($245)) + 24|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (($247) + 1)|0;
   HEAP32[$246>>2] = $248;
   $249 = $r1;
   $250 = ((($249)) + 16|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = ($248|0)>=($251|0);
   if ($252) {
    $253 = $r1;
    $254 = ((($253)) + 24|0);
    HEAP32[$254>>2] = 0;
    $255 = $r1;
    $256 = ((($255)) + 8|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = $r1;
    $259 = ((($258)) + 4|0);
    HEAP32[$259>>2] = $257;
    $260 = $r1;
    $261 = ((($260)) + 28|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (($262) + 1)|0;
    HEAP32[$261>>2] = $263;
    $264 = $k;
    $265 = $1;
    $266 = ((($265)) + 17820|0);
    $267 = (($266) + (($264*72)|0)|0);
    $268 = ((($267)) + 32|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ($263|0)<($269|0);
    if ($270) {
     $271 = $k;
     $272 = $1;
     $273 = ((($272)) + 17820|0);
     $274 = (($273) + (($271*72)|0)|0);
     $275 = ((($274)) + 36|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $r1;
     $278 = ((($277)) + 8|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + ($276)|0);
     HEAP32[$278>>2] = $280;
    }
   }
   $281 = $k;
   $282 = (($281) + 1)|0;
   $k = $282;
  }
  $283 = $n;
  $284 = ($283|0)>=(3);
  $285 = HEAP32[$coutput>>2]|0;
  L66: do {
   if ($284) {
    $y = $285;
    $286 = $1;
    $287 = HEAP32[$286>>2]|0;
    $288 = ((($287)) + 8|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = ($289|0)==(3);
    if ($290) {
     $291 = $1;
     $292 = ((($291)) + 18180|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = $out;
     $295 = $y;
     $296 = ((($coutput)) + 4|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ((($coutput)) + 8|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = $1;
     $301 = HEAP32[$300>>2]|0;
     $302 = HEAP32[$301>>2]|0;
     $303 = $n;
     FUNCTION_TABLE_viiiiii[$293 & 31]($294,$295,$297,$299,$302,$303);
     break;
    }
    $i = 0;
    while(1) {
     $304 = $i;
     $305 = $1;
     $306 = HEAP32[$305>>2]|0;
     $307 = HEAP32[$306>>2]|0;
     $308 = ($304>>>0)<($307>>>0);
     if (!($308)) {
      break L66;
     }
     $309 = $i;
     $310 = $y;
     $311 = (($310) + ($309)|0);
     $312 = HEAP8[$311>>0]|0;
     $313 = $out;
     $314 = ((($313)) + 2|0);
     HEAP8[$314>>0] = $312;
     $315 = $out;
     $316 = ((($315)) + 1|0);
     HEAP8[$316>>0] = $312;
     $317 = $out;
     HEAP8[$317>>0] = $312;
     $318 = $out;
     $319 = ((($318)) + 3|0);
     HEAP8[$319>>0] = -1;
     $320 = $n;
     $321 = $out;
     $322 = (($321) + ($320)|0);
     $out = $322;
     $323 = $i;
     $324 = (($323) + 1)|0;
     $i = $324;
    }
   } else {
    $y2 = $285;
    $325 = $n;
    $326 = ($325|0)==(1);
    $i = 0;
    if ($326) {
     while(1) {
      $327 = $i;
      $328 = $1;
      $329 = HEAP32[$328>>2]|0;
      $330 = HEAP32[$329>>2]|0;
      $331 = ($327>>>0)<($330>>>0);
      if (!($331)) {
       break L66;
      }
      $332 = $i;
      $333 = $y2;
      $334 = (($333) + ($332)|0);
      $335 = HEAP8[$334>>0]|0;
      $336 = $i;
      $337 = $out;
      $338 = (($337) + ($336)|0);
      HEAP8[$338>>0] = $335;
      $339 = $i;
      $340 = (($339) + 1)|0;
      $i = $340;
     }
    } else {
     while(1) {
      $341 = $i;
      $342 = $1;
      $343 = HEAP32[$342>>2]|0;
      $344 = HEAP32[$343>>2]|0;
      $345 = ($341>>>0)<($344>>>0);
      if (!($345)) {
       break L66;
      }
      $346 = $i;
      $347 = $y2;
      $348 = (($347) + ($346)|0);
      $349 = HEAP8[$348>>0]|0;
      $350 = $out;
      $351 = ((($350)) + 1|0);
      $out = $351;
      HEAP8[$350>>0] = $349;
      $352 = $out;
      $353 = ((($352)) + 1|0);
      $out = $353;
      HEAP8[$352>>0] = -1;
      $354 = $i;
      $355 = (($354) + 1)|0;
      $i = $355;
     }
    }
   }
  } while(0);
  $356 = $j;
  $357 = (($356) + 1)|0;
  $j = $357;
 }
 $358 = $1;
 __ZL18stbi__cleanup_jpegP10stbi__jpeg($358);
 $359 = $1;
 $360 = HEAP32[$359>>2]|0;
 $361 = HEAP32[$360>>2]|0;
 $362 = $2;
 HEAP32[$362>>2] = $361;
 $363 = $1;
 $364 = HEAP32[$363>>2]|0;
 $365 = ((($364)) + 4|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = $3;
 HEAP32[$367>>2] = $366;
 $368 = $4;
 $369 = ($368|0)!=(0|0);
 if ($369) {
  $370 = $1;
  $371 = HEAP32[$370>>2]|0;
  $372 = ((($371)) + 8|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = $4;
  HEAP32[$374>>2] = $373;
 }
 $375 = $output;
 $0 = $375;
 $376 = $0;
 STACKTOP = sp;return ($376|0);
}
function __ZL23stbi__decode_jpeg_imageP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $m = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $m = 0;
 while(1) {
  $2 = $m;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = $m;
  $5 = $1;
  $6 = ((($5)) + 17820|0);
  $7 = (($6) + (($4*72)|0)|0);
  $8 = ((($7)) + 48|0);
  HEAP32[$8>>2] = 0;
  $9 = $m;
  $10 = $1;
  $11 = ((($10)) + 17820|0);
  $12 = (($11) + (($9*72)|0)|0);
  $13 = ((($12)) + 52|0);
  HEAP32[$13>>2] = 0;
  $14 = $m;
  $15 = (($14) + 1)|0;
  $m = $15;
 }
 $16 = $1;
 $17 = ((($16)) + 18168|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = (__ZL24stbi__decode_jpeg_headerP10stbi__jpegi($18,0)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $21 = $1;
 $22 = (__ZL16stbi__get_markerP10stbi__jpeg($21)|0);
 $23 = $22&255;
 $m = $23;
 L9: while(1) {
  $24 = $m;
  $25 = ($24|0)==(217);
  $26 = $25 ^ 1;
  if (!($26)) {
   label = 22;
   break;
  }
  $27 = $m;
  $28 = ($27|0)==(218);
  $29 = $1;
  L12: do {
   if ($28) {
    $30 = (__ZL25stbi__process_scan_headerP10stbi__jpeg($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     label = 10;
     break L9;
    }
    $32 = $1;
    $33 = (__ZL30stbi__parse_entropy_coded_dataP10stbi__jpeg($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 12;
     break L9;
    }
    $35 = $1;
    $36 = ((($35)) + 18116|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)==(255);
    if ($39) {
     while(1) {
      $40 = $1;
      $41 = HEAP32[$40>>2]|0;
      $42 = (__ZL12stbi__at_eofP13stbi__context($41)|0);
      $43 = ($42|0)!=(0);
      $44 = $43 ^ 1;
      if (!($44)) {
       break L12;
      }
      $45 = $1;
      $46 = HEAP32[$45>>2]|0;
      $47 = (__ZL10stbi__get8P13stbi__context($46)|0);
      $48 = $47&255;
      $x = $48;
      $49 = $x;
      $50 = ($49|0)==(255);
      if ($50) {
       break;
      }
      $56 = $x;
      $57 = ($56|0)!=(0);
      if ($57) {
       label = 18;
       break L9;
      }
     }
     $51 = $1;
     $52 = HEAP32[$51>>2]|0;
     $53 = (__ZL10stbi__get8P13stbi__context($52)|0);
     $54 = $1;
     $55 = ((($54)) + 18116|0);
     HEAP8[$55>>0] = $53;
    }
   } else {
    $59 = $m;
    $60 = (__ZL20stbi__process_markerP10stbi__jpegi($29,$59)|0);
    $61 = ($60|0)!=(0);
    if (!($61)) {
     label = 20;
     break L9;
    }
   }
  } while(0);
  $62 = $1;
  $63 = (__ZL16stbi__get_markerP10stbi__jpeg($62)|0);
  $64 = $63&255;
  $m = $64;
 }
 if ((label|0) == 10) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 18) {
  $58 = (__ZL9stbi__errPKc(4584)|0);
  $0 = $58;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 22) {
  $65 = $1;
  $66 = ((($65)) + 18124|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $1;
   __ZL17stbi__jpeg_finishP10stbi__jpeg($69);
  }
  $0 = 1;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function __ZL18stbi__cleanup_jpegP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($1|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 17820|0);
  $10 = (($9) + (($7*72)|0)|0);
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $i;
   $15 = $0;
   $16 = ((($15)) + 17820|0);
   $17 = (($16) + (($14*72)|0)|0);
   $18 = ((($17)) + 48|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
   $20 = $i;
   $21 = $0;
   $22 = ((($21)) + 17820|0);
   $23 = (($22) + (($20*72)|0)|0);
   $24 = ((($23)) + 48|0);
   HEAP32[$24>>2] = 0;
   $25 = $i;
   $26 = $0;
   $27 = ((($26)) + 17820|0);
   $28 = (($27) + (($25*72)|0)|0);
   $29 = ((($28)) + 44|0);
   HEAP32[$29>>2] = 0;
  }
  $30 = $i;
  $31 = $0;
  $32 = ((($31)) + 17820|0);
  $33 = (($32) + (($30*72)|0)|0);
  $34 = ((($33)) + 52|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $i;
   $38 = $0;
   $39 = ((($38)) + 17820|0);
   $40 = (($39) + (($37*72)|0)|0);
   $41 = ((($40)) + 52|0);
   $42 = HEAP32[$41>>2]|0;
   _free($42);
   $43 = $i;
   $44 = $0;
   $45 = ((($44)) + 17820|0);
   $46 = (($45) + (($43*72)|0)|0);
   $47 = ((($46)) + 52|0);
   HEAP32[$47>>2] = 0;
   $48 = $i;
   $49 = $0;
   $50 = ((($49)) + 17820|0);
   $51 = (($50) + (($48*72)|0)|0);
   $52 = ((($51)) + 60|0);
   HEAP32[$52>>2] = 0;
  }
  $53 = $i;
  $54 = $0;
  $55 = ((($54)) + 17820|0);
  $56 = (($55) + (($53*72)|0)|0);
  $57 = ((($56)) + 56|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = $i;
   $61 = $0;
   $62 = ((($61)) + 17820|0);
   $63 = (($62) + (($60*72)|0)|0);
   $64 = ((($63)) + 56|0);
   $65 = HEAP32[$64>>2]|0;
   _free($65);
   $66 = $i;
   $67 = $0;
   $68 = ((($67)) + 17820|0);
   $69 = (($68) + (($66*72)|0)|0);
   $70 = ((($69)) + 56|0);
   HEAP32[$70>>2] = 0;
  }
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 STACKTOP = sp;return;
}
function __ZL14resample_row_1PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $5 = $1;
 STACKTOP = sp;return ($5|0);
}
function __ZL22stbi__resample_row_v_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $1;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12*3)|0;
  $14 = $i;
  $15 = $2;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($13) + ($18))|0;
  $20 = (($19) + 2)|0;
  $21 = $20 >> 2;
  $22 = $21&255;
  $23 = $i;
  $24 = $0;
  $25 = (($24) + ($23)|0);
  HEAP8[$25>>0] = $22;
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function __ZL22stbi__resample_row_h_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $input = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $in_near;
 $3 = $in_far;
 $4 = $w;
 $5 = $hs;
 $6 = $2;
 $input = $6;
 $7 = $4;
 $8 = ($7|0)==(1);
 $9 = $input;
 $10 = HEAP8[$9>>0]|0;
 $11 = $1;
 if ($8) {
  $12 = ((($11)) + 1|0);
  HEAP8[$12>>0] = $10;
  $13 = $1;
  HEAP8[$13>>0] = $10;
  $14 = $1;
  $0 = $14;
  $105 = $0;
  STACKTOP = sp;return ($105|0);
 }
 HEAP8[$11>>0] = $10;
 $15 = $input;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17*3)|0;
 $19 = $input;
 $20 = ((($19)) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($18) + ($22))|0;
 $24 = (($23) + 2)|0;
 $25 = $24 >> 2;
 $26 = $25&255;
 $27 = $1;
 $28 = ((($27)) + 1|0);
 HEAP8[$28>>0] = $26;
 $i = 1;
 while(1) {
  $29 = $i;
  $30 = $4;
  $31 = (($30) - 1)|0;
  $32 = ($29|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $i;
  $34 = $input;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($37*3)|0;
  $39 = (($38) + 2)|0;
  $n = $39;
  $40 = $n;
  $41 = $i;
  $42 = (($41) - 1)|0;
  $43 = $input;
  $44 = (($43) + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($40) + ($46))|0;
  $48 = $47 >> 2;
  $49 = $48&255;
  $50 = $i;
  $51 = $50<<1;
  $52 = (($51) + 0)|0;
  $53 = $1;
  $54 = (($53) + ($52)|0);
  HEAP8[$54>>0] = $49;
  $55 = $n;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $58 = $input;
  $59 = (($58) + ($57)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($55) + ($61))|0;
  $63 = $62 >> 2;
  $64 = $63&255;
  $65 = $i;
  $66 = $65<<1;
  $67 = (($66) + 1)|0;
  $68 = $1;
  $69 = (($68) + ($67)|0);
  HEAP8[$69>>0] = $64;
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = $4;
 $73 = (($72) - 2)|0;
 $74 = $input;
 $75 = (($74) + ($73)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = ($77*3)|0;
 $79 = $4;
 $80 = (($79) - 1)|0;
 $81 = $input;
 $82 = (($81) + ($80)|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = (($78) + ($84))|0;
 $86 = (($85) + 2)|0;
 $87 = $86 >> 2;
 $88 = $87&255;
 $89 = $i;
 $90 = $89<<1;
 $91 = (($90) + 0)|0;
 $92 = $1;
 $93 = (($92) + ($91)|0);
 HEAP8[$93>>0] = $88;
 $94 = $4;
 $95 = (($94) - 1)|0;
 $96 = $input;
 $97 = (($96) + ($95)|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $i;
 $100 = $99<<1;
 $101 = (($100) + 1)|0;
 $102 = $1;
 $103 = (($102) + ($101)|0);
 HEAP8[$103>>0] = $98;
 $104 = $1;
 $0 = $104;
 $105 = $0;
 STACKTOP = sp;return ($105|0);
}
function __ZL26stbi__resample_row_genericPhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $j = 0;
  while(1) {
   $8 = $j;
   $9 = $4;
   $10 = ($8|0)<($9|0);
   $11 = $i;
   if (!($10)) {
    break;
   }
   $12 = $1;
   $13 = (($12) + ($11)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $i;
   $16 = $4;
   $17 = Math_imul($15, $16)|0;
   $18 = $j;
   $19 = (($17) + ($18))|0;
   $20 = $0;
   $21 = (($20) + ($19)|0);
   HEAP8[$21>>0] = $14;
   $22 = $j;
   $23 = (($22) + 1)|0;
   $j = $23;
  }
  $24 = (($11) + 1)|0;
  $i = $24;
 }
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function __ZL25stbi__process_scan_headerP10stbi__jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ls = 0, $aa = 0, $i = 0, $id = 0, $q = 0, $which = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZL13stbi__get16beP13stbi__context($3)|0);
 $Ls = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = $1;
 $10 = ((($9)) + 18148|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = ((($11)) + 18148|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(1);
 if (!($14)) {
  $15 = $1;
  $16 = ((($15)) + 18148|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)>(4);
  if (!($18)) {
   $19 = $1;
   $20 = ((($19)) + 18148|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $1;
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($21|0)>($25|0);
   if (!($26)) {
    $28 = $Ls;
    $29 = $1;
    $30 = ((($29)) + 18148|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31<<1;
    $33 = (6 + ($32))|0;
    $34 = ($28|0)!=($33|0);
    if ($34) {
     $35 = (__ZL9stbi__errPKc(4992)|0);
     $0 = $35;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    $i = 0;
    while(1) {
     $36 = $i;
     $37 = $1;
     $38 = ((($37)) + 18148|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($36|0)<($39|0);
     $41 = $1;
     $42 = HEAP32[$41>>2]|0;
     $43 = (__ZL10stbi__get8P13stbi__context($42)|0);
     $44 = $43&255;
     if (!($40)) {
      label = 20;
      break;
     }
     $id = $44;
     $45 = $1;
     $46 = HEAP32[$45>>2]|0;
     $47 = (__ZL10stbi__get8P13stbi__context($46)|0);
     $48 = $47&255;
     $q = $48;
     $which = 0;
     while(1) {
      $49 = $which;
      $50 = $1;
      $51 = HEAP32[$50>>2]|0;
      $52 = ((($51)) + 8|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($49|0)<($53|0);
      if (!($54)) {
       break;
      }
      $55 = $which;
      $56 = $1;
      $57 = ((($56)) + 17820|0);
      $58 = (($57) + (($55*72)|0)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $id;
      $61 = ($59|0)==($60|0);
      if ($61) {
       break;
      }
      $62 = $which;
      $63 = (($62) + 1)|0;
      $which = $63;
     }
     $64 = $which;
     $65 = $1;
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($64|0)==($68|0);
     if ($69) {
      label = 14;
      break;
     }
     $70 = $q;
     $71 = $70 >> 4;
     $72 = $which;
     $73 = $1;
     $74 = ((($73)) + 17820|0);
     $75 = (($74) + (($72*72)|0)|0);
     $76 = ((($75)) + 16|0);
     HEAP32[$76>>2] = $71;
     $77 = $which;
     $78 = $1;
     $79 = ((($78)) + 17820|0);
     $80 = (($79) + (($77*72)|0)|0);
     $81 = ((($80)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)>(3);
     if ($83) {
      label = 16;
      break;
     }
     $85 = $q;
     $86 = $85 & 15;
     $87 = $which;
     $88 = $1;
     $89 = ((($88)) + 17820|0);
     $90 = (($89) + (($87*72)|0)|0);
     $91 = ((($90)) + 20|0);
     HEAP32[$91>>2] = $86;
     $92 = $which;
     $93 = $1;
     $94 = ((($93)) + 17820|0);
     $95 = (($94) + (($92*72)|0)|0);
     $96 = ((($95)) + 20|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)>(3);
     if ($98) {
      label = 18;
      break;
     }
     $100 = $which;
     $101 = $i;
     $102 = $1;
     $103 = ((($102)) + 18152|0);
     $104 = (($103) + ($101<<2)|0);
     HEAP32[$104>>2] = $100;
     $105 = $i;
     $106 = (($105) + 1)|0;
     $i = $106;
    }
    if ((label|0) == 14) {
     $0 = 0;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    else if ((label|0) == 16) {
     $84 = (__ZL9stbi__errPKc(5008)|0);
     $0 = $84;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    else if ((label|0) == 18) {
     $99 = (__ZL9stbi__errPKc(5024)|0);
     $0 = $99;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    else if ((label|0) == 20) {
     $107 = $1;
     $108 = ((($107)) + 18128|0);
     HEAP32[$108>>2] = $44;
     $109 = $1;
     $110 = HEAP32[$109>>2]|0;
     $111 = (__ZL10stbi__get8P13stbi__context($110)|0);
     $112 = $111&255;
     $113 = $1;
     $114 = ((($113)) + 18132|0);
     HEAP32[$114>>2] = $112;
     $115 = $1;
     $116 = HEAP32[$115>>2]|0;
     $117 = (__ZL10stbi__get8P13stbi__context($116)|0);
     $118 = $117&255;
     $aa = $118;
     $119 = $aa;
     $120 = $119 >> 4;
     $121 = $1;
     $122 = ((($121)) + 18136|0);
     HEAP32[$122>>2] = $120;
     $123 = $aa;
     $124 = $123 & 15;
     $125 = $1;
     $126 = ((($125)) + 18140|0);
     HEAP32[$126>>2] = $124;
     $127 = $1;
     $128 = ((($127)) + 18124|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)!=(0);
     $131 = $1;
     $132 = ((($131)) + 18128|0);
     $133 = HEAP32[$132>>2]|0;
     do {
      if ($130) {
       $134 = ($133|0)>(63);
       if (!($134)) {
        $135 = $1;
        $136 = ((($135)) + 18132|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($137|0)>(63);
        if (!($138)) {
         $139 = $1;
         $140 = ((($139)) + 18128|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = $1;
         $143 = ((($142)) + 18132|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($141|0)>($144|0);
         if (!($145)) {
          $146 = $1;
          $147 = ((($146)) + 18136|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = ($148|0)>(13);
          if (!($149)) {
           $150 = $1;
           $151 = ((($150)) + 18140|0);
           $152 = HEAP32[$151>>2]|0;
           $153 = ($152|0)>(13);
           if (!($153)) {
            break;
           }
          }
         }
        }
       }
       $154 = (__ZL9stbi__errPKc(5040)|0);
       $0 = $154;
       $168 = $0;
       STACKTOP = sp;return ($168|0);
      } else {
       $155 = ($133|0)!=(0);
       if ($155) {
        $156 = (__ZL9stbi__errPKc(5040)|0);
        $0 = $156;
        $168 = $0;
        STACKTOP = sp;return ($168|0);
       }
       $157 = $1;
       $158 = ((($157)) + 18136|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159|0)!=(0);
       if (!($160)) {
        $161 = $1;
        $162 = ((($161)) + 18140|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = ($163|0)!=(0);
        if (!($164)) {
         $166 = $1;
         $167 = ((($166)) + 18132|0);
         HEAP32[$167>>2] = 63;
         break;
        }
       }
       $165 = (__ZL9stbi__errPKc(5040)|0);
       $0 = $165;
       $168 = $0;
       STACKTOP = sp;return ($168|0);
      }
     } while(0);
     $0 = 1;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
   }
  }
 }
 $27 = (__ZL9stbi__errPKc(4968)|0);
 $0 = $27;
 $168 = $0;
 STACKTOP = sp;return ($168|0);
}
function __ZL30stbi__parse_entropy_coded_dataP10stbi__jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $data = 0, $data11 = 0, $data21 = 0, $data3 = 0, $h = 0, $h10 = 0, $ha = 0, $ha12 = 0, $ha5 = 0, $i = 0, $i1 = 0, $i13 = 0, $i6 = 0, $j = 0, $j14 = 0, $j2 = 0, $j7 = 0, $k = 0, $k15 = 0, $n = 0;
 var $n18 = 0, $n4 = 0, $n8 = 0, $w = 0, $w9 = 0, $x = 0, $x16 = 0, $x2 = 0, $x219 = 0, $y = 0, $y17 = 0, $y2 = 0, $y220 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 264|0;
 $data3 = sp + 136|0;
 $1 = $z;
 $2 = $1;
 __ZL16stbi__jpeg_resetP10stbi__jpeg($2);
 $3 = $1;
 $4 = ((($3)) + 18124|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 $7 = $1;
 $8 = ((($7)) + 18148|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if (!($6)) {
  if ($10) {
   $11 = $1;
   $12 = ((($11)) + 18152|0);
   $13 = HEAP32[$12>>2]|0;
   $n = $13;
   $14 = $n;
   $15 = $1;
   $16 = ((($15)) + 17820|0);
   $17 = (($16) + (($14*72)|0)|0);
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 7)|0;
   $21 = $20 >> 3;
   $w = $21;
   $22 = $n;
   $23 = $1;
   $24 = ((($23)) + 17820|0);
   $25 = (($24) + (($22*72)|0)|0);
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 7)|0;
   $29 = $28 >> 3;
   $h = $29;
   $j = 0;
   L5: while(1) {
    $30 = $j;
    $31 = $h;
    $32 = ($30|0)<($31|0);
    if (!($32)) {
     label = 18;
     break;
    }
    $i = 0;
    while(1) {
     $33 = $i;
     $34 = $w;
     $35 = ($33|0)<($34|0);
     if (!($35)) {
      break;
     }
     $36 = $n;
     $37 = $1;
     $38 = ((($37)) + 17820|0);
     $39 = (($38) + (($36*72)|0)|0);
     $40 = ((($39)) + 20|0);
     $41 = HEAP32[$40>>2]|0;
     $ha = $41;
     $42 = $1;
     $43 = $1;
     $44 = ((($43)) + 4|0);
     $45 = $n;
     $46 = $1;
     $47 = ((($46)) + 17820|0);
     $48 = (($47) + (($45*72)|0)|0);
     $49 = ((($48)) + 16|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($44) + (($50*1680)|0)|0);
     $52 = $1;
     $53 = ((($52)) + 6724|0);
     $54 = $ha;
     $55 = (($53) + (($54*1680)|0)|0);
     $56 = $ha;
     $57 = $1;
     $58 = ((($57)) + 13700|0);
     $59 = (($58) + ($56<<10)|0);
     $60 = $n;
     $61 = $n;
     $62 = $1;
     $63 = ((($62)) + 17820|0);
     $64 = (($63) + (($61*72)|0)|0);
     $65 = ((($64)) + 12|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $1;
     $68 = ((($67)) + 13444|0);
     $69 = (($68) + ($66<<6)|0);
     $70 = (__ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPh($42,$data,$51,$55,$59,$60,$69)|0);
     $71 = ($70|0)!=(0);
     if (!($71)) {
      label = 8;
      break L5;
     }
     $72 = $1;
     $73 = ((($72)) + 18176|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $n;
     $76 = $1;
     $77 = ((($76)) + 17820|0);
     $78 = (($77) + (($75*72)|0)|0);
     $79 = ((($78)) + 44|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $n;
     $82 = $1;
     $83 = ((($82)) + 17820|0);
     $84 = (($83) + (($81*72)|0)|0);
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $j;
     $88 = Math_imul($86, $87)|0;
     $89 = $88<<3;
     $90 = (($80) + ($89)|0);
     $91 = $i;
     $92 = $91<<3;
     $93 = (($90) + ($92)|0);
     $94 = $n;
     $95 = $1;
     $96 = ((($95)) + 17820|0);
     $97 = (($96) + (($94*72)|0)|0);
     $98 = ((($97)) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     FUNCTION_TABLE_viii[$74 & 31]($93,$99,$data);
     $100 = $1;
     $101 = ((($100)) + 18172|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + -1)|0;
     HEAP32[$101>>2] = $103;
     $104 = ($103|0)<=(0);
     if ($104) {
      $105 = $1;
      $106 = ((($105)) + 18112|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)<(24);
      if ($108) {
       $109 = $1;
       __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($109);
      }
      $110 = $1;
      $111 = ((($110)) + 18116|0);
      $112 = HEAP8[$111>>0]|0;
      $113 = $112&255;
      $114 = ($113|0)>=(208);
      if (!($114)) {
       label = 14;
       break L5;
      }
      $115 = $1;
      $116 = ((($115)) + 18116|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = ($118|0)<=(215);
      if (!($119)) {
       label = 14;
       break L5;
      }
      $120 = $1;
      __ZL16stbi__jpeg_resetP10stbi__jpeg($120);
     }
     $121 = $i;
     $122 = (($121) + 1)|0;
     $i = $122;
    }
    $123 = $j;
    $124 = (($123) + 1)|0;
    $j = $124;
   }
   if ((label|0) == 8) {
    $0 = 0;
    $499 = $0;
    STACKTOP = sp;return ($499|0);
   }
   else if ((label|0) == 14) {
    $0 = 1;
    $499 = $0;
    STACKTOP = sp;return ($499|0);
   }
   else if ((label|0) == 18) {
    $0 = 1;
    $499 = $0;
    STACKTOP = sp;return ($499|0);
   }
  }
  $j2 = 0;
  L29: while(1) {
   $125 = $j2;
   $126 = $1;
   $127 = ((($126)) + 17808|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($125|0)<($128|0);
   if (!($129)) {
    label = 43;
    break;
   }
   $i1 = 0;
   while(1) {
    $130 = $i1;
    $131 = $1;
    $132 = ((($131)) + 17804|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($130|0)<($133|0);
    if (!($134)) {
     break;
    }
    $k = 0;
    while(1) {
     $135 = $k;
     $136 = $1;
     $137 = ((($136)) + 18148|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($135|0)<($138|0);
     if (!($139)) {
      break;
     }
     $140 = $k;
     $141 = $1;
     $142 = ((($141)) + 18152|0);
     $143 = (($142) + ($140<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $n4 = $144;
     $y = 0;
     while(1) {
      $145 = $y;
      $146 = $n4;
      $147 = $1;
      $148 = ((($147)) + 17820|0);
      $149 = (($148) + (($146*72)|0)|0);
      $150 = ((($149)) + 8|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($145|0)<($151|0);
      if (!($152)) {
       break;
      }
      $x = 0;
      while(1) {
       $153 = $x;
       $154 = $n4;
       $155 = $1;
       $156 = ((($155)) + 17820|0);
       $157 = (($156) + (($154*72)|0)|0);
       $158 = ((($157)) + 4|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($153|0)<($159|0);
       if (!($160)) {
        break;
       }
       $161 = $i1;
       $162 = $n4;
       $163 = $1;
       $164 = ((($163)) + 17820|0);
       $165 = (($164) + (($162*72)|0)|0);
       $166 = ((($165)) + 4|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = Math_imul($161, $167)|0;
       $169 = $x;
       $170 = (($168) + ($169))|0;
       $171 = $170<<3;
       $x2 = $171;
       $172 = $j2;
       $173 = $n4;
       $174 = $1;
       $175 = ((($174)) + 17820|0);
       $176 = (($175) + (($173*72)|0)|0);
       $177 = ((($176)) + 8|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = Math_imul($172, $178)|0;
       $180 = $y;
       $181 = (($179) + ($180))|0;
       $182 = $181<<3;
       $y2 = $182;
       $183 = $n4;
       $184 = $1;
       $185 = ((($184)) + 17820|0);
       $186 = (($185) + (($183*72)|0)|0);
       $187 = ((($186)) + 20|0);
       $188 = HEAP32[$187>>2]|0;
       $ha5 = $188;
       $189 = $1;
       $190 = $1;
       $191 = ((($190)) + 4|0);
       $192 = $n4;
       $193 = $1;
       $194 = ((($193)) + 17820|0);
       $195 = (($194) + (($192*72)|0)|0);
       $196 = ((($195)) + 16|0);
       $197 = HEAP32[$196>>2]|0;
       $198 = (($191) + (($197*1680)|0)|0);
       $199 = $1;
       $200 = ((($199)) + 6724|0);
       $201 = $ha5;
       $202 = (($200) + (($201*1680)|0)|0);
       $203 = $ha5;
       $204 = $1;
       $205 = ((($204)) + 13700|0);
       $206 = (($205) + ($203<<10)|0);
       $207 = $n4;
       $208 = $n4;
       $209 = $1;
       $210 = ((($209)) + 17820|0);
       $211 = (($210) + (($208*72)|0)|0);
       $212 = ((($211)) + 12|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $1;
       $215 = ((($214)) + 13444|0);
       $216 = (($215) + ($213<<6)|0);
       $217 = (__ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPh($189,$data3,$198,$202,$206,$207,$216)|0);
       $218 = ($217|0)!=(0);
       if (!($218)) {
        label = 30;
        break L29;
       }
       $219 = $1;
       $220 = ((($219)) + 18176|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $n4;
       $223 = $1;
       $224 = ((($223)) + 17820|0);
       $225 = (($224) + (($222*72)|0)|0);
       $226 = ((($225)) + 44|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = $n4;
       $229 = $1;
       $230 = ((($229)) + 17820|0);
       $231 = (($230) + (($228*72)|0)|0);
       $232 = ((($231)) + 36|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = $y2;
       $235 = Math_imul($233, $234)|0;
       $236 = (($227) + ($235)|0);
       $237 = $x2;
       $238 = (($236) + ($237)|0);
       $239 = $n4;
       $240 = $1;
       $241 = ((($240)) + 17820|0);
       $242 = (($241) + (($239*72)|0)|0);
       $243 = ((($242)) + 36|0);
       $244 = HEAP32[$243>>2]|0;
       FUNCTION_TABLE_viii[$221 & 31]($238,$244,$data3);
       $245 = $x;
       $246 = (($245) + 1)|0;
       $x = $246;
      }
      $247 = $y;
      $248 = (($247) + 1)|0;
      $y = $248;
     }
     $249 = $k;
     $250 = (($249) + 1)|0;
     $k = $250;
    }
    $251 = $1;
    $252 = ((($251)) + 18172|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + -1)|0;
    HEAP32[$252>>2] = $254;
    $255 = ($254|0)<=(0);
    if ($255) {
     $256 = $1;
     $257 = ((($256)) + 18112|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ($258|0)<(24);
     if ($259) {
      $260 = $1;
      __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($260);
     }
     $261 = $1;
     $262 = ((($261)) + 18116|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = $263&255;
     $265 = ($264|0)>=(208);
     if (!($265)) {
      label = 39;
      break L29;
     }
     $266 = $1;
     $267 = ((($266)) + 18116|0);
     $268 = HEAP8[$267>>0]|0;
     $269 = $268&255;
     $270 = ($269|0)<=(215);
     if (!($270)) {
      label = 39;
      break L29;
     }
     $271 = $1;
     __ZL16stbi__jpeg_resetP10stbi__jpeg($271);
    }
    $272 = $i1;
    $273 = (($272) + 1)|0;
    $i1 = $273;
   }
   $274 = $j2;
   $275 = (($274) + 1)|0;
   $j2 = $275;
  }
  if ((label|0) == 30) {
   $0 = 0;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 39) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 43) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
 }
 if ($10) {
  $276 = $1;
  $277 = ((($276)) + 18152|0);
  $278 = HEAP32[$277>>2]|0;
  $n8 = $278;
  $279 = $n8;
  $280 = $1;
  $281 = ((($280)) + 17820|0);
  $282 = (($281) + (($279*72)|0)|0);
  $283 = ((($282)) + 28|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) + 7)|0;
  $286 = $285 >> 3;
  $w9 = $286;
  $287 = $n8;
  $288 = $1;
  $289 = ((($288)) + 17820|0);
  $290 = (($289) + (($287*72)|0)|0);
  $291 = ((($290)) + 32|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (($292) + 7)|0;
  $294 = $293 >> 3;
  $h10 = $294;
  $j7 = 0;
  L67: while(1) {
   $295 = $j7;
   $296 = $h10;
   $297 = ($295|0)<($296|0);
   if (!($297)) {
    label = 63;
    break;
   }
   $i6 = 0;
   while(1) {
    $298 = $i6;
    $299 = $w9;
    $300 = ($298|0)<($299|0);
    if (!($300)) {
     break;
    }
    $301 = $n8;
    $302 = $1;
    $303 = ((($302)) + 17820|0);
    $304 = (($303) + (($301*72)|0)|0);
    $305 = ((($304)) + 60|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = $i6;
    $308 = $j7;
    $309 = $n8;
    $310 = $1;
    $311 = ((($310)) + 17820|0);
    $312 = (($311) + (($309*72)|0)|0);
    $313 = ((($312)) + 64|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = Math_imul($308, $314)|0;
    $316 = (($307) + ($315))|0;
    $317 = $316<<6;
    $318 = (($306) + ($317<<1)|0);
    $data11 = $318;
    $319 = $1;
    $320 = ((($319)) + 18128|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = ($321|0)==(0);
    if ($322) {
     $323 = $1;
     $324 = $data11;
     $325 = $n8;
     $326 = $1;
     $327 = ((($326)) + 17820|0);
     $328 = (($327) + (($325*72)|0)|0);
     $329 = ((($328)) + 16|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = $1;
     $332 = ((($331)) + 4|0);
     $333 = (($332) + (($330*1680)|0)|0);
     $334 = $n8;
     $335 = (__ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($323,$324,$333,$334)|0);
     $336 = ($335|0)!=(0);
     if (!($336)) {
      label = 51;
      break L67;
     }
    } else {
     $337 = $n8;
     $338 = $1;
     $339 = ((($338)) + 17820|0);
     $340 = (($339) + (($337*72)|0)|0);
     $341 = ((($340)) + 20|0);
     $342 = HEAP32[$341>>2]|0;
     $ha12 = $342;
     $343 = $1;
     $344 = $data11;
     $345 = $ha12;
     $346 = $1;
     $347 = ((($346)) + 6724|0);
     $348 = (($347) + (($345*1680)|0)|0);
     $349 = $ha12;
     $350 = $1;
     $351 = ((($350)) + 13700|0);
     $352 = (($351) + ($349<<10)|0);
     $353 = (__ZL31stbi__jpeg_decode_block_prog_acP10stbi__jpegPsP13stbi__huffmanS1_($343,$344,$348,$352)|0);
     $354 = ($353|0)!=(0);
     if (!($354)) {
      label = 53;
      break L67;
     }
    }
    $355 = $1;
    $356 = ((($355)) + 18172|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) + -1)|0;
    HEAP32[$356>>2] = $358;
    $359 = ($358|0)<=(0);
    if ($359) {
     $360 = $1;
     $361 = ((($360)) + 18112|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = ($362|0)<(24);
     if ($363) {
      $364 = $1;
      __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($364);
     }
     $365 = $1;
     $366 = ((($365)) + 18116|0);
     $367 = HEAP8[$366>>0]|0;
     $368 = $367&255;
     $369 = ($368|0)>=(208);
     if (!($369)) {
      label = 59;
      break L67;
     }
     $370 = $1;
     $371 = ((($370)) + 18116|0);
     $372 = HEAP8[$371>>0]|0;
     $373 = $372&255;
     $374 = ($373|0)<=(215);
     if (!($374)) {
      label = 59;
      break L67;
     }
     $375 = $1;
     __ZL16stbi__jpeg_resetP10stbi__jpeg($375);
    }
    $376 = $i6;
    $377 = (($376) + 1)|0;
    $i6 = $377;
   }
   $378 = $j7;
   $379 = (($378) + 1)|0;
   $j7 = $379;
  }
  if ((label|0) == 51) {
   $0 = 0;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 53) {
   $0 = 0;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 59) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 63) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
 }
 $j14 = 0;
 L96: while(1) {
  $380 = $j14;
  $381 = $1;
  $382 = ((($381)) + 17808|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = ($380|0)<($383|0);
  if (!($384)) {
   label = 88;
   break;
  }
  $i13 = 0;
  while(1) {
   $385 = $i13;
   $386 = $1;
   $387 = ((($386)) + 17804|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = ($385|0)<($388|0);
   if (!($389)) {
    break;
   }
   $k15 = 0;
   while(1) {
    $390 = $k15;
    $391 = $1;
    $392 = ((($391)) + 18148|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = ($390|0)<($393|0);
    if (!($394)) {
     break;
    }
    $395 = $k15;
    $396 = $1;
    $397 = ((($396)) + 18152|0);
    $398 = (($397) + ($395<<2)|0);
    $399 = HEAP32[$398>>2]|0;
    $n18 = $399;
    $y17 = 0;
    while(1) {
     $400 = $y17;
     $401 = $n18;
     $402 = $1;
     $403 = ((($402)) + 17820|0);
     $404 = (($403) + (($401*72)|0)|0);
     $405 = ((($404)) + 8|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = ($400|0)<($406|0);
     if (!($407)) {
      break;
     }
     $x16 = 0;
     while(1) {
      $408 = $x16;
      $409 = $n18;
      $410 = $1;
      $411 = ((($410)) + 17820|0);
      $412 = (($411) + (($409*72)|0)|0);
      $413 = ((($412)) + 4|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = ($408|0)<($414|0);
      if (!($415)) {
       break;
      }
      $416 = $i13;
      $417 = $n18;
      $418 = $1;
      $419 = ((($418)) + 17820|0);
      $420 = (($419) + (($417*72)|0)|0);
      $421 = ((($420)) + 4|0);
      $422 = HEAP32[$421>>2]|0;
      $423 = Math_imul($416, $422)|0;
      $424 = $x16;
      $425 = (($423) + ($424))|0;
      $x219 = $425;
      $426 = $j14;
      $427 = $n18;
      $428 = $1;
      $429 = ((($428)) + 17820|0);
      $430 = (($429) + (($427*72)|0)|0);
      $431 = ((($430)) + 8|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = Math_imul($426, $432)|0;
      $434 = $y17;
      $435 = (($433) + ($434))|0;
      $y220 = $435;
      $436 = $n18;
      $437 = $1;
      $438 = ((($437)) + 17820|0);
      $439 = (($438) + (($436*72)|0)|0);
      $440 = ((($439)) + 60|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = $x219;
      $443 = $y220;
      $444 = $n18;
      $445 = $1;
      $446 = ((($445)) + 17820|0);
      $447 = (($446) + (($444*72)|0)|0);
      $448 = ((($447)) + 64|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = Math_imul($443, $449)|0;
      $451 = (($442) + ($450))|0;
      $452 = $451<<6;
      $453 = (($441) + ($452<<1)|0);
      $data21 = $453;
      $454 = $1;
      $455 = $data21;
      $456 = $n18;
      $457 = $1;
      $458 = ((($457)) + 17820|0);
      $459 = (($458) + (($456*72)|0)|0);
      $460 = ((($459)) + 16|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $1;
      $463 = ((($462)) + 4|0);
      $464 = (($463) + (($461*1680)|0)|0);
      $465 = $n18;
      $466 = (__ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($454,$455,$464,$465)|0);
      $467 = ($466|0)!=(0);
      if (!($467)) {
       label = 75;
       break L96;
      }
      $468 = $x16;
      $469 = (($468) + 1)|0;
      $x16 = $469;
     }
     $470 = $y17;
     $471 = (($470) + 1)|0;
     $y17 = $471;
    }
    $472 = $k15;
    $473 = (($472) + 1)|0;
    $k15 = $473;
   }
   $474 = $1;
   $475 = ((($474)) + 18172|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = (($476) + -1)|0;
   HEAP32[$475>>2] = $477;
   $478 = ($477|0)<=(0);
   if ($478) {
    $479 = $1;
    $480 = ((($479)) + 18112|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = ($481|0)<(24);
    if ($482) {
     $483 = $1;
     __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($483);
    }
    $484 = $1;
    $485 = ((($484)) + 18116|0);
    $486 = HEAP8[$485>>0]|0;
    $487 = $486&255;
    $488 = ($487|0)>=(208);
    if (!($488)) {
     label = 84;
     break L96;
    }
    $489 = $1;
    $490 = ((($489)) + 18116|0);
    $491 = HEAP8[$490>>0]|0;
    $492 = $491&255;
    $493 = ($492|0)<=(215);
    if (!($493)) {
     label = 84;
     break L96;
    }
    $494 = $1;
    __ZL16stbi__jpeg_resetP10stbi__jpeg($494);
   }
   $495 = $i13;
   $496 = (($495) + 1)|0;
   $i13 = $496;
  }
  $497 = $j14;
  $498 = (($497) + 1)|0;
  $j14 = $498;
 }
 if ((label|0) == 75) {
  $0 = 0;
  $499 = $0;
  STACKTOP = sp;return ($499|0);
 }
 else if ((label|0) == 84) {
  $0 = 1;
  $499 = $0;
  STACKTOP = sp;return ($499|0);
 }
 else if ((label|0) == 88) {
  $0 = 1;
  $499 = $0;
  STACKTOP = sp;return ($499|0);
 }
 return (0)|0;
}
function __ZL17stbi__jpeg_finishP10stbi__jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $data = 0, $h = 0, $i = 0, $j = 0;
 var $n = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $0;
 $2 = ((($1)) + 18124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $n = 0;
 while(1) {
  $5 = $n;
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($5|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $n;
  $12 = $0;
  $13 = ((($12)) + 17820|0);
  $14 = (($13) + (($11*72)|0)|0);
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 7)|0;
  $18 = $17 >> 3;
  $w = $18;
  $19 = $n;
  $20 = $0;
  $21 = ((($20)) + 17820|0);
  $22 = (($21) + (($19*72)|0)|0);
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 7)|0;
  $26 = $25 >> 3;
  $h = $26;
  $j = 0;
  while(1) {
   $27 = $j;
   $28 = $h;
   $29 = ($27|0)<($28|0);
   if (!($29)) {
    break;
   }
   $i = 0;
   while(1) {
    $30 = $i;
    $31 = $w;
    $32 = ($30|0)<($31|0);
    if (!($32)) {
     break;
    }
    $33 = $n;
    $34 = $0;
    $35 = ((($34)) + 17820|0);
    $36 = (($35) + (($33*72)|0)|0);
    $37 = ((($36)) + 60|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $i;
    $40 = $j;
    $41 = $n;
    $42 = $0;
    $43 = ((($42)) + 17820|0);
    $44 = (($43) + (($41*72)|0)|0);
    $45 = ((($44)) + 64|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = Math_imul($40, $46)|0;
    $48 = (($39) + ($47))|0;
    $49 = $48<<6;
    $50 = (($38) + ($49<<1)|0);
    $data = $50;
    $51 = $data;
    $52 = $n;
    $53 = $0;
    $54 = ((($53)) + 17820|0);
    $55 = (($54) + (($52*72)|0)|0);
    $56 = ((($55)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $0;
    $59 = ((($58)) + 13444|0);
    $60 = (($59) + ($57<<6)|0);
    __ZL21stbi__jpeg_dequantizePsPh($51,$60);
    $61 = $0;
    $62 = ((($61)) + 18176|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $n;
    $65 = $0;
    $66 = ((($65)) + 17820|0);
    $67 = (($66) + (($64*72)|0)|0);
    $68 = ((($67)) + 44|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $n;
    $71 = $0;
    $72 = ((($71)) + 17820|0);
    $73 = (($72) + (($70*72)|0)|0);
    $74 = ((($73)) + 36|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $j;
    $77 = Math_imul($75, $76)|0;
    $78 = $77<<3;
    $79 = (($69) + ($78)|0);
    $80 = $i;
    $81 = $80<<3;
    $82 = (($79) + ($81)|0);
    $83 = $n;
    $84 = $0;
    $85 = ((($84)) + 17820|0);
    $86 = (($85) + (($83*72)|0)|0);
    $87 = ((($86)) + 36|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $data;
    FUNCTION_TABLE_viii[$63 & 31]($82,$88,$89);
    $90 = $i;
    $91 = (($90) + 1)|0;
    $i = $91;
   }
   $92 = $j;
   $93 = (($92) + 1)|0;
   $j = $93;
  }
  $94 = $n;
  $95 = (($94) + 1)|0;
  $n = $95;
 }
 STACKTOP = sp;return;
}
function __ZL21stbi__jpeg_dequantizePsPh($data,$dequant) {
 $data = $data|0;
 $dequant = $dequant|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $dequant;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(64);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $1;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $i;
  $10 = $0;
  $11 = (($10) + ($9<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = Math_imul($13, $8)|0;
  $15 = $14&65535;
  HEAP16[$11>>1] = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function __ZL16stbi__jpeg_resetP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 18112|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 18108|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 18120|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 17820|0);
 $9 = ((($8)) + 144|0);
 $10 = ((($9)) + 24|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 17820|0);
 $13 = ((($12)) + 72|0);
 $14 = ((($13)) + 24|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = ((($15)) + 17820|0);
 $17 = ((($16)) + 24|0);
 HEAP32[$17>>2] = 0;
 $18 = $0;
 $19 = ((($18)) + 18116|0);
 HEAP8[$19>>0] = -1;
 $20 = $0;
 $21 = ((($20)) + 18168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $29 = 2147483647;
  $27 = $0;
  $28 = ((($27)) + 18172|0);
  HEAP32[$28>>2] = $29;
  $30 = $0;
  $31 = ((($30)) + 18144|0);
  HEAP32[$31>>2] = 0;
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 18168|0);
 $26 = HEAP32[$25>>2]|0;
 $29 = $26;
 $27 = $0;
 $28 = ((($27)) + 18172|0);
 HEAP32[$28>>2] = $29;
 $30 = $0;
 $31 = ((($30)) + 18144|0);
 HEAP32[$31>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPh($j,$data,$hdc,$hac,$fac,$b,$dequant) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $hac = $hac|0;
 $fac = $fac|0;
 $b = $b|0;
 $dequant = $dequant|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $dc = 0;
 var $diff = 0, $k = 0, $r = 0, $rs = 0, $s = 0, $t = 0, $zig = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $data;
 $3 = $hdc;
 $4 = $hac;
 $5 = $fac;
 $6 = $b;
 $7 = $dequant;
 $8 = $1;
 $9 = ((($8)) + 18112|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(16);
 if ($11) {
  $12 = $1;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($12);
 }
 $13 = $1;
 $14 = $3;
 $15 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($13,$14)|0);
 $t = $15;
 $16 = $t;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = (__ZL9stbi__errPKc(3024)|0);
  $0 = $18;
  $137 = $0;
  STACKTOP = sp;return ($137|0);
 }
 $19 = $2;
 dest=$19; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $20 = $t;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $1;
  $23 = $t;
  $24 = (__ZL20stbi__extend_receiveP10stbi__jpegi($22,$23)|0);
  $25 = $24;
 } else {
  $25 = 0;
 }
 $diff = $25;
 $26 = $6;
 $27 = $1;
 $28 = ((($27)) + 17820|0);
 $29 = (($28) + (($26*72)|0)|0);
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $diff;
 $33 = (($31) + ($32))|0;
 $dc = $33;
 $34 = $dc;
 $35 = $6;
 $36 = $1;
 $37 = ((($36)) + 17820|0);
 $38 = (($37) + (($35*72)|0)|0);
 $39 = ((($38)) + 24|0);
 HEAP32[$39>>2] = $34;
 $40 = $dc;
 $41 = $7;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = Math_imul($40, $43)|0;
 $45 = $44&65535;
 $46 = $2;
 HEAP16[$46>>1] = $45;
 $k = 1;
 L11: while(1) {
  $47 = $1;
  $48 = ((($47)) + 18112|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)<(16);
  if ($50) {
   $51 = $1;
   __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($51);
  }
  $52 = $1;
  $53 = ((($52)) + 18108|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 >>> 23;
  $56 = $55 & 511;
  $c = $56;
  $57 = $c;
  $58 = $5;
  $59 = (($58) + ($57<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $r = $61;
  $62 = $r;
  $63 = ($62|0)!=(0);
  do {
   if ($63) {
    $64 = $r;
    $65 = $64 >> 4;
    $66 = $65 & 15;
    $67 = $k;
    $68 = (($67) + ($66))|0;
    $k = $68;
    $69 = $r;
    $70 = $69 & 15;
    $s = $70;
    $71 = $s;
    $72 = $1;
    $73 = ((($72)) + 18108|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $74 << $71;
    HEAP32[$73>>2] = $75;
    $76 = $s;
    $77 = $1;
    $78 = ((($77)) + 18112|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) - ($76))|0;
    HEAP32[$78>>2] = $80;
    $81 = $k;
    $82 = (($81) + 1)|0;
    $k = $82;
    $83 = (2584 + ($81)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $zig = $85;
    $86 = $r;
    $87 = $86 >> 8;
    $88 = $zig;
    $89 = $7;
    $90 = (($89) + ($88)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = Math_imul($87, $92)|0;
    $94 = $93&65535;
    $95 = $zig;
    $96 = $2;
    $97 = (($96) + ($95<<1)|0);
    HEAP16[$97>>1] = $94;
   } else {
    $98 = $1;
    $99 = $4;
    $100 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($98,$99)|0);
    $rs = $100;
    $101 = $rs;
    $102 = ($101|0)<(0);
    if ($102) {
     label = 13;
     break L11;
    }
    $104 = $rs;
    $105 = $104 & 15;
    $s = $105;
    $106 = $rs;
    $107 = $106 >> 4;
    $r = $107;
    $108 = $s;
    $109 = ($108|0)==(0);
    if (!($109)) {
     $114 = $r;
     $115 = $k;
     $116 = (($115) + ($114))|0;
     $k = $116;
     $117 = $k;
     $118 = (($117) + 1)|0;
     $k = $118;
     $119 = (2584 + ($117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $zig = $121;
     $122 = $1;
     $123 = $s;
     $124 = (__ZL20stbi__extend_receiveP10stbi__jpegi($122,$123)|0);
     $125 = $zig;
     $126 = $7;
     $127 = (($126) + ($125)|0);
     $128 = HEAP8[$127>>0]|0;
     $129 = $128&255;
     $130 = Math_imul($124, $129)|0;
     $131 = $130&65535;
     $132 = $zig;
     $133 = $2;
     $134 = (($133) + ($132<<1)|0);
     HEAP16[$134>>1] = $131;
     break;
    }
    $110 = $rs;
    $111 = ($110|0)!=(240);
    if ($111) {
     label = 19;
     break L11;
    }
    $112 = $k;
    $113 = (($112) + 16)|0;
    $k = $113;
   }
  } while(0);
  $135 = $k;
  $136 = ($135|0)<(64);
  if (!($136)) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 13) {
  $103 = (__ZL9stbi__errPKc(3024)|0);
  $0 = $103;
  $137 = $0;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 19) {
  $0 = 1;
  $137 = $0;
  STACKTOP = sp;return ($137|0);
 }
 return (0)|0;
}
function __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 18120|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0);
  if ($4) {
   $9 = 0;
  } else {
   $5 = $0;
   $6 = HEAP32[$5>>2]|0;
   $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
   $8 = $7&255;
   $9 = $8;
  }
  $b = $9;
  $10 = $b;
  $11 = ($10|0)==(255);
  if ($11) {
   $12 = $0;
   $13 = HEAP32[$12>>2]|0;
   $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
   $15 = $14&255;
   $c = $15;
   $16 = $c;
   $17 = ($16|0)!=(0);
   if ($17) {
    break;
   }
  }
  $24 = $b;
  $25 = $0;
  $26 = ((($25)) + 18112|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (24 - ($27))|0;
  $29 = $24 << $28;
  $30 = $0;
  $31 = ((($30)) + 18108|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | $29;
  HEAP32[$31>>2] = $33;
  $34 = $0;
  $35 = ((($34)) + 18112|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 8)|0;
  HEAP32[$35>>2] = $37;
  $38 = $0;
  $39 = ((($38)) + 18112|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)<=(24);
  if (!($41)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 $18 = $c;
 $19 = $18&255;
 $20 = $0;
 $21 = ((($20)) + 18116|0);
 HEAP8[$21>>0] = $19;
 $22 = $0;
 $23 = ((($22)) + 18120|0);
 HEAP32[$23>>2] = 1;
 STACKTOP = sp;return;
}
function __ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($j,$data,$hdc,$b) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $dc = 0, $diff = 0, $t = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $data;
 $3 = $hdc;
 $4 = $b;
 $5 = $1;
 $6 = ((($5)) + 18132|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(4608)|0);
  $0 = $9;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $10 = $1;
 $11 = ((($10)) + 18112|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(16);
 if ($13) {
  $14 = $1;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($14);
 }
 $15 = $1;
 $16 = ((($15)) + 18136|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $2;
  dest=$19; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $20 = $1;
  $21 = $3;
  $22 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($20,$21)|0);
  $t = $22;
  $23 = $t;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $1;
   $26 = $t;
   $27 = (__ZL20stbi__extend_receiveP10stbi__jpegi($25,$26)|0);
   $28 = $27;
  } else {
   $28 = 0;
  }
  $diff = $28;
  $29 = $4;
  $30 = $1;
  $31 = ((($30)) + 17820|0);
  $32 = (($31) + (($29*72)|0)|0);
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $diff;
  $36 = (($34) + ($35))|0;
  $dc = $36;
  $37 = $dc;
  $38 = $4;
  $39 = $1;
  $40 = ((($39)) + 17820|0);
  $41 = (($40) + (($38*72)|0)|0);
  $42 = ((($41)) + 24|0);
  HEAP32[$42>>2] = $37;
  $43 = $dc;
  $44 = $1;
  $45 = ((($44)) + 18140|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $43 << $46;
  $48 = $47&65535;
  $49 = $2;
  HEAP16[$49>>1] = $48;
 } else {
  $50 = $1;
  $51 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($50)|0);
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $1;
   $54 = ((($53)) + 18140|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = 1 << $55;
   $57 = $56&65535;
   $58 = $57 << 16 >> 16;
   $59 = $2;
   $60 = HEAP16[$59>>1]|0;
   $61 = $60 << 16 >> 16;
   $62 = (($61) + ($58))|0;
   $63 = $62&65535;
   HEAP16[$59>>1] = $63;
  }
 }
 $0 = 1;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function __ZL31stbi__jpeg_decode_block_prog_acP10stbi__jpegPsP13stbi__huffmanS1_($j,$data,$hac,$fac) {
 $j = $j|0;
 $data = $data|0;
 $hac = $hac|0;
 $fac = $fac|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $c = 0, $k = 0, $p = 0, $p4 = 0, $r = 0, $r1 = 0, $rs = 0;
 var $rs3 = 0, $s = 0, $s2 = 0, $shift = 0, $zig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $data;
 $3 = $hac;
 $4 = $fac;
 $5 = $1;
 $6 = ((($5)) + 18128|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(4608)|0);
  $0 = $9;
  $271 = $0;
  STACKTOP = sp;return ($271|0);
 }
 $10 = $1;
 $11 = ((($10)) + 18136|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 $14 = $1;
 $15 = ((($14)) + 18140|0);
 $16 = HEAP32[$15>>2]|0;
 L5: do {
  if ($13) {
   $shift = $16;
   $17 = $1;
   $18 = ((($17)) + 18144|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0);
   $21 = $1;
   if ($20) {
    $22 = ((($21)) + 18144|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + -1)|0;
    HEAP32[$22>>2] = $24;
    $0 = 1;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
   $25 = ((($21)) + 18128|0);
   $26 = HEAP32[$25>>2]|0;
   $k = $26;
   L11: while(1) {
    $27 = $1;
    $28 = ((($27)) + 18112|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)<(16);
    if ($30) {
     $31 = $1;
     __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($31);
    }
    $32 = $1;
    $33 = ((($32)) + 18108|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 >>> 23;
    $36 = $35 & 511;
    $c = $36;
    $37 = $c;
    $38 = $4;
    $39 = (($38) + ($37<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40 << 16 >> 16;
    $r = $41;
    $42 = $r;
    $43 = ($42|0)!=(0);
    do {
     if ($43) {
      $44 = $r;
      $45 = $44 >> 4;
      $46 = $45 & 15;
      $47 = $k;
      $48 = (($47) + ($46))|0;
      $k = $48;
      $49 = $r;
      $50 = $49 & 15;
      $s = $50;
      $51 = $s;
      $52 = $1;
      $53 = ((($52)) + 18108|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $54 << $51;
      HEAP32[$53>>2] = $55;
      $56 = $s;
      $57 = $1;
      $58 = ((($57)) + 18112|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) - ($56))|0;
      HEAP32[$58>>2] = $60;
      $61 = $k;
      $62 = (($61) + 1)|0;
      $k = $62;
      $63 = (2584 + ($61)|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $zig = $65;
      $66 = $r;
      $67 = $66 >> 8;
      $68 = $shift;
      $69 = $67 << $68;
      $70 = $69&65535;
      $71 = $zig;
      $72 = $2;
      $73 = (($72) + ($71<<1)|0);
      HEAP16[$73>>1] = $70;
     } else {
      $74 = $1;
      $75 = $3;
      $76 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($74,$75)|0);
      $rs = $76;
      $77 = $rs;
      $78 = ($77|0)<(0);
      if ($78) {
       label = 12;
       break L11;
      }
      $80 = $rs;
      $81 = $80 & 15;
      $s = $81;
      $82 = $rs;
      $83 = $82 >> 4;
      $r = $83;
      $84 = $s;
      $85 = ($84|0)==(0);
      $86 = $r;
      if (!($85)) {
       $107 = $k;
       $108 = (($107) + ($86))|0;
       $k = $108;
       $109 = $k;
       $110 = (($109) + 1)|0;
       $k = $110;
       $111 = (2584 + ($109)|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $zig = $113;
       $114 = $1;
       $115 = $s;
       $116 = (__ZL20stbi__extend_receiveP10stbi__jpegi($114,$115)|0);
       $117 = $shift;
       $118 = $116 << $117;
       $119 = $118&65535;
       $120 = $zig;
       $121 = $2;
       $122 = (($121) + ($120<<1)|0);
       HEAP16[$122>>1] = $119;
       break;
      }
      $87 = ($86|0)<(15);
      if ($87) {
       break L11;
      }
      $105 = $k;
      $106 = (($105) + 16)|0;
      $k = $106;
     }
    } while(0);
    $123 = $k;
    $124 = $1;
    $125 = ((($124)) + 18132|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($123|0)<=($126|0);
    if (!($127)) {
     break L5;
    }
   }
   if ((label|0) == 12) {
    $79 = (__ZL9stbi__errPKc(3024)|0);
    $0 = $79;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
   $88 = $r;
   $89 = 1 << $88;
   $90 = $1;
   $91 = ((($90)) + 18144|0);
   HEAP32[$91>>2] = $89;
   $92 = $r;
   $93 = ($92|0)!=(0);
   if ($93) {
    $94 = $1;
    $95 = $r;
    $96 = (__ZL19stbi__jpeg_get_bitsP10stbi__jpegi($94,$95)|0);
    $97 = $1;
    $98 = ((($97)) + 18144|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + ($96))|0;
    HEAP32[$98>>2] = $100;
   }
   $101 = $1;
   $102 = ((($101)) + 18144|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + -1)|0;
   HEAP32[$102>>2] = $104;
  } else {
   $128 = 1 << $16;
   $129 = $128&65535;
   $bit = $129;
   $130 = $1;
   $131 = ((($130)) + 18144|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)!=(0);
   $134 = $1;
   if ($133) {
    $135 = ((($134)) + 18144|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + -1)|0;
    HEAP32[$135>>2] = $137;
    $138 = $1;
    $139 = ((($138)) + 18128|0);
    $140 = HEAP32[$139>>2]|0;
    $k = $140;
    while(1) {
     $141 = $k;
     $142 = $1;
     $143 = ((($142)) + 18132|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($141|0)<=($144|0);
     if (!($145)) {
      break L5;
     }
     $146 = $k;
     $147 = (2584 + ($146)|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = $2;
     $151 = (($150) + ($149<<1)|0);
     $p = $151;
     $152 = $p;
     $153 = HEAP16[$152>>1]|0;
     $154 = $153 << 16 >> 16;
     $155 = ($154|0)!=(0);
     do {
      if ($155) {
       $156 = $1;
       $157 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($156)|0);
       $158 = ($157|0)!=(0);
       if ($158) {
        $159 = $p;
        $160 = HEAP16[$159>>1]|0;
        $161 = $160 << 16 >> 16;
        $162 = $bit;
        $163 = $162 << 16 >> 16;
        $164 = $161 & $163;
        $165 = ($164|0)==(0);
        if ($165) {
         $166 = $p;
         $167 = HEAP16[$166>>1]|0;
         $168 = $167 << 16 >> 16;
         $169 = ($168|0)>(0);
         $170 = $bit;
         $171 = $170 << 16 >> 16;
         $172 = $p;
         $173 = HEAP16[$172>>1]|0;
         $174 = $173 << 16 >> 16;
         if ($169) {
          $175 = (($174) + ($171))|0;
          $176 = $175&65535;
          HEAP16[$172>>1] = $176;
          break;
         } else {
          $177 = (($174) - ($171))|0;
          $178 = $177&65535;
          HEAP16[$172>>1] = $178;
          break;
         }
        }
       }
      }
     } while(0);
     $179 = $k;
     $180 = (($179) + 1)|0;
     $k = $180;
    }
   }
   $181 = ((($134)) + 18128|0);
   $182 = HEAP32[$181>>2]|0;
   $k = $182;
   L47: while(1) {
    $183 = $1;
    $184 = $3;
    $185 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($183,$184)|0);
    $rs3 = $185;
    $186 = $rs3;
    $187 = ($186|0)<(0);
    if ($187) {
     label = 33;
     break;
    }
    $189 = $rs3;
    $190 = $189 & 15;
    $s2 = $190;
    $191 = $rs3;
    $192 = $191 >> 4;
    $r1 = $192;
    $193 = $s2;
    $194 = ($193|0)==(0);
    do {
     if ($194) {
      $195 = $r1;
      $196 = ($195|0)<(15);
      if ($196) {
       $197 = $r1;
       $198 = 1 << $197;
       $199 = (($198) - 1)|0;
       $200 = $1;
       $201 = ((($200)) + 18144|0);
       HEAP32[$201>>2] = $199;
       $202 = $r1;
       $203 = ($202|0)!=(0);
       if ($203) {
        $204 = $1;
        $205 = $r1;
        $206 = (__ZL19stbi__jpeg_get_bitsP10stbi__jpegi($204,$205)|0);
        $207 = $1;
        $208 = ((($207)) + 18144|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = (($209) + ($206))|0;
        HEAP32[$208>>2] = $210;
       }
       $r1 = 64;
      }
     } else {
      $211 = $s2;
      $212 = ($211|0)!=(1);
      if ($212) {
       label = 40;
       break L47;
      }
      $214 = $1;
      $215 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($214)|0);
      $216 = ($215|0)!=(0);
      $217 = $bit;
      $218 = $217 << 16 >> 16;
      if ($216) {
       $s2 = $218;
       break;
      } else {
       $219 = (0 - ($218))|0;
       $s2 = $219;
       break;
      }
     }
    } while(0);
    while(1) {
     $220 = $k;
     $221 = $1;
     $222 = ((($221)) + 18132|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ($220|0)<=($223|0);
     if (!($224)) {
      break;
     }
     $225 = $k;
     $226 = (($225) + 1)|0;
     $k = $226;
     $227 = (2584 + ($225)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = $2;
     $231 = (($230) + ($229<<1)|0);
     $p4 = $231;
     $232 = $p4;
     $233 = HEAP16[$232>>1]|0;
     $234 = $233 << 16 >> 16;
     $235 = ($234|0)!=(0);
     if (!($235)) {
      $259 = $r1;
      $260 = ($259|0)==(0);
      if ($260) {
       label = 52;
       break;
      }
      $264 = $r1;
      $265 = (($264) + -1)|0;
      $r1 = $265;
      continue;
     }
     $236 = $1;
     $237 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($236)|0);
     $238 = ($237|0)!=(0);
     if (!($238)) {
      continue;
     }
     $239 = $p4;
     $240 = HEAP16[$239>>1]|0;
     $241 = $240 << 16 >> 16;
     $242 = $bit;
     $243 = $242 << 16 >> 16;
     $244 = $241 & $243;
     $245 = ($244|0)==(0);
     if (!($245)) {
      continue;
     }
     $246 = $p4;
     $247 = HEAP16[$246>>1]|0;
     $248 = $247 << 16 >> 16;
     $249 = ($248|0)>(0);
     $250 = $bit;
     $251 = $250 << 16 >> 16;
     $252 = $p4;
     $253 = HEAP16[$252>>1]|0;
     $254 = $253 << 16 >> 16;
     if ($249) {
      $255 = (($254) + ($251))|0;
      $256 = $255&65535;
      HEAP16[$252>>1] = $256;
      continue;
     } else {
      $257 = (($254) - ($251))|0;
      $258 = $257&65535;
      HEAP16[$252>>1] = $258;
      continue;
     }
    }
    if ((label|0) == 52) {
     label = 0;
     $261 = $s2;
     $262 = $261&65535;
     $263 = $p4;
     HEAP16[$263>>1] = $262;
    }
    $266 = $k;
    $267 = $1;
    $268 = ((($267)) + 18132|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ($266|0)<=($269|0);
    if (!($270)) {
     break L5;
    }
   }
   if ((label|0) == 33) {
    $188 = (__ZL9stbi__errPKc(3024)|0);
    $0 = $188;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
   else if ((label|0) == 40) {
    $213 = (__ZL9stbi__errPKc(3024)|0);
    $0 = $213;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
  }
 } while(0);
 $0 = 1;
 $271 = $0;
 STACKTOP = sp;return ($271|0);
}
function __ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($j,$h) {
 $j = $j|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $k = 0, $s = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $h;
 $3 = $1;
 $4 = ((($3)) + 18112|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(16);
 if ($6) {
  $7 = $1;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($7);
 }
 $8 = $1;
 $9 = ((($8)) + 18108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >>> 23;
 $12 = $11 & 511;
 $c = $12;
 $13 = $c;
 $14 = $2;
 $15 = (($14) + ($13)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $k = $17;
 $18 = $k;
 $19 = ($18|0)<(255);
 if ($19) {
  $20 = $k;
  $21 = $2;
  $22 = ((($21)) + 1280|0);
  $23 = (($22) + ($20)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $s = $25;
  $26 = $s;
  $27 = $1;
  $28 = ((($27)) + 18112|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)>($29|0);
  if ($30) {
   $0 = -1;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  } else {
   $31 = $s;
   $32 = $1;
   $33 = ((($32)) + 18108|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 << $31;
   HEAP32[$33>>2] = $35;
   $36 = $s;
   $37 = $1;
   $38 = ((($37)) + 18112|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) - ($36))|0;
   HEAP32[$38>>2] = $40;
   $41 = $k;
   $42 = $2;
   $43 = ((($42)) + 1024|0);
   $44 = (($43) + ($41)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $0 = $46;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  }
 }
 $47 = $1;
 $48 = ((($47)) + 18108|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 16;
 $temp = $50;
 $k = 10;
 while(1) {
  $51 = $temp;
  $52 = $k;
  $53 = $2;
  $54 = ((($53)) + 1540|0);
  $55 = (($54) + ($52<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($51>>>0)<($56>>>0);
  $58 = $k;
  if ($57) {
   break;
  }
  $59 = (($58) + 1)|0;
  $k = $59;
 }
 $60 = ($58|0)==(17);
 if ($60) {
  $61 = $1;
  $62 = ((($61)) + 18112|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) - 16)|0;
  HEAP32[$62>>2] = $64;
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $65 = $k;
 $66 = $1;
 $67 = ((($66)) + 18112|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($65|0)>($68|0);
 if ($69) {
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $70 = $1;
 $71 = ((($70)) + 18108|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $k;
 $74 = (32 - ($73))|0;
 $75 = $72 >>> $74;
 $76 = $k;
 $77 = (4720 + ($76<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $75 & $78;
 $80 = $k;
 $81 = $2;
 $82 = ((($81)) + 1612|0);
 $83 = (($82) + ($80<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($79) + ($84))|0;
 $c = $85;
 $86 = $1;
 $87 = ((($86)) + 18108|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $c;
 $90 = $2;
 $91 = ((($90)) + 1280|0);
 $92 = (($91) + ($89)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = (32 - ($94))|0;
 $96 = $88 >>> $95;
 $97 = $c;
 $98 = $2;
 $99 = ((($98)) + 1280|0);
 $100 = (($99) + ($97)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = (4720 + ($102<<2)|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $96 & $104;
 $106 = $c;
 $107 = $2;
 $108 = ((($107)) + 512|0);
 $109 = (($108) + ($106<<1)|0);
 $110 = HEAP16[$109>>1]|0;
 $111 = $110&65535;
 $112 = ($105|0)==($111|0);
 if (!($112)) {
  ___assert_fail((4856|0),(1928|0),1628,(4944|0));
  // unreachable;
 }
 $113 = $k;
 $114 = $1;
 $115 = ((($114)) + 18112|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) - ($113))|0;
 HEAP32[$115>>2] = $117;
 $118 = $k;
 $119 = $1;
 $120 = ((($119)) + 18108|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $121 << $118;
 HEAP32[$120>>2] = $122;
 $123 = $c;
 $124 = $2;
 $125 = ((($124)) + 1024|0);
 $126 = (($125) + ($123)|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $0 = $128;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function __ZL19stbi__jpeg_get_bitsP10stbi__jpegi($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 18112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = $0;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($7);
 }
 $8 = $0;
 $9 = ((($8)) + 18108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $10 << $11;
 $13 = $0;
 $14 = ((($13)) + 18108|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = (32 - ($16))|0;
 $18 = $15 >>> $17;
 $19 = $12 | $18;
 $k = $19;
 $20 = $k;
 $21 = $1;
 $22 = (4720 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 ^ -1;
 $25 = $20 & $24;
 $26 = $0;
 $27 = ((($26)) + 18108|0);
 HEAP32[$27>>2] = $25;
 $28 = $1;
 $29 = (4720 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $k;
 $32 = $31 & $30;
 $k = $32;
 $33 = $1;
 $34 = $0;
 $35 = ((($34)) + 18112|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) - ($33))|0;
 HEAP32[$35>>2] = $37;
 $38 = $k;
 STACKTOP = sp;return ($38|0);
}
function __ZL20stbi__extend_receiveP10stbi__jpegi($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $or$cond = 0, $sgn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 18112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = $0;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($7);
 }
 $8 = $0;
 $9 = ((($8)) + 18108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >> 31;
 $sgn = $11;
 $12 = $0;
 $13 = ((($12)) + 18108|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = $14 << $15;
 $17 = $0;
 $18 = ((($17)) + 18108|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = (32 - ($20))|0;
 $22 = $19 >>> $21;
 $23 = $16 | $22;
 $k = $23;
 $24 = $1;
 $25 = ($24|0)>=(0);
 $26 = $1;
 $27 = ($26|0)<(17);
 $or$cond = $25 & $27;
 if ($or$cond) {
  $28 = $k;
  $29 = $1;
  $30 = (4720 + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 ^ -1;
  $33 = $28 & $32;
  $34 = $0;
  $35 = ((($34)) + 18108|0);
  HEAP32[$35>>2] = $33;
  $36 = $1;
  $37 = (4720 + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $k;
  $40 = $39 & $38;
  $k = $40;
  $41 = $1;
  $42 = $0;
  $43 = ((($42)) + 18112|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) - ($41))|0;
  HEAP32[$43>>2] = $45;
  $46 = $k;
  $47 = $1;
  $48 = (4792 + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $sgn;
  $51 = $50 ^ -1;
  $52 = $49 & $51;
  $53 = (($46) + ($52))|0;
  STACKTOP = sp;return ($53|0);
 } else {
  ___assert_fail((4632|0),(1928|0),1649,(4696|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18stbi__jpeg_get_bitP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 18112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if ($4) {
  $5 = $0;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($5);
 }
 $6 = $0;
 $7 = ((($6)) + 18108|0);
 $8 = HEAP32[$7>>2]|0;
 $k = $8;
 $9 = $0;
 $10 = ((($9)) + 18108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 1;
 HEAP32[$10>>2] = $12;
 $13 = $0;
 $14 = ((($13)) + 18112|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$14>>2] = $16;
 $17 = $k;
 $18 = $17 & -2147483648;
 STACKTOP = sp;return ($18|0);
}
function __ZL16stbi__idct_blockPhiPs($out,$out_stride,$data) {
 $out = $out|0;
 $out_stride = $out_stride|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $dcterm = 0, $i = 0, $o = 0, $p1 = 0, $p15 = 0, $p2 = 0, $p26 = 0, $p3 = 0, $p37 = 0, $p4 = 0, $p48 = 0, $p5 = 0, $p59 = 0, $t0 = 0;
 var $t01 = 0, $t1 = 0, $t12 = 0, $t2 = 0, $t23 = 0, $t3 = 0, $t34 = 0, $v = 0, $val = 0, $x0 = 0, $x010 = 0, $x1 = 0, $x111 = 0, $x2 = 0, $x212 = 0, $x3 = 0, $x313 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp + 120|0;
 $0 = $out;
 $1 = $out_stride;
 $2 = $data;
 $v = $val;
 $3 = $2;
 $d = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = $d;
  $7 = ((($6)) + 16|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $d;
   $12 = ((($11)) + 32|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13 << 16 >> 16;
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = $d;
    $17 = ((($16)) + 48|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 << 16 >> 16;
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = $d;
     $22 = ((($21)) + 64|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = $23 << 16 >> 16;
     $25 = ($24|0)==(0);
     if ($25) {
      $26 = $d;
      $27 = ((($26)) + 80|0);
      $28 = HEAP16[$27>>1]|0;
      $29 = $28 << 16 >> 16;
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = $d;
       $32 = ((($31)) + 96|0);
       $33 = HEAP16[$32>>1]|0;
       $34 = $33 << 16 >> 16;
       $35 = ($34|0)==(0);
       if ($35) {
        $36 = $d;
        $37 = ((($36)) + 112|0);
        $38 = HEAP16[$37>>1]|0;
        $39 = $38 << 16 >> 16;
        $40 = ($39|0)==(0);
        if ($40) {
         $41 = $d;
         $42 = HEAP16[$41>>1]|0;
         $43 = $42 << 16 >> 16;
         $44 = $43 << 2;
         $dcterm = $44;
         $45 = $dcterm;
         $46 = $v;
         $47 = ((($46)) + 224|0);
         HEAP32[$47>>2] = $45;
         $48 = $v;
         $49 = ((($48)) + 192|0);
         HEAP32[$49>>2] = $45;
         $50 = $v;
         $51 = ((($50)) + 160|0);
         HEAP32[$51>>2] = $45;
         $52 = $v;
         $53 = ((($52)) + 128|0);
         HEAP32[$53>>2] = $45;
         $54 = $v;
         $55 = ((($54)) + 96|0);
         HEAP32[$55>>2] = $45;
         $56 = $v;
         $57 = ((($56)) + 64|0);
         HEAP32[$57>>2] = $45;
         $58 = $v;
         $59 = ((($58)) + 32|0);
         HEAP32[$59>>2] = $45;
         $60 = $v;
         HEAP32[$60>>2] = $45;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $61 = $d;
   $62 = ((($61)) + 32|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63 << 16 >> 16;
   $p2 = $64;
   $65 = $d;
   $66 = ((($65)) + 96|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $p3 = $68;
   $69 = $p2;
   $70 = $p3;
   $71 = (($69) + ($70))|0;
   $72 = ($71*2217)|0;
   $p1 = $72;
   $73 = $p1;
   $74 = $p3;
   $75 = Math_imul($74, -7567)|0;
   $76 = (($73) + ($75))|0;
   $t2 = $76;
   $77 = $p1;
   $78 = $p2;
   $79 = ($78*3135)|0;
   $80 = (($77) + ($79))|0;
   $t3 = $80;
   $81 = $d;
   $82 = HEAP16[$81>>1]|0;
   $83 = $82 << 16 >> 16;
   $p2 = $83;
   $84 = $d;
   $85 = ((($84)) + 64|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = $86 << 16 >> 16;
   $p3 = $87;
   $88 = $p2;
   $89 = $p3;
   $90 = (($88) + ($89))|0;
   $91 = $90 << 12;
   $t0 = $91;
   $92 = $p2;
   $93 = $p3;
   $94 = (($92) - ($93))|0;
   $95 = $94 << 12;
   $t1 = $95;
   $96 = $t0;
   $97 = $t3;
   $98 = (($96) + ($97))|0;
   $x0 = $98;
   $99 = $t0;
   $100 = $t3;
   $101 = (($99) - ($100))|0;
   $x3 = $101;
   $102 = $t1;
   $103 = $t2;
   $104 = (($102) + ($103))|0;
   $x1 = $104;
   $105 = $t1;
   $106 = $t2;
   $107 = (($105) - ($106))|0;
   $x2 = $107;
   $108 = $d;
   $109 = ((($108)) + 112|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110 << 16 >> 16;
   $t0 = $111;
   $112 = $d;
   $113 = ((($112)) + 80|0);
   $114 = HEAP16[$113>>1]|0;
   $115 = $114 << 16 >> 16;
   $t1 = $115;
   $116 = $d;
   $117 = ((($116)) + 48|0);
   $118 = HEAP16[$117>>1]|0;
   $119 = $118 << 16 >> 16;
   $t2 = $119;
   $120 = $d;
   $121 = ((($120)) + 16|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122 << 16 >> 16;
   $t3 = $123;
   $124 = $t0;
   $125 = $t2;
   $126 = (($124) + ($125))|0;
   $p3 = $126;
   $127 = $t1;
   $128 = $t3;
   $129 = (($127) + ($128))|0;
   $p4 = $129;
   $130 = $t0;
   $131 = $t3;
   $132 = (($130) + ($131))|0;
   $p1 = $132;
   $133 = $t1;
   $134 = $t2;
   $135 = (($133) + ($134))|0;
   $p2 = $135;
   $136 = $p3;
   $137 = $p4;
   $138 = (($136) + ($137))|0;
   $139 = ($138*4816)|0;
   $p5 = $139;
   $140 = $t0;
   $141 = ($140*1223)|0;
   $t0 = $141;
   $142 = $t1;
   $143 = ($142*8410)|0;
   $t1 = $143;
   $144 = $t2;
   $145 = ($144*12586)|0;
   $t2 = $145;
   $146 = $t3;
   $147 = ($146*6149)|0;
   $t3 = $147;
   $148 = $p5;
   $149 = $p1;
   $150 = Math_imul($149, -3685)|0;
   $151 = (($148) + ($150))|0;
   $p1 = $151;
   $152 = $p5;
   $153 = $p2;
   $154 = Math_imul($153, -10497)|0;
   $155 = (($152) + ($154))|0;
   $p2 = $155;
   $156 = $p3;
   $157 = Math_imul($156, -8034)|0;
   $p3 = $157;
   $158 = $p4;
   $159 = Math_imul($158, -1597)|0;
   $p4 = $159;
   $160 = $p1;
   $161 = $p4;
   $162 = (($160) + ($161))|0;
   $163 = $t3;
   $164 = (($163) + ($162))|0;
   $t3 = $164;
   $165 = $p2;
   $166 = $p3;
   $167 = (($165) + ($166))|0;
   $168 = $t2;
   $169 = (($168) + ($167))|0;
   $t2 = $169;
   $170 = $p2;
   $171 = $p4;
   $172 = (($170) + ($171))|0;
   $173 = $t1;
   $174 = (($173) + ($172))|0;
   $t1 = $174;
   $175 = $p1;
   $176 = $p3;
   $177 = (($175) + ($176))|0;
   $178 = $t0;
   $179 = (($178) + ($177))|0;
   $t0 = $179;
   $180 = $x0;
   $181 = (($180) + 512)|0;
   $x0 = $181;
   $182 = $x1;
   $183 = (($182) + 512)|0;
   $x1 = $183;
   $184 = $x2;
   $185 = (($184) + 512)|0;
   $x2 = $185;
   $186 = $x3;
   $187 = (($186) + 512)|0;
   $x3 = $187;
   $188 = $x0;
   $189 = $t3;
   $190 = (($188) + ($189))|0;
   $191 = $190 >> 10;
   $192 = $v;
   HEAP32[$192>>2] = $191;
   $193 = $x0;
   $194 = $t3;
   $195 = (($193) - ($194))|0;
   $196 = $195 >> 10;
   $197 = $v;
   $198 = ((($197)) + 224|0);
   HEAP32[$198>>2] = $196;
   $199 = $x1;
   $200 = $t2;
   $201 = (($199) + ($200))|0;
   $202 = $201 >> 10;
   $203 = $v;
   $204 = ((($203)) + 32|0);
   HEAP32[$204>>2] = $202;
   $205 = $x1;
   $206 = $t2;
   $207 = (($205) - ($206))|0;
   $208 = $207 >> 10;
   $209 = $v;
   $210 = ((($209)) + 192|0);
   HEAP32[$210>>2] = $208;
   $211 = $x2;
   $212 = $t1;
   $213 = (($211) + ($212))|0;
   $214 = $213 >> 10;
   $215 = $v;
   $216 = ((($215)) + 64|0);
   HEAP32[$216>>2] = $214;
   $217 = $x2;
   $218 = $t1;
   $219 = (($217) - ($218))|0;
   $220 = $219 >> 10;
   $221 = $v;
   $222 = ((($221)) + 160|0);
   HEAP32[$222>>2] = $220;
   $223 = $x3;
   $224 = $t0;
   $225 = (($223) + ($224))|0;
   $226 = $225 >> 10;
   $227 = $v;
   $228 = ((($227)) + 96|0);
   HEAP32[$228>>2] = $226;
   $229 = $x3;
   $230 = $t0;
   $231 = (($229) - ($230))|0;
   $232 = $231 >> 10;
   $233 = $v;
   $234 = ((($233)) + 128|0);
   HEAP32[$234>>2] = $232;
  }
  $235 = $i;
  $236 = (($235) + 1)|0;
  $i = $236;
  $237 = $d;
  $238 = ((($237)) + 2|0);
  $d = $238;
  $239 = $v;
  $240 = ((($239)) + 4|0);
  $v = $240;
 }
 $i = 0;
 $v = $val;
 $241 = $0;
 $o = $241;
 while(1) {
  $242 = $i;
  $243 = ($242|0)<(8);
  if (!($243)) {
   break;
  }
  $244 = $v;
  $245 = ((($244)) + 8|0);
  $246 = HEAP32[$245>>2]|0;
  $p26 = $246;
  $247 = $v;
  $248 = ((($247)) + 24|0);
  $249 = HEAP32[$248>>2]|0;
  $p37 = $249;
  $250 = $p26;
  $251 = $p37;
  $252 = (($250) + ($251))|0;
  $253 = ($252*2217)|0;
  $p15 = $253;
  $254 = $p15;
  $255 = $p37;
  $256 = Math_imul($255, -7567)|0;
  $257 = (($254) + ($256))|0;
  $t23 = $257;
  $258 = $p15;
  $259 = $p26;
  $260 = ($259*3135)|0;
  $261 = (($258) + ($260))|0;
  $t34 = $261;
  $262 = $v;
  $263 = HEAP32[$262>>2]|0;
  $p26 = $263;
  $264 = $v;
  $265 = ((($264)) + 16|0);
  $266 = HEAP32[$265>>2]|0;
  $p37 = $266;
  $267 = $p26;
  $268 = $p37;
  $269 = (($267) + ($268))|0;
  $270 = $269 << 12;
  $t01 = $270;
  $271 = $p26;
  $272 = $p37;
  $273 = (($271) - ($272))|0;
  $274 = $273 << 12;
  $t12 = $274;
  $275 = $t01;
  $276 = $t34;
  $277 = (($275) + ($276))|0;
  $x010 = $277;
  $278 = $t01;
  $279 = $t34;
  $280 = (($278) - ($279))|0;
  $x313 = $280;
  $281 = $t12;
  $282 = $t23;
  $283 = (($281) + ($282))|0;
  $x111 = $283;
  $284 = $t12;
  $285 = $t23;
  $286 = (($284) - ($285))|0;
  $x212 = $286;
  $287 = $v;
  $288 = ((($287)) + 28|0);
  $289 = HEAP32[$288>>2]|0;
  $t01 = $289;
  $290 = $v;
  $291 = ((($290)) + 20|0);
  $292 = HEAP32[$291>>2]|0;
  $t12 = $292;
  $293 = $v;
  $294 = ((($293)) + 12|0);
  $295 = HEAP32[$294>>2]|0;
  $t23 = $295;
  $296 = $v;
  $297 = ((($296)) + 4|0);
  $298 = HEAP32[$297>>2]|0;
  $t34 = $298;
  $299 = $t01;
  $300 = $t23;
  $301 = (($299) + ($300))|0;
  $p37 = $301;
  $302 = $t12;
  $303 = $t34;
  $304 = (($302) + ($303))|0;
  $p48 = $304;
  $305 = $t01;
  $306 = $t34;
  $307 = (($305) + ($306))|0;
  $p15 = $307;
  $308 = $t12;
  $309 = $t23;
  $310 = (($308) + ($309))|0;
  $p26 = $310;
  $311 = $p37;
  $312 = $p48;
  $313 = (($311) + ($312))|0;
  $314 = ($313*4816)|0;
  $p59 = $314;
  $315 = $t01;
  $316 = ($315*1223)|0;
  $t01 = $316;
  $317 = $t12;
  $318 = ($317*8410)|0;
  $t12 = $318;
  $319 = $t23;
  $320 = ($319*12586)|0;
  $t23 = $320;
  $321 = $t34;
  $322 = ($321*6149)|0;
  $t34 = $322;
  $323 = $p59;
  $324 = $p15;
  $325 = Math_imul($324, -3685)|0;
  $326 = (($323) + ($325))|0;
  $p15 = $326;
  $327 = $p59;
  $328 = $p26;
  $329 = Math_imul($328, -10497)|0;
  $330 = (($327) + ($329))|0;
  $p26 = $330;
  $331 = $p37;
  $332 = Math_imul($331, -8034)|0;
  $p37 = $332;
  $333 = $p48;
  $334 = Math_imul($333, -1597)|0;
  $p48 = $334;
  $335 = $p15;
  $336 = $p48;
  $337 = (($335) + ($336))|0;
  $338 = $t34;
  $339 = (($338) + ($337))|0;
  $t34 = $339;
  $340 = $p26;
  $341 = $p37;
  $342 = (($340) + ($341))|0;
  $343 = $t23;
  $344 = (($343) + ($342))|0;
  $t23 = $344;
  $345 = $p26;
  $346 = $p48;
  $347 = (($345) + ($346))|0;
  $348 = $t12;
  $349 = (($348) + ($347))|0;
  $t12 = $349;
  $350 = $p15;
  $351 = $p37;
  $352 = (($350) + ($351))|0;
  $353 = $t01;
  $354 = (($353) + ($352))|0;
  $t01 = $354;
  $355 = $x010;
  $356 = (($355) + 16842752)|0;
  $x010 = $356;
  $357 = $x111;
  $358 = (($357) + 16842752)|0;
  $x111 = $358;
  $359 = $x212;
  $360 = (($359) + 16842752)|0;
  $x212 = $360;
  $361 = $x313;
  $362 = (($361) + 16842752)|0;
  $x313 = $362;
  $363 = $x010;
  $364 = $t34;
  $365 = (($363) + ($364))|0;
  $366 = $365 >> 17;
  $367 = (__ZL11stbi__clampi($366)|0);
  $368 = $o;
  HEAP8[$368>>0] = $367;
  $369 = $x010;
  $370 = $t34;
  $371 = (($369) - ($370))|0;
  $372 = $371 >> 17;
  $373 = (__ZL11stbi__clampi($372)|0);
  $374 = $o;
  $375 = ((($374)) + 7|0);
  HEAP8[$375>>0] = $373;
  $376 = $x111;
  $377 = $t23;
  $378 = (($376) + ($377))|0;
  $379 = $378 >> 17;
  $380 = (__ZL11stbi__clampi($379)|0);
  $381 = $o;
  $382 = ((($381)) + 1|0);
  HEAP8[$382>>0] = $380;
  $383 = $x111;
  $384 = $t23;
  $385 = (($383) - ($384))|0;
  $386 = $385 >> 17;
  $387 = (__ZL11stbi__clampi($386)|0);
  $388 = $o;
  $389 = ((($388)) + 6|0);
  HEAP8[$389>>0] = $387;
  $390 = $x212;
  $391 = $t12;
  $392 = (($390) + ($391))|0;
  $393 = $392 >> 17;
  $394 = (__ZL11stbi__clampi($393)|0);
  $395 = $o;
  $396 = ((($395)) + 2|0);
  HEAP8[$396>>0] = $394;
  $397 = $x212;
  $398 = $t12;
  $399 = (($397) - ($398))|0;
  $400 = $399 >> 17;
  $401 = (__ZL11stbi__clampi($400)|0);
  $402 = $o;
  $403 = ((($402)) + 5|0);
  HEAP8[$403>>0] = $401;
  $404 = $x313;
  $405 = $t01;
  $406 = (($404) + ($405))|0;
  $407 = $406 >> 17;
  $408 = (__ZL11stbi__clampi($407)|0);
  $409 = $o;
  $410 = ((($409)) + 3|0);
  HEAP8[$410>>0] = $408;
  $411 = $x313;
  $412 = $t01;
  $413 = (($411) - ($412))|0;
  $414 = $413 >> 17;
  $415 = (__ZL11stbi__clampi($414)|0);
  $416 = $o;
  $417 = ((($416)) + 4|0);
  HEAP8[$417>>0] = $415;
  $418 = $i;
  $419 = (($418) + 1)|0;
  $i = $419;
  $420 = $v;
  $421 = ((($420)) + 32|0);
  $v = $421;
  $422 = $1;
  $423 = $o;
  $424 = (($423) + ($422)|0);
  $o = $424;
 }
 STACKTOP = sp;return;
}
function __ZL22stbi__YCbCr_to_RGB_rowPhPKhS1_S1_ii($out,$y,$pcb,$pcr,$count,$step) {
 $out = $out|0;
 $y = $y|0;
 $pcb = $pcb|0;
 $pcr = $pcr|0;
 $count = $count|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $b = 0, $cb = 0, $cr = 0, $g = 0, $i = 0, $r = 0, $y_fixed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $y;
 $2 = $pcb;
 $3 = $pcr;
 $4 = $count;
 $5 = $step;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $4;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $1;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 << 20;
  $15 = (($14) + 524288)|0;
  $y_fixed = $15;
  $16 = $i;
  $17 = $3;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($20) - 128)|0;
  $cr = $21;
  $22 = $i;
  $23 = $2;
  $24 = (($23) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($26) - 128)|0;
  $cb = $27;
  $28 = $y_fixed;
  $29 = $cr;
  $30 = Math_imul($29, 1470208)|0;
  $31 = (($28) + ($30))|0;
  $r = $31;
  $32 = $y_fixed;
  $33 = $cr;
  $34 = Math_imul($33, -748800)|0;
  $35 = (($32) + ($34))|0;
  $36 = $cb;
  $37 = Math_imul($36, -360960)|0;
  $38 = $37 & -65536;
  $39 = (($35) + ($38))|0;
  $g = $39;
  $40 = $y_fixed;
  $41 = $cb;
  $42 = Math_imul($41, 1858048)|0;
  $43 = (($40) + ($42))|0;
  $b = $43;
  $44 = $r;
  $45 = $44 >> 20;
  $r = $45;
  $46 = $g;
  $47 = $46 >> 20;
  $g = $47;
  $48 = $b;
  $49 = $48 >> 20;
  $b = $49;
  $50 = $r;
  $51 = ($50>>>0)>(255);
  do {
   if ($51) {
    $52 = $r;
    $53 = ($52|0)<(0);
    if ($53) {
     $r = 0;
     break;
    } else {
     $r = 255;
     break;
    }
   }
  } while(0);
  $54 = $g;
  $55 = ($54>>>0)>(255);
  do {
   if ($55) {
    $56 = $g;
    $57 = ($56|0)<(0);
    if ($57) {
     $g = 0;
     break;
    } else {
     $g = 255;
     break;
    }
   }
  } while(0);
  $58 = $b;
  $59 = ($58>>>0)>(255);
  do {
   if ($59) {
    $60 = $b;
    $61 = ($60|0)<(0);
    if ($61) {
     $b = 0;
     break;
    } else {
     $b = 255;
     break;
    }
   }
  } while(0);
  $62 = $r;
  $63 = $62&255;
  $64 = $0;
  HEAP8[$64>>0] = $63;
  $65 = $g;
  $66 = $65&255;
  $67 = $0;
  $68 = ((($67)) + 1|0);
  HEAP8[$68>>0] = $66;
  $69 = $b;
  $70 = $69&255;
  $71 = $0;
  $72 = ((($71)) + 2|0);
  HEAP8[$72>>0] = $70;
  $73 = $0;
  $74 = ((($73)) + 3|0);
  HEAP8[$74>>0] = -1;
  $75 = $5;
  $76 = $0;
  $77 = (($76) + ($75)|0);
  $0 = $77;
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 STACKTOP = sp;return;
}
function __ZL23stbi__resample_row_hv_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $i = 0;
 var $t0 = 0, $t1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $in_near;
 $3 = $in_far;
 $4 = $w;
 $5 = $hs;
 $6 = $4;
 $7 = ($6|0)==(1);
 $8 = $2;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10*3)|0;
 $12 = $3;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (($11) + ($14))|0;
 if ($7) {
  $16 = (($15) + 2)|0;
  $17 = $16 >> 2;
  $18 = $17&255;
  $19 = $1;
  $20 = ((($19)) + 1|0);
  HEAP8[$20>>0] = $18;
  $21 = $1;
  HEAP8[$21>>0] = $18;
  $22 = $1;
  $0 = $22;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $t1 = $15;
 $23 = $t1;
 $24 = (($23) + 2)|0;
 $25 = $24 >> 2;
 $26 = $25&255;
 $27 = $1;
 HEAP8[$27>>0] = $26;
 $i = 1;
 while(1) {
  $28 = $i;
  $29 = $4;
  $30 = ($28|0)<($29|0);
  $31 = $t1;
  if (!($30)) {
   break;
  }
  $t0 = $31;
  $32 = $i;
  $33 = $2;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36*3)|0;
  $38 = $i;
  $39 = $3;
  $40 = (($39) + ($38)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = (($37) + ($42))|0;
  $t1 = $43;
  $44 = $t0;
  $45 = ($44*3)|0;
  $46 = $t1;
  $47 = (($45) + ($46))|0;
  $48 = (($47) + 8)|0;
  $49 = $48 >> 4;
  $50 = $49&255;
  $51 = $i;
  $52 = $51<<1;
  $53 = (($52) - 1)|0;
  $54 = $1;
  $55 = (($54) + ($53)|0);
  HEAP8[$55>>0] = $50;
  $56 = $t1;
  $57 = ($56*3)|0;
  $58 = $t0;
  $59 = (($57) + ($58))|0;
  $60 = (($59) + 8)|0;
  $61 = $60 >> 4;
  $62 = $61&255;
  $63 = $i;
  $64 = $63<<1;
  $65 = $1;
  $66 = (($65) + ($64)|0);
  HEAP8[$66>>0] = $62;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $69 = (($31) + 2)|0;
 $70 = $69 >> 2;
 $71 = $70&255;
 $72 = $4;
 $73 = $72<<1;
 $74 = (($73) - 1)|0;
 $75 = $1;
 $76 = (($75) + ($74)|0);
 HEAP8[$76>>0] = $71;
 $77 = $1;
 $0 = $77;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function __ZL11stbi__clampi($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $1;
 $3 = ($2>>>0)>(255);
 do {
  if ($3) {
   $4 = $1;
   $5 = ($4|0)<(0);
   if ($5) {
    $0 = 0;
    break;
   }
   $6 = $1;
   $7 = ($6|0)>(255);
   if ($7) {
    $0 = -1;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $8 = $1;
  $9 = $8&255;
  $0 = $9;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function __ZL16stbi__stdio_readPvPci($user,$data,$size) {
 $user = $user|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user;
 $1 = $data;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 $6 = (_fread(($3|0),1,($4|0),($5|0))|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL16stbi__stdio_skipPvi($user,$n) {
 $user = $user|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 (_fseek(($2|0),($3|0),1)|0);
 STACKTOP = sp;return;
}
function __ZL15stbi__stdio_eofPv($user) {
 $user = $user|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user;
 $1 = $0;
 $2 = (_feof(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((5488|0),(37|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[5480>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(5496,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(38,(5552|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(38,(5592|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(39);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(40)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[1266]|0;HEAP32[1266] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,5160,5216,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 31]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 31]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 31]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 15]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 15]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 31]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 31]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 31]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,5160,5328,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[5760>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(5864,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[5088>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 31](5088,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[5760>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 31]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(5768,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[5760>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(5816,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(5904,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((5480|0),(41|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(5648,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[5480>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(5704,$vararg_buffer);
  // unreachable;
 }
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0;
 var $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $282 = 0;$283 = 0;
  tempRet0 = ($282);
  return ($283|0);
 }
 $3 = ((($f)) + 4|0);
 $4 = ((($f)) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa135 = $13;
   break;
  }
 }
 $16 = ($$lcssa135|0)==(45);
 do {
  if ((($$lcssa135|0) == 43) | (($$lcssa135|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = ((($18)) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa135;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = ((($29)) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$123 = 8;$c$124 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = ((($39)) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (5936 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = ((($52)) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    if ($51) {
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = ((($55)) + -1|0);
    HEAP32[$3>>2] = $56;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   } else {
    $$123 = 16;$c$124 = $46;
    label = 46;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (5936 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = ((($63)) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$082 = 0;
    while(1) {
     $69 = ($x$082*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = ((($72)) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $82 = $80 & $81;
     if ($82) {
      $71 = $79;$x$082 = $70;
     } else {
      $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $284 = $$lcssa134;$285 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $284 = 0;$285 = 0;$c$2$lcssa = $c$1;
   }
   $83 = (($c$2$lcssa) + -48)|0;
   $84 = ($83>>>0)<(10);
   if ($84) {
    $85 = $284;$86 = $285;$89 = $83;$c$371 = $c$2$lcssa;
    while(1) {
     $87 = (___muldi3(($85|0),($86|0),10,0)|0);
     $88 = tempRet0;
     $90 = ($89|0)<(0);
     $91 = $90 << 31 >> 31;
     $92 = $89 ^ -1;
     $93 = $91 ^ -1;
     $94 = ($88>>>0)>($93>>>0);
     $95 = ($87>>>0)>($92>>>0);
     $96 = ($88|0)==($93|0);
     $97 = $96 & $95;
     $98 = $94 | $97;
     if ($98) {
      $$lcssa = $89;$286 = $85;$287 = $86;$c$3$lcssa = $c$371;
      break;
     }
     $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
     $100 = tempRet0;
     $101 = HEAP32[$3>>2]|0;
     $102 = HEAP32[$4>>2]|0;
     $103 = ($101>>>0)<($102>>>0);
     if ($103) {
      $104 = ((($101)) + 1|0);
      HEAP32[$3>>2] = $104;
      $105 = HEAP8[$101>>0]|0;
      $106 = $105&255;
      $c$3$be = $106;
     } else {
      $107 = (___shgetc($f)|0);
      $c$3$be = $107;
     }
     $108 = (($c$3$be) + -48)|0;
     $109 = ($108>>>0)<(10);
     $110 = ($100>>>0)<(429496729);
     $111 = ($99>>>0)<(2576980378);
     $112 = ($100|0)==(429496729);
     $113 = $112 & $111;
     $114 = $110 | $113;
     $or$cond7 = $109 & $114;
     if ($or$cond7) {
      $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
     } else {
      $$lcssa = $108;$286 = $99;$287 = $100;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $115 = ($$lcssa>>>0)>(9);
    if ($115) {
     $255 = $287;$257 = $286;
    } else {
     $$122 = 10;$288 = $286;$289 = $287;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $255 = $285;$257 = $284;
   }
  } else {
   $$123 = $$1;$c$124 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $116 = (($$123) + -1)|0;
   $117 = $116 & $$123;
   $118 = ($117|0)==(0);
   if ($118) {
    $123 = ($$123*23)|0;
    $124 = $123 >>> 5;
    $125 = $124 & 7;
    $126 = (6200 + ($125)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 << 24 >> 24;
    $$sum1445 = (($c$124) + 1)|0;
    $129 = (5936 + ($$sum1445)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = ($131>>>0)<($$123>>>0);
    if ($132) {
     $135 = $131;$x$146 = 0;
     while(1) {
      $133 = $x$146 << $128;
      $134 = $135 | $133;
      $136 = HEAP32[$3>>2]|0;
      $137 = HEAP32[$4>>2]|0;
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $139 = ((($136)) + 1|0);
       HEAP32[$3>>2] = $139;
       $140 = HEAP8[$136>>0]|0;
       $141 = $140&255;
       $c$4$be = $141;
      } else {
       $142 = (___shgetc($f)|0);
       $c$4$be = $142;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $143 = (5936 + ($$sum14)|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = $144&255;
      $146 = ($145>>>0)<($$123>>>0);
      $147 = ($134>>>0)<(134217728);
      $148 = $147 & $146;
      if ($148) {
       $135 = $145;$x$146 = $134;
      } else {
       $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
    }
    $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
    $150 = tempRet0;
    $151 = $152&255;
    $153 = ($151>>>0)>=($$123>>>0);
    $155 = ($154>>>0)>($150>>>0);
    $157 = ($156>>>0)>($149>>>0);
    $158 = ($154|0)==($150|0);
    $159 = $158 & $157;
    $160 = $155 | $159;
    $or$cond40 = $153 | $160;
    if ($or$cond40) {
     $$122 = $$123;$288 = $156;$289 = $154;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $156;$162 = $154;$166 = $152;
    }
    while(1) {
     $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
     $164 = tempRet0;
     $165 = $166&255;
     $167 = $165 | $163;
     $168 = HEAP32[$3>>2]|0;
     $169 = HEAP32[$4>>2]|0;
     $170 = ($168>>>0)<($169>>>0);
     if ($170) {
      $171 = ((($168)) + 1|0);
      HEAP32[$3>>2] = $171;
      $172 = HEAP8[$168>>0]|0;
      $173 = $172&255;
      $c$5$be = $173;
     } else {
      $174 = (___shgetc($f)|0);
      $c$5$be = $174;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $175 = (5936 + ($$sum15)|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176&255;
     $178 = ($177>>>0)>=($$123>>>0);
     $179 = ($164>>>0)>($150>>>0);
     $180 = ($167>>>0)>($149>>>0);
     $181 = ($164|0)==($150|0);
     $182 = $181 & $180;
     $183 = $179 | $182;
     $or$cond = $178 | $183;
     if ($or$cond) {
      $$122 = $$123;$288 = $167;$289 = $164;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $161 = $167;$162 = $164;$166 = $176;
     }
    }
   }
   $$sum1865 = (($c$124) + 1)|0;
   $119 = (5936 + ($$sum1865)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = ($121>>>0)<($$123>>>0);
   if ($122) {
    $186 = $121;$x$266 = 0;
    while(1) {
     $184 = Math_imul($x$266, $$123)|0;
     $185 = (($186) + ($184))|0;
     $187 = HEAP32[$3>>2]|0;
     $188 = HEAP32[$4>>2]|0;
     $189 = ($187>>>0)<($188>>>0);
     if ($189) {
      $190 = ((($187)) + 1|0);
      HEAP32[$3>>2] = $190;
      $191 = HEAP8[$187>>0]|0;
      $192 = $191&255;
      $c$6$be = $192;
     } else {
      $193 = (___shgetc($f)|0);
      $c$6$be = $193;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $194 = (5936 + ($$sum18)|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = ($196>>>0)<($$123>>>0);
     $198 = ($185>>>0)<(119304647);
     $199 = $198 & $197;
     if ($199) {
      $186 = $196;$x$266 = $185;
     } else {
      $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $201 = $$lcssa133;$290 = $$lcssa132;$291 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;$290 = 0;$291 = 0;$c$6$lcssa = $c$124;
   }
   $200 = $201&255;
   $202 = ($200>>>0)<($$123>>>0);
   if ($202) {
    $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
    $204 = tempRet0;
    $205 = $291;$207 = $290;$215 = $201;$c$753 = $c$6$lcssa;
    while(1) {
     $206 = ($205>>>0)>($204>>>0);
     $208 = ($207>>>0)>($203>>>0);
     $209 = ($205|0)==($204|0);
     $210 = $209 & $208;
     $211 = $206 | $210;
     if ($211) {
      $$122 = $$123;$288 = $207;$289 = $205;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
     $213 = tempRet0;
     $214 = $215&255;
     $216 = $214 ^ -1;
     $217 = ($213>>>0)>(4294967295);
     $218 = ($212>>>0)>($216>>>0);
     $219 = ($213|0)==(-1);
     $220 = $219 & $218;
     $221 = $217 | $220;
     if ($221) {
      $$122 = $$123;$288 = $207;$289 = $205;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
     $223 = tempRet0;
     $224 = HEAP32[$3>>2]|0;
     $225 = HEAP32[$4>>2]|0;
     $226 = ($224>>>0)<($225>>>0);
     if ($226) {
      $227 = ((($224)) + 1|0);
      HEAP32[$3>>2] = $227;
      $228 = HEAP8[$224>>0]|0;
      $229 = $228&255;
      $c$7$be = $229;
     } else {
      $230 = (___shgetc($f)|0);
      $c$7$be = $230;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $231 = (5936 + ($$sum19)|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = ($233>>>0)<($$123>>>0);
     if ($234) {
      $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
     } else {
      $$122 = $$123;$288 = $222;$289 = $223;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$122 = $$123;$288 = $290;$289 = $291;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum16 = (($c$8) + 1)|0;
  $235 = (5936 + ($$sum16)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = ($237>>>0)<($$122>>>0);
  if ($238) {
   while(1) {
    $239 = HEAP32[$3>>2]|0;
    $240 = HEAP32[$4>>2]|0;
    $241 = ($239>>>0)<($240>>>0);
    if ($241) {
     $242 = ((($239)) + 1|0);
     HEAP32[$3>>2] = $242;
     $243 = HEAP8[$239>>0]|0;
     $244 = $243&255;
     $c$9$be = $244;
    } else {
     $245 = (___shgetc($f)|0);
     $c$9$be = $245;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $246 = (5936 + ($$sum17)|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = ($248>>>0)<($$122>>>0);
    if (!($249)) {
     break;
    }
   }
   $250 = (___errno_location()|0);
   HEAP32[$250>>2] = 34;
   $255 = $1;$257 = $0;
  } else {
   $255 = $289;$257 = $288;
  }
 }
 $251 = HEAP32[$4>>2]|0;
 $252 = ($251|0)==(0|0);
 if (!($252)) {
  $253 = HEAP32[$3>>2]|0;
  $254 = ((($253)) + -1|0);
  HEAP32[$3>>2] = $254;
 }
 $256 = ($255>>>0)<($1>>>0);
 $258 = ($257>>>0)<($0>>>0);
 $259 = ($255|0)==($1|0);
 $260 = $259 & $258;
 $261 = $256 | $260;
 if (!($261)) {
  $262 = $0 & 1;
  $263 = ($262|0)!=(0);
  $264 = (0)!=(0);
  $265 = $263 | $264;
  $266 = ($neg$0|0)!=(0);
  $or$cond12 = $265 | $266;
  if (!($or$cond12)) {
   $267 = (___errno_location()|0);
   HEAP32[$267>>2] = 34;
   $268 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $269 = tempRet0;
   $282 = $269;$283 = $268;
   tempRet0 = ($282);
   return ($283|0);
  }
  $270 = ($255>>>0)>($1>>>0);
  $271 = ($257>>>0)>($0>>>0);
  $272 = ($255|0)==($1|0);
  $273 = $272 & $271;
  $274 = $270 | $273;
  if ($274) {
   $275 = (___errno_location()|0);
   HEAP32[$275>>2] = 34;
   $282 = $1;$283 = $0;
   tempRet0 = ($282);
   return ($283|0);
  }
 }
 $276 = ($neg$0|0)<(0);
 $277 = $276 << 31 >> 31;
 $278 = $257 ^ $neg$0;
 $279 = $255 ^ $277;
 $280 = (_i64Subtract(($278|0),($279|0),($neg$0|0),($277|0))|0);
 $281 = tempRet0;
 $282 = $281;$283 = $280;
 tempRet0 = ($282);
 return ($283|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
  return;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
  return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
    return ($$0|0);
   }
   $40 = $6&255;
   HEAP8[$36>>0] = $40;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = ((($f)) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _exp2($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__x = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1083174911);
 do {
  if ($3) {
   $4 = ($2>>>0)>(1083179007);
   $5 = ($1|0)>(-1);
   $6 = ($0>>>0)>(4294967295);
   $7 = ($1|0)==(-1);
   $8 = $7 & $6;
   $9 = $5 | $8;
   $or$cond = $9 & $4;
   if ($or$cond) {
    $10 = $x * 8.9884656743115795E+307;
    $$0 = $10;
    STACKTOP = sp;return (+$$0);
   }
   $11 = ($2>>>0)>(2146435071);
   if ($11) {
    $12 = -1.0 / $x;
    $$0 = $12;
    STACKTOP = sp;return (+$$0);
   }
   $13 = ($1|0)<(0);
   if ($13) {
    $14 = !($x <= -1075.0);
    if ($14) {
     $17 = $x + -4503599627370496.0;
     $18 = $17 + 4503599627370496.0;
     $19 = $18 != $x;
     if (!($19)) {
      break;
     }
     $20 = -1.4012984643248171E-45 / $x;
     $21 = $20;
     $__x = $21;
     break;
    } else {
     $15 = -1.4012984643248171E-45 / $x;
     $16 = $15;
     $__x = $16;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
   }
  } else {
   $22 = ($2>>>0)<(1016070144);
   if ($22) {
    $23 = $x + 1.0;
    $$0 = $23;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 $24 = $x + 26388279066624.0;
 HEAPF64[tempDoublePtr>>3] = $24;$25 = HEAP32[tempDoublePtr>>2]|0;
 $26 = HEAP32[tempDoublePtr+4>>2]|0;
 $27 = (($25) + 128)|0;
 $28 = $27 & -256;
 $29 = (($28|0) / 256)&-1;
 $30 = $24 + -26388279066624.0;
 $31 = $x - $30;
 $32 = $27 << 1;
 $33 = $32 & 510;
 $34 = (6216 + ($33<<3)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $33 | 1;
 $37 = (6216 + ($36<<3)|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $31 - $38;
 $40 = $35 * $39;
 $41 = $39 * 0.0013333559164630223;
 $42 = $41 + 0.0096181298421260663;
 $43 = $39 * $42;
 $44 = $43 + 0.055504108664821403;
 $45 = $39 * $44;
 $46 = $45 + 0.2402265069591;
 $47 = $39 * $46;
 $48 = $47 + 0.69314718055994529;
 $49 = $40 * $48;
 $50 = $35 + $49;
 $51 = (+_scalbn($50,$29));
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _round($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $__x = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = ($4>>>0)>(1074);
 if ($5) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($1|0)<(0);
 $7 = -$x;
 $$x = $6 ? $7 : $x;
 $8 = ($4>>>0)<(1022);
 $9 = $$x + 4503599627370496.0;
 if ($8) {
  $__x = $9;
  $10 = $x * 0.0;
  $$0 = $10;
  STACKTOP = sp;return (+$$0);
 }
 $11 = $9 + -4503599627370496.0;
 $12 = $11 - $$x;
 $13 = $12 > 0.5;
 if ($13) {
  $14 = $$x + $12;
  $15 = $14 + -1.0;
  $y$0 = $15;
 } else {
  $16 = !($12 <= -0.5);
  $17 = $$x + $12;
  if ($16) {
   $y$0 = $17;
  } else {
   $18 = $17 + 1.0;
   $y$0 = $18;
  }
 }
 $19 = -$y$0;
 $$y$0 = $6 ? $19 : $y$0;
 $$0 = $$y$0;
 STACKTOP = sp;return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 10312;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 10312;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 10312;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 31]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 31]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 31]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=10320; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = ((($f$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = ((($s)) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = ((($f$i)) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = ((($f$i)) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return ($6|0);
 }
 $9 = ((($f$i)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$08|0)!=(0);
    $or$cond = $5 & $4;
    $7 = ($6<<24>>24)==($3<<24>>24);
    $or$cond4 = $7 & $or$cond;
    if (!($or$cond4)) {
     $13 = $6;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = ((($l$06)) + 1|0);
    $9 = ((($r$07)) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$100 = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0;
 var $$412184$i = 0, $$5196$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa275$i = 0, $$lcssa443 = 0, $$lcssa448 = 0, $$lcssa449 = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa452 = 0, $$lcssa454 = 0, $$lcssa455 = 0;
 var $$lcssa461 = 0, $$lcssa465 = 0, $$lcssa467 = 0, $$lcssa470 = 0, $$lcssa471 = 0, $$lcssa474 = 0.0, $$lcssa475 = 0, $$lcssa478 = 0, $$lcssa482 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0;
 var $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre272 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
 var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
 var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0.0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1164$phi = 0;
 var $1165 = 0, $1165$phi = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0.0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0;
 var $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0.0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0.0, $776 = 0.0, $777 = 0, $778 = 0.0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0;
 var $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0;
 var $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0, $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0;
 var $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0;
 var $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0;
 var $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0;
 var $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0;
 var $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0;
 var $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0115 = 0;
 var $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt87$lcssa = 0, $fmt87167 = 0, $fmt88 = 0, $fmt89 = 0, $fmt90 = 0, $fmt92 = 0, $fmt92$lcssa446 = 0, $fmt93 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1191 = 0, $i$1222$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2209$i = 0, $i$3164 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond331 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa447 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1164 = 0;$1165 = 0;$cnt$0 = 0;$fmt89 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt89>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1166 = $22;$fmt88 = $fmt89;
  }
  while(1) {
   if ((($1166<<24>>24) == 0)) {
    $fmt87$lcssa = $fmt88;$z$0$lcssa = $fmt88;
    break;
   } else if ((($1166<<24>>24) == 37)) {
    $fmt87167 = $fmt88;$z$0168 = $fmt88;
    label = 9;
    break;
   }
   $24 = ((($fmt88)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1166 = $$pre;$fmt88 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt87167)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt87$lcssa = $fmt87167;$z$0$lcssa = $z$0168;
      break L12;
     }
     $28 = ((($z$0168)) + 1|0);
     $29 = ((($fmt87167)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt87167 = $29;$z$0168 = $28;
      label = 9;
     } else {
      $fmt87$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt89;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt89,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt89|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1165$phi = $1165;$1164$phi = $1164;$cnt$0 = $cnt$1;$fmt89 = $fmt87$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1165 = $1165$phi;$1164 = $1164$phi;
   continue;
  }
  $36 = ((($fmt87$lcssa)) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = ((($fmt87$lcssa)) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   $42 = ((($fmt87$lcssa)) + 3|0);
   $$100 = $41 ? $42 : $36;
   $$l10n$0 = $41 ? 1 : $l10n$0;
   $isdigittmp$ = $41 ? $isdigittmp : -1;
   $$pre272 = HEAP8[$$100>>0]|0;
   $44 = $$pre272;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L24: do {
   if ($46) {
    $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $62 = $53;$fl$0115 = $fl$0175;$storemerge8113 = $storemerge8174;
      break L24;
     }
     $52 = $53 << 24 >> 24;
     $54 = (($52) + -32)|0;
     $55 = 1 << $54;
     $56 = $55 | $fl$0175;
     $57 = ((($storemerge8174)) + 1|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58 << 24 >> 24;
     $60 = $59 & -32;
     $61 = ($60|0)==(32);
     if ($61) {
      $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
     } else {
      $62 = $58;$fl$0115 = $56;$storemerge8113 = $57;
      break;
     }
    }
   } else {
    $62 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
   }
  } while(0);
  $63 = ($62<<24>>24)==(42);
  do {
   if ($63) {
    $64 = ((($storemerge8113)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $isdigittmp11 = (($66) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $67 = ((($storemerge8113)) + 2|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)==(36);
     if ($69) {
      $70 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$70>>2] = 10;
      $71 = HEAP8[$64>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (($72) + -48)|0;
      $74 = (($nl_arg) + ($73<<3)|0);
      $75 = $74;
      $76 = $75;
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 4)|0;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($storemerge8113)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $82 = ($l10n$1|0)==(0);
     if (!($82)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0115;$fmt90 = $64;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $83 = $arglist_current;
     $84 = ((0) + 4|0);
     $expanded64 = $84;
     $expanded = (($expanded64) - 1)|0;
     $85 = (($83) + ($expanded))|0;
     $86 = ((0) + 4|0);
     $expanded68 = $86;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $87 = $85 & $expanded66;
     $88 = $87;
     $89 = HEAP32[$88>>2]|0;
     $arglist_next = ((($88)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $64;$w$0 = $89;
    }
    $90 = ($w$0|0)<(0);
    if ($90) {
     $91 = $fl$0115 | 8192;
     $92 = (0 - ($w$0))|0;
     $fl$1 = $91;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $92;
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $93 = $62 << 24 >> 24;
    $isdigittmp1$i = (($93) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $97 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $94 = ($i$03$i*10)|0;
      $95 = (($94) + ($isdigittmp4$i))|0;
      $96 = ((($97)) + 1|0);
      $98 = HEAP8[$96>>0]|0;
      $99 = $98 << 24 >> 24;
      $isdigittmp$i = (($99) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $97 = $96;$i$03$i = $95;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $95;$$lcssa443 = $96;
       break;
      }
     }
     $100 = ($$lcssa|0)<(0);
     if ($100) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $fl$1 = $fl$0115;$fmt90 = $$lcssa443;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $101 = HEAP8[$fmt90>>0]|0;
  $102 = ($101<<24>>24)==(46);
  L45: do {
   if ($102) {
    $103 = ((($fmt90)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = ($104<<24>>24)==(42);
    if (!($105)) {
     $132 = $104 << 24 >> 24;
     $isdigittmp1$i27 = (($132) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $136 = $103;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $fmt93 = $103;$p$0 = 0;
      break;
     }
     while(1) {
      $133 = ($i$03$i30*10)|0;
      $134 = (($133) + ($isdigittmp4$i29))|0;
      $135 = ((($136)) + 1|0);
      $137 = HEAP8[$135>>0]|0;
      $138 = $137 << 24 >> 24;
      $isdigittmp$i31 = (($138) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $136 = $135;$i$03$i30 = $134;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $fmt93 = $135;$p$0 = $134;
       break L45;
      }
     }
    }
    $106 = ((($fmt90)) + 2|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $isdigittmp9 = (($108) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $109 = ((($fmt90)) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = ($110<<24>>24)==(36);
     if ($111) {
      $112 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$112>>2] = 10;
      $113 = HEAP8[$106>>0]|0;
      $114 = $113 << 24 >> 24;
      $115 = (($114) + -48)|0;
      $116 = (($nl_arg) + ($115<<3)|0);
      $117 = $116;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) + 4)|0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($fmt90)) + 4|0);
      $fmt93 = $123;$p$0 = $119;
      break;
     }
    }
    $124 = ($l10n$3|0)==(0);
    if (!($124)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $125 = $arglist_current2;
     $126 = ((0) + 4|0);
     $expanded71 = $126;
     $expanded70 = (($expanded71) - 1)|0;
     $127 = (($125) + ($expanded70))|0;
     $128 = ((0) + 4|0);
     $expanded75 = $128;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $129 = $127 & $expanded73;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $arglist_next3 = ((($130)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt93 = $106;$p$0 = $131;
    } else {
     $fmt93 = $106;$p$0 = 0;
    }
   } else {
    $fmt93 = $fmt90;$p$0 = -1;
   }
  } while(0);
  $fmt92 = $fmt93;$st$0 = 0;
  while(1) {
   $139 = HEAP8[$fmt92>>0]|0;
   $140 = $139 << 24 >> 24;
   $141 = (($140) + -65)|0;
   $142 = ($141>>>0)>(57);
   if ($142) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $143 = ((($fmt92)) + 1|0);
   $144 = ((10432 + (($st$0*58)|0)|0) + ($141)|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = (($146) + -1)|0;
   $148 = ($147>>>0)<(8);
   if ($148) {
    $fmt92 = $143;$st$0 = $146;
   } else {
    $$lcssa448 = $143;$$lcssa449 = $145;$$lcssa450 = $146;$fmt92$lcssa446 = $fmt92;$st$0$lcssa447 = $st$0;
    break;
   }
  }
  $149 = ($$lcssa449<<24>>24)==(0);
  if ($149) {
   $$0 = -1;
   label = 363;
   break;
  }
  $150 = ($$lcssa449<<24>>24)==(19);
  $151 = ($argpos$0|0)>(-1);
  L64: do {
   if ($150) {
    if ($151) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1167 = $1164;$1168 = $1165;
     label = 62;
    }
   } else {
    if ($151) {
     $152 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$152>>2] = $$lcssa450;
     $153 = (($nl_arg) + ($argpos$0<<3)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($153)) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $1167 = $156;$1168 = $154;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $157 = ($$lcssa449&255)>(20);
    if ($157) {
     $259 = $1165;$286 = $1164;
    } else {
     do {
      switch ($$lcssa450|0) {
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = $arglist_current5;
       $159 = ((0) + 4|0);
       $expanded78 = $159;
       $expanded77 = (($expanded78) - 1)|0;
       $160 = (($158) + ($expanded77))|0;
       $161 = ((0) + 4|0);
       $expanded82 = $161;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $162 = $160 & $expanded80;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $arglist_next6 = ((($163)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $165 = $164;
       $259 = $165;$286 = $1164;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $166 = $arglist_current8;
       $167 = ((0) + 4|0);
       $expanded85 = $167;
       $expanded84 = (($expanded85) - 1)|0;
       $168 = (($166) + ($expanded84))|0;
       $169 = ((0) + 4|0);
       $expanded89 = $169;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $170 = $168 & $expanded87;
       $171 = $170;
       $172 = HEAP32[$171>>2]|0;
       $arglist_next9 = ((($171)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $173 = ($172|0)<(0);
       $174 = $173 << 31 >> 31;
       $259 = $172;$286 = $174;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $175 = $arglist_current11;
       $176 = ((0) + 4|0);
       $expanded92 = $176;
       $expanded91 = (($expanded92) - 1)|0;
       $177 = (($175) + ($expanded91))|0;
       $178 = ((0) + 4|0);
       $expanded96 = $178;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $179 = $177 & $expanded94;
       $180 = $179;
       $181 = HEAP32[$180>>2]|0;
       $arglist_next12 = ((($180)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $259 = $181;$286 = 0;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $182 = $arglist_current14;
       $183 = ((0) + 8|0);
       $expanded99 = $183;
       $expanded98 = (($expanded99) - 1)|0;
       $184 = (($182) + ($expanded98))|0;
       $185 = ((0) + 8|0);
       $expanded103 = $185;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $186 = $184 & $expanded101;
       $187 = $186;
       $188 = $187;
       $189 = $188;
       $190 = HEAP32[$189>>2]|0;
       $191 = (($188) + 4)|0;
       $192 = $191;
       $193 = HEAP32[$192>>2]|0;
       $arglist_next15 = ((($187)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $259 = $190;$286 = $193;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $194 = $arglist_current17;
       $195 = ((0) + 4|0);
       $expanded106 = $195;
       $expanded105 = (($expanded106) - 1)|0;
       $196 = (($194) + ($expanded105))|0;
       $197 = ((0) + 4|0);
       $expanded110 = $197;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $198 = $196 & $expanded108;
       $199 = $198;
       $200 = HEAP32[$199>>2]|0;
       $arglist_next18 = ((($199)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $201 = $200&65535;
       $202 = $201 << 16 >> 16;
       $203 = ($202|0)<(0);
       $204 = $203 << 31 >> 31;
       $sext101 = $200 << 16;
       $205 = $sext101 >> 16;
       $259 = $205;$286 = $204;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $232 = $arglist_current29;
       $233 = ((0) + 8|0);
       $expanded134 = $233;
       $expanded133 = (($expanded134) - 1)|0;
       $234 = (($232) + ($expanded133))|0;
       $235 = ((0) + 8|0);
       $expanded138 = $235;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $236 = $234 & $expanded136;
       $237 = $236;
       $238 = +HEAPF64[$237>>3];
       $arglist_next30 = ((($237)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $238;$239 = HEAP32[tempDoublePtr>>2]|0;
       $240 = HEAP32[tempDoublePtr+4>>2]|0;
       $259 = $239;$286 = $240;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $213 = $arglist_current23;
       $214 = ((0) + 4|0);
       $expanded120 = $214;
       $expanded119 = (($expanded120) - 1)|0;
       $215 = (($213) + ($expanded119))|0;
       $216 = ((0) + 4|0);
       $expanded124 = $216;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $217 = $215 & $expanded122;
       $218 = $217;
       $219 = HEAP32[$218>>2]|0;
       $arglist_next24 = ((($218)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $220 = $219&255;
       $221 = $220 << 24 >> 24;
       $222 = ($221|0)<(0);
       $223 = $222 << 31 >> 31;
       $sext = $219 << 24;
       $224 = $sext >> 24;
       $259 = $224;$286 = $223;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $225 = $arglist_current26;
       $226 = ((0) + 4|0);
       $expanded127 = $226;
       $expanded126 = (($expanded127) - 1)|0;
       $227 = (($225) + ($expanded126))|0;
       $228 = ((0) + 4|0);
       $expanded131 = $228;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $229 = $227 & $expanded129;
       $230 = $229;
       $231 = HEAP32[$230>>2]|0;
       $arglist_next27 = ((($230)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $231 & 255;
       $259 = $$mask$i38;$286 = 0;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $241 = $arglist_current32;
       $242 = ((0) + 8|0);
       $expanded141 = $242;
       $expanded140 = (($expanded141) - 1)|0;
       $243 = (($241) + ($expanded140))|0;
       $244 = ((0) + 8|0);
       $expanded145 = $244;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $245 = $243 & $expanded143;
       $246 = $245;
       $247 = +HEAPF64[$246>>3];
       $arglist_next33 = ((($246)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $247;$248 = HEAP32[tempDoublePtr>>2]|0;
       $249 = HEAP32[tempDoublePtr+4>>2]|0;
       $259 = $248;$286 = $249;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $206 = $arglist_current20;
       $207 = ((0) + 4|0);
       $expanded113 = $207;
       $expanded112 = (($expanded113) - 1)|0;
       $208 = (($206) + ($expanded112))|0;
       $209 = ((0) + 4|0);
       $expanded117 = $209;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $210 = $208 & $expanded115;
       $211 = $210;
       $212 = HEAP32[$211>>2]|0;
       $arglist_next21 = ((($211)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $212 & 65535;
       $259 = $$mask1$i37;$286 = 0;
       break L64;
       break;
      }
      default: {
       $259 = $1165;$286 = $1164;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $259 = $1168;$286 = $1167;
   } else {
    $1164 = $1167;$1165 = $1168;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $250 = HEAP8[$fmt92$lcssa446>>0]|0;
  $251 = $250 << 24 >> 24;
  $252 = ($st$0$lcssa447|0)!=(0);
  $253 = $251 & 15;
  $254 = ($253|0)==(3);
  $or$cond15 = $252 & $254;
  $255 = $251 & -33;
  $t$0 = $or$cond15 ? $255 : $251;
  $256 = $fl$1 & 8192;
  $257 = ($256|0)==(0);
  $258 = $fl$1 & -65537;
  $fl$1$ = $257 ? $fl$1 : $258;
  L86: do {
   switch ($t$0|0) {
   case 117:  {
    $331 = $286;$333 = $259;$pl$0 = 0;$prefix$0 = 10912;
    label = 84;
    break;
   }
   case 99:  {
    $373 = $259&255;
    HEAP8[$4>>0] = $373;
    $1169 = $286;$1170 = $259;$a$2 = $4;$fl$6 = $258;$p$5 = 1;$pl$2 = 0;$prefix$2 = 10912;$z$2 = $2;
    break;
   }
   case 115:  {
    $377 = $259;
    $378 = ($259|0)!=(0);
    $379 = $378 ? $377 : 10928;
    $a$1 = $379;
    label = 94;
    break;
   }
   case 109:  {
    $374 = (___errno_location()|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (_strerror(($375|0))|0);
    $a$1 = $376;
    label = 94;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $259;
    HEAP32[$5>>2] = 0;
    $1173 = $wc;$1174 = $6;$p$4274 = -1;
    label = 97;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $259;HEAP32[tempDoublePtr+4>>2] = $286;$425 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $426 = ($286|0)<(0);
    if ($426) {
     $427 = -$425;
     $$07$i = $427;$pl$0$i = 1;$prefix$0$i = 10936;
    } else {
     $428 = $fl$1$ & 2048;
     $429 = ($428|0)==(0);
     if ($429) {
      $430 = $fl$1$ & 1;
      $431 = ($430|0)==(0);
      $$$i = $431 ? (10937) : (10942);
      $$07$i = $425;$pl$0$i = $430;$prefix$0$i = $$$i;
     } else {
      $$07$i = $425;$pl$0$i = 1;$prefix$0$i = (10939);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$432 = HEAP32[tempDoublePtr>>2]|0;
    $433 = HEAP32[tempDoublePtr+4>>2]|0;
    $434 = $433 & 2146435072;
    $435 = ($434>>>0)<(2146435072);
    $436 = (0)<(0);
    $437 = ($434|0)==(2146435072);
    $438 = $437 & $436;
    $439 = $435 | $438;
    do {
     if ($439) {
      $466 = (+_frexpl($$07$i,$e2$i));
      $467 = $466 * 2.0;
      $468 = $467 != 0.0;
      if ($468) {
       $469 = HEAP32[$e2$i>>2]|0;
       $470 = (($469) + -1)|0;
       HEAP32[$e2$i>>2] = $470;
      }
      $471 = $t$0 | 32;
      $472 = ($471|0)==(97);
      if ($472) {
       $473 = $t$0 & 32;
       $474 = ($473|0)==(0);
       $475 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $474 ? $prefix$0$i : $475;
       $476 = $pl$0$i | 2;
       $477 = ($p$0>>>0)>(11);
       $478 = (12 - ($p$0))|0;
       $479 = ($478|0)==(0);
       $480 = $477 | $479;
       do {
        if ($480) {
         $$1$i = $467;
        } else {
         $re$1179$i = $478;$round$0178$i = 8.0;
         while(1) {
          $481 = (($re$1179$i) + -1)|0;
          $482 = $round$0178$i * 16.0;
          $483 = ($481|0)==(0);
          if ($483) {
           $$lcssa474 = $482;
           break;
          } else {
           $re$1179$i = $481;$round$0178$i = $482;
          }
         }
         $484 = HEAP8[$prefix$0$$i>>0]|0;
         $485 = ($484<<24>>24)==(45);
         if ($485) {
          $486 = -$467;
          $487 = $486 - $$lcssa474;
          $488 = $$lcssa474 + $487;
          $489 = -$488;
          $$1$i = $489;
          break;
         } else {
          $490 = $467 + $$lcssa474;
          $491 = $490 - $$lcssa474;
          $$1$i = $491;
          break;
         }
        }
       } while(0);
       $492 = HEAP32[$e2$i>>2]|0;
       $493 = ($492|0)<(0);
       $494 = (0 - ($492))|0;
       $495 = $493 ? $494 : $492;
       $496 = ($495|0)<(0);
       if ($496) {
        $497 = ($495|0)<(0);
        $498 = $497 << 31 >> 31;
        $$05$i$i = $7;$499 = $495;$500 = $498;
        while(1) {
         $501 = (___uremdi3(($499|0),($500|0),10,0)|0);
         $502 = tempRet0;
         $503 = $501 | 48;
         $504 = $503&255;
         $505 = ((($$05$i$i)) + -1|0);
         HEAP8[$505>>0] = $504;
         $506 = (___udivdi3(($499|0),($500|0),10,0)|0);
         $507 = tempRet0;
         $508 = ($500>>>0)>(9);
         $509 = ($499>>>0)>(4294967295);
         $510 = ($500|0)==(9);
         $511 = $510 & $509;
         $512 = $508 | $511;
         if ($512) {
          $$05$i$i = $505;$499 = $506;$500 = $507;
         } else {
          $$lcssa475 = $505;$1177 = $506;$1178 = $507;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa475;$$01$lcssa$off0$i$i = $1177;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $495;
       }
       $513 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($513) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $514 = (($y$03$i$i>>>0) % 10)&-1;
         $515 = $514 | 48;
         $516 = $515&255;
         $517 = ((($$12$i$i)) + -1|0);
         HEAP8[$517>>0] = $516;
         $518 = (($y$03$i$i>>>0) / 10)&-1;
         $519 = ($y$03$i$i>>>0)<(10);
         if ($519) {
          $$1$lcssa$i$i = $517;
          break;
         } else {
          $$12$i$i = $517;$y$03$i$i = $518;
         }
        }
       }
       $520 = ($$1$lcssa$i$i|0)==($7|0);
       if ($520) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $521 = HEAP32[$e2$i>>2]|0;
       $522 = $521 >> 31;
       $523 = $522 & 2;
       $524 = (($523) + 43)|0;
       $525 = $524&255;
       $526 = ((($estr$0$i)) + -1|0);
       HEAP8[$526>>0] = $525;
       $527 = (($t$0) + 15)|0;
       $528 = $527&255;
       $529 = ((($estr$0$i)) + -2|0);
       HEAP8[$529>>0] = $528;
       $530 = $fl$1$ & 8;
       $531 = ($530|0)==(0);
       if ($531) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $532 = (~~(($$2$us$us$i)));
          $533 = (10896 + ($532)|0);
          $534 = HEAP8[$533>>0]|0;
          $535 = $534&255;
          $536 = $535 | $473;
          $537 = $536&255;
          $538 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $537;
          $539 = (+($532|0));
          $540 = $$2$us$us$i - $539;
          $541 = $540 * 16.0;
          $542 = $538;
          $543 = (($542) - ($0))|0;
          $544 = ($543|0)!=(1);
          $notlhs$us$us$i = $541 == 0.0;
          $or$cond$i79 = $544 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $538;
          } else {
           $545 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$538>>0] = 46;
           $s$1$us$us$i = $545;
          }
          $546 = $541 != 0.0;
          if ($546) {
           $$2$us$us$i = $541;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $547 = (~~(($$2$us$i)));
          $548 = (10896 + ($547)|0);
          $549 = HEAP8[$548>>0]|0;
          $550 = $549&255;
          $551 = $550 | $473;
          $552 = $551&255;
          $553 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $552;
          $554 = (+($547|0));
          $555 = $$2$us$i - $554;
          $556 = $555 * 16.0;
          $557 = $553;
          $558 = (($557) - ($0))|0;
          $559 = ($558|0)==(1);
          if ($559) {
           $560 = ((($s$0$us$i)) + 2|0);
           HEAP8[$553>>0] = 46;
           $s$1$us$i = $560;
          } else {
           $s$1$us$i = $553;
          }
          $561 = $556 != 0.0;
          if ($561) {
           $$2$us$i = $556;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $562 = (~~(($$2$i)));
         $563 = (10896 + ($562)|0);
         $564 = HEAP8[$563>>0]|0;
         $565 = $564&255;
         $566 = $565 | $473;
         $567 = $566&255;
         $568 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $567;
         $569 = (+($562|0));
         $570 = $$2$i - $569;
         $571 = $570 * 16.0;
         $572 = $568;
         $573 = (($572) - ($0))|0;
         $574 = ($573|0)==(1);
         if ($574) {
          $575 = ((($s$0$i)) + 2|0);
          HEAP8[$568>>0] = 46;
          $s$1$i = $575;
         } else {
          $s$1$i = $568;
         }
         $576 = $571 != 0.0;
         if ($576) {
          $$2$i = $571;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $577 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $578 = (($11) + ($$pre300$i))|0;
       $579 = ($578|0)<($p$0|0);
       $or$cond331 = $577 & $579;
       $580 = $529;
       $581 = (($12) + ($p$0))|0;
       $582 = (($581) - ($580))|0;
       $583 = $529;
       $584 = (($10) - ($583))|0;
       $585 = (($584) + ($$pre300$i))|0;
       $l$0$i = $or$cond331 ? $582 : $585;
       $586 = (($l$0$i) + ($476))|0;
       $587 = $fl$1$ & 73728;
       $588 = ($587|0)==(0);
       $589 = ($w$1|0)>($586|0);
       $or$cond$i52$i = $588 & $589;
       if ($or$cond$i52$i) {
        $590 = (($w$1) - ($586))|0;
        $591 = ($590>>>0)>(256);
        $592 = $591 ? 256 : $590;
        _memset(($pad$i|0),32,($592|0))|0;
        $593 = ($590>>>0)>(255);
        if ($593) {
         $$01$i54$i = $590;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $594 = (($$01$i54$i) + -256)|0;
          $595 = ($594>>>0)>(255);
          if ($595) {
           $$01$i54$i = $594;
          } else {
           break;
          }
         }
         $596 = $590 & 255;
         $$0$lcssa$i56$i = $596;
        } else {
         $$0$lcssa$i56$i = $590;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$476,$f)|0);
       $597 = ($587|0)==(65536);
       $or$cond$i59$i = $597 & $589;
       if ($or$cond$i59$i) {
        $598 = (($w$1) - ($586))|0;
        $599 = ($598>>>0)>(256);
        $600 = $599 ? 256 : $598;
        _memset(($pad$i|0),48,($600|0))|0;
        $601 = ($598>>>0)>(255);
        if ($601) {
         $$01$i61$i = $598;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $602 = (($$01$i61$i) + -256)|0;
          $603 = ($602>>>0)>(255);
          if ($603) {
           $$01$i61$i = $602;
          } else {
           break;
          }
         }
         $604 = $598 & 255;
         $$0$lcssa$i63$i = $604;
        } else {
         $$0$lcssa$i63$i = $598;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $605 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$605,$f)|0);
       $606 = $529;
       $607 = (($9) - ($606))|0;
       $608 = (($l$0$i) - ($607))|0;
       $609 = (($608) - ($605))|0;
       $610 = ($609|0)>(0);
       if ($610) {
        $611 = ($609>>>0)>(256);
        $612 = $611 ? 256 : $609;
        _memset(($pad$i|0),48,($612|0))|0;
        $613 = ($609>>>0)>(255);
        if ($613) {
         $$01$i67$i = $609;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $614 = (($$01$i67$i) + -256)|0;
          $615 = ($614>>>0)>(255);
          if ($615) {
           $$01$i67$i = $614;
          } else {
           break;
          }
         }
         $616 = $609 & 255;
         $$0$lcssa$i69$i = $616;
        } else {
         $$0$lcssa$i69$i = $609;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($529,$607,$f)|0);
       $617 = ($587|0)==(8192);
       $or$cond$i72$i = $617 & $589;
       if ($or$cond$i72$i) {
        $618 = (($w$1) - ($586))|0;
        $619 = ($618>>>0)>(256);
        $620 = $619 ? 256 : $618;
        _memset(($pad$i|0),32,($620|0))|0;
        $621 = ($618>>>0)>(255);
        if ($621) {
         $$01$i74$i = $618;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $622 = (($$01$i74$i) + -256)|0;
          $623 = ($622>>>0)>(255);
          if ($623) {
           $$01$i74$i = $622;
          } else {
           break;
          }
         }
         $624 = $618 & 255;
         $$0$lcssa$i76$i = $624;
        } else {
         $$0$lcssa$i76$i = $618;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $589 ? $w$1 : $586;
       $$0$i = $w$$i;
       break;
      }
      $625 = ($p$0|0)<(0);
      $$p$i = $625 ? 6 : $p$0;
      if ($468) {
       $626 = $467 * 268435456.0;
       $627 = HEAP32[$e2$i>>2]|0;
       $628 = (($627) + -28)|0;
       HEAP32[$e2$i>>2] = $628;
       $$3$i = $626;$629 = $628;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $467;$629 = $$pre$i;
      }
      $630 = ($629|0)<(0);
      $$31$i = $630 ? $big$i : $13;
      $631 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $632 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $632;
       $633 = ((($z$0$i)) + 4|0);
       $634 = (+($632>>>0));
       $635 = $$4$i - $634;
       $636 = $635 * 1.0E+9;
       $637 = $636 != 0.0;
       if ($637) {
        $$4$i = $636;$z$0$i = $633;
       } else {
        $$lcssa451 = $633;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $638 = ($$pr$i|0)>(0);
      if ($638) {
       $639 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa451;
       while(1) {
        $640 = ($639|0)>(29);
        $641 = $640 ? 29 : $639;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $642 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($642) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $643 = HEAP32[$d$0247$i>>2]|0;
           $644 = (_bitshift64Shl(($643|0),0,($641|0))|0);
           $645 = tempRet0;
           $646 = (_i64Add(($644|0),($645|0),($carry$0246$i|0),0)|0);
           $647 = tempRet0;
           $648 = (___uremdi3(($646|0),($647|0),1000000000,0)|0);
           $649 = tempRet0;
           HEAP32[$d$0247$i>>2] = $648;
           $650 = (___udivdi3(($646|0),($647|0),1000000000,0)|0);
           $651 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $652 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($652) {
            $$lcssa452 = $650;
            break;
           } else {
            $carry$0246$i = $650;$d$0247$i = $d$0$i;
           }
          }
          $653 = ($$lcssa452|0)==(0);
          if ($653) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $654 = ((($a$1253$i)) + -4|0);
          HEAP32[$654>>2] = $$lcssa452;
          $a$2$ph$i = $654;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $655 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($655)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $656 = ((($z$2$i)) + -4|0);
         $657 = HEAP32[$656>>2]|0;
         $658 = ($657|0)==(0);
         if ($658) {
          $z$2$i = $656;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $659 = HEAP32[$e2$i>>2]|0;
        $660 = (($659) - ($641))|0;
        HEAP32[$e2$i>>2] = $660;
        $661 = ($660|0)>(0);
        if ($661) {
         $639 = $660;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $660;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa451;
      }
      $662 = ($$pr146$i|0)<(0);
      L216: do {
       if ($662) {
        $663 = (($$p$i) + 25)|0;
        $664 = (($663|0) / 9)&-1;
        $665 = (($664) + 1)|0;
        $666 = ($471|0)==(102);
        if (!($666)) {
         $699 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $698 = (0 - ($699))|0;
          $700 = ($698|0)>(9);
          $701 = $700 ? 9 : $698;
          $702 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($702) {
            $706 = 1 << $701;
            $707 = (($706) + -1)|0;
            $708 = 1000000000 >>> $701;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $709 = HEAP32[$d$1233$i>>2]|0;
             $710 = $709 & $707;
             $711 = $709 >>> $701;
             $712 = (($711) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $712;
             $713 = Math_imul($710, $708)|0;
             $714 = ((($d$1233$i)) + 4|0);
             $715 = ($714>>>0)<($z$3239$i>>>0);
             if ($715) {
              $carry3$0234$i = $713;$d$1233$i = $714;
             } else {
              $$lcssa454 = $713;
              break;
             }
            }
            $716 = HEAP32[$a$3240$i>>2]|0;
            $717 = ($716|0)==(0);
            $718 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $717 ? $718 : $a$3240$i;
            $719 = ($$lcssa454|0)==(0);
            if ($719) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $720 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa454;
            $$a$3306$i = $$a$3$i;$z$4$i = $720;
           } else {
            $703 = HEAP32[$a$3240$i>>2]|0;
            $704 = ($703|0)==(0);
            $705 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $704 ? $705 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $721 = $z$4$i;
          $722 = $$a$3306$i;
          $723 = (($721) - ($722))|0;
          $724 = $723 >> 2;
          $725 = ($724|0)>($665|0);
          $726 = (($$a$3306$i) + ($665<<2)|0);
          $$z$4$i = $725 ? $726 : $z$4$i;
          $727 = HEAP32[$e2$i>>2]|0;
          $728 = (($727) + ($701))|0;
          HEAP32[$e2$i>>2] = $728;
          $729 = ($728|0)<(0);
          if ($729) {
           $699 = $728;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L216;
          }
         }
        }
        $667 = (($$31$i) + ($665<<2)|0);
        $669 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $668 = (0 - ($669))|0;
         $670 = ($668|0)>(9);
         $671 = $670 ? 9 : $668;
         $672 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($672) {
           $697 = 1 << $671;
           $690 = (($697) + -1)|0;
           $694 = 1000000000 >>> $671;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $688 = HEAP32[$d$1233$us$i>>2]|0;
            $689 = $688 & $690;
            $691 = $688 >>> $671;
            $692 = (($691) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $692;
            $693 = Math_imul($689, $694)|0;
            $695 = ((($d$1233$us$i)) + 4|0);
            $696 = ($695>>>0)<($z$3239$us$i>>>0);
            if ($696) {
             $carry3$0234$us$i = $693;$d$1233$us$i = $695;
            } else {
             $$lcssa455 = $693;
             break;
            }
           }
           $676 = HEAP32[$a$3240$us$i>>2]|0;
           $677 = ($676|0)==(0);
           $678 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $677 ? $678 : $a$3240$us$i;
           $679 = ($$lcssa455|0)==(0);
           if ($679) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $680 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa455;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $680;
          } else {
           $673 = HEAP32[$a$3240$us$i>>2]|0;
           $674 = ($673|0)==(0);
           $675 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $674 ? $675 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $681 = $z$4$us$i;
         $682 = (($681) - ($631))|0;
         $683 = $682 >> 2;
         $684 = ($683|0)>($665|0);
         $$z$4$us$i = $684 ? $667 : $z$4$us$i;
         $685 = HEAP32[$e2$i>>2]|0;
         $686 = (($685) + ($671))|0;
         HEAP32[$e2$i>>2] = $686;
         $687 = ($686|0)<(0);
         if ($687) {
          $669 = $686;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $730 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($730) {
        $731 = $a$3$lcssa$i;
        $732 = (($631) - ($731))|0;
        $733 = $732 >> 2;
        $734 = ($733*9)|0;
        $735 = HEAP32[$a$3$lcssa$i>>2]|0;
        $736 = ($735>>>0)<(10);
        if ($736) {
         $e$1$i = $734;
         break;
        } else {
         $e$0229$i = $734;$i$0228$i = 10;
        }
        while(1) {
         $737 = ($i$0228$i*10)|0;
         $738 = (($e$0229$i) + 1)|0;
         $739 = ($735>>>0)<($737>>>0);
         if ($739) {
          $e$1$i = $738;
          break;
         } else {
          $e$0229$i = $738;$i$0228$i = $737;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $740 = ($471|0)!=(102);
      $741 = $740 ? $e$1$i : 0;
      $742 = (($$p$i) - ($741))|0;
      $743 = ($471|0)==(103);
      $744 = ($$p$i|0)!=(0);
      $745 = $744 & $743;
      $$neg151$i = $745 << 31 >> 31;
      $746 = (($742) + ($$neg151$i))|0;
      $747 = $z$3$lcssa$i;
      $748 = (($747) - ($631))|0;
      $749 = $748 >> 2;
      $750 = ($749*9)|0;
      $751 = (($750) + -9)|0;
      $752 = ($746|0)<($751|0);
      if ($752) {
       $753 = (($746) + 9216)|0;
       $754 = (($753|0) / 9)&-1;
       $$sum$i = (($754) + -1023)|0;
       $755 = (($$31$i) + ($$sum$i<<2)|0);
       $756 = (($753|0) % 9)&-1;
       $j$0221$i = (($756) + 1)|0;
       $757 = ($j$0221$i|0)<(9);
       if ($757) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $758 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $758;
          break;
         } else {
          $i$1222$i = $758;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $759 = HEAP32[$755>>2]|0;
       $760 = (($759>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $761 = ($760|0)==(0);
       if ($761) {
        $$sum15$i = (($754) + -1022)|0;
        $762 = (($$31$i) + ($$sum15$i<<2)|0);
        $763 = ($762|0)==($z$3$lcssa$i|0);
        if ($763) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $755;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $764 = (($759>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $765 = $764 & 1;
         $766 = ($765|0)==(0);
         $$20$i = $766 ? 9007199254740992.0 : 9007199254740994.0;
         $767 = (($i$1$lcssa$i|0) / 2)&-1;
         $768 = ($760>>>0)<($767>>>0);
         do {
          if ($768) {
           $small$0$i = 0.5;
          } else {
           $769 = ($760|0)==($767|0);
           if ($769) {
            $$sum16$i = (($754) + -1022)|0;
            $770 = (($$31$i) + ($$sum16$i<<2)|0);
            $771 = ($770|0)==($z$3$lcssa$i|0);
            if ($771) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $772 = ($pl$0$i|0)==(0);
         do {
          if ($772) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $773 = HEAP8[$prefix$0$i>>0]|0;
           $774 = ($773<<24>>24)==(45);
           if (!($774)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $775 = -$$20$i;
           $776 = -$small$0$i;
           $round6$1$i = $775;$small$1$i = $776;
          }
         } while(0);
         $777 = (($759) - ($760))|0;
         HEAP32[$755>>2] = $777;
         $778 = $round6$1$i + $small$1$i;
         $779 = $778 != $round6$1$i;
         if (!($779)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $755;$e$3$i = $e$1$i;
          break;
         }
         $780 = (($777) + ($i$1$lcssa$i))|0;
         HEAP32[$755>>2] = $780;
         $781 = ($780>>>0)>(999999999);
         if ($781) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $755;
          while(1) {
           $782 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $783 = ($782>>>0)<($a$5215$i>>>0);
           if ($783) {
            $784 = ((($a$5215$i)) + -4|0);
            HEAP32[$784>>2] = 0;
            $a$6$i = $784;
           } else {
            $a$6$i = $a$5215$i;
           }
           $785 = HEAP32[$782>>2]|0;
           $786 = (($785) + 1)|0;
           HEAP32[$782>>2] = $786;
           $787 = ($786>>>0)>(999999999);
           if ($787) {
            $a$5215$i = $a$6$i;$d$2214$i = $782;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $782;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $755;
         }
         $788 = $a$5$lcssa$i;
         $789 = (($631) - ($788))|0;
         $790 = $789 >> 2;
         $791 = ($790*9)|0;
         $792 = HEAP32[$a$5$lcssa$i>>2]|0;
         $793 = ($792>>>0)<(10);
         if ($793) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $791;
          break;
         } else {
          $e$2210$i = $791;$i$2209$i = 10;
         }
         while(1) {
          $794 = ($i$2209$i*10)|0;
          $795 = (($e$2210$i) + 1)|0;
          $796 = ($792>>>0)<($794>>>0);
          if ($796) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $795;
           break;
          } else {
           $e$2210$i = $795;$i$2209$i = $794;
          }
         }
        }
       } while(0);
       $797 = ((($d$3$i)) + 4|0);
       $798 = ($z$3$lcssa$i>>>0)>($797>>>0);
       $$z$3$i = $798 ? $797 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $799 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $800 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($800)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $801 = ((($z$6$i)) + -4|0);
       $802 = HEAP32[$801>>2]|0;
       $803 = ($802|0)==(0);
       if ($803) {
        $z$6$i = $801;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($743) {
        $804 = $744&1;
        $805 = $804 ^ 1;
        $$p$$i = (($805) + ($$p$i))|0;
        $806 = ($$p$$i|0)>($e$4$ph$i|0);
        $807 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $806 & $807;
        if ($or$cond6$i) {
         $808 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $809 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $808;$$210$i = $809;
        } else {
         $810 = (($t$0) + -2)|0;
         $811 = (($$p$$i) + -1)|0;
         $$013$i = $810;$$210$i = $811;
        }
        $812 = $fl$1$ & 8;
        $813 = ($812|0)==(0);
        if (!($813)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $812;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $814 = ((($z$6$i$lcssa)) + -4|0);
          $815 = HEAP32[$814>>2]|0;
          $816 = ($815|0)==(0);
          if ($816) {
           $j$2$i = 9;
           break;
          }
          $817 = (($815>>>0) % 10)&-1;
          $818 = ($817|0)==(0);
          if ($818) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $819 = ($i$3205$i*10)|0;
           $820 = (($j$1206$i) + 1)|0;
           $821 = (($815>>>0) % ($819>>>0))&-1;
           $822 = ($821|0)==(0);
           if ($822) {
            $i$3205$i = $819;$j$1206$i = $820;
           } else {
            $j$2$i = $820;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $823 = $$013$i | 32;
        $824 = ($823|0)==(102);
        $825 = $z$6$i$lcssa;
        $826 = (($825) - ($631))|0;
        $827 = $826 >> 2;
        $828 = ($827*9)|0;
        $829 = (($828) + -9)|0;
        if ($824) {
         $830 = (($829) - ($j$2$i))|0;
         $831 = ($830|0)<(0);
         $$21$i = $831 ? 0 : $830;
         $832 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $832 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $833 = (($829) + ($e$4$ph$i))|0;
         $834 = (($833) - ($j$2$i))|0;
         $835 = ($834|0)<(0);
         $$23$i = $835 ? 0 : $834;
         $836 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $836 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $837 = $$311$i | $$pre$phi302$iZ2D;
      $838 = ($837|0)!=(0);
      $839 = $838&1;
      $840 = $$114$i | 32;
      $841 = ($840|0)==(102);
      if ($841) {
       $842 = ($e$4$ph$i|0)>(0);
       $843 = $842 ? $e$4$ph$i : 0;
       $$pn$i = $843;$estr$2$i = 0;
      } else {
       $844 = ($e$4$ph$i|0)<(0);
       $845 = $844 ? $799 : $e$4$ph$i;
       $846 = ($845|0)<(0);
       if ($846) {
        $847 = ($845|0)<(0);
        $848 = $847 << 31 >> 31;
        $$05$i79$i = $7;$849 = $845;$850 = $848;
        while(1) {
         $851 = (___uremdi3(($849|0),($850|0),10,0)|0);
         $852 = tempRet0;
         $853 = $851 | 48;
         $854 = $853&255;
         $855 = ((($$05$i79$i)) + -1|0);
         HEAP8[$855>>0] = $854;
         $856 = (___udivdi3(($849|0),($850|0),10,0)|0);
         $857 = tempRet0;
         $858 = ($850>>>0)>(9);
         $859 = ($849>>>0)>(4294967295);
         $860 = ($850|0)==(9);
         $861 = $860 & $859;
         $862 = $858 | $861;
         if ($862) {
          $$05$i79$i = $855;$849 = $856;$850 = $857;
         } else {
          $$lcssa461 = $855;$1179 = $856;$1180 = $857;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa461;$$01$lcssa$off0$i85$i = $1179;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $845;
       }
       $863 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($863) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $864 = (($y$03$i86$i>>>0) % 10)&-1;
         $865 = $864 | 48;
         $866 = $865&255;
         $867 = ((($$12$i87$i)) + -1|0);
         HEAP8[$867>>0] = $866;
         $868 = (($y$03$i86$i>>>0) / 10)&-1;
         $869 = ($y$03$i86$i>>>0)<(10);
         if ($869) {
          $estr$1$ph$i = $867;
          break;
         } else {
          $$12$i87$i = $867;$y$03$i86$i = $868;
         }
        }
       }
       $870 = $estr$1$ph$i;
       $871 = (($9) - ($870))|0;
       $872 = ($871|0)<(2);
       if ($872) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $873 = ((($estr$1201$i)) + -1|0);
         HEAP8[$873>>0] = 48;
         $874 = $873;
         $875 = (($9) - ($874))|0;
         $876 = ($875|0)<(2);
         if ($876) {
          $estr$1201$i = $873;
         } else {
          $estr$1$lcssa$i = $873;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $877 = $e$4$ph$i >> 31;
       $878 = $877 & 2;
       $879 = (($878) + 43)|0;
       $880 = $879&255;
       $881 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$881>>0] = $880;
       $882 = $$114$i&255;
       $883 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$883>>0] = $882;
       $884 = $883;
       $885 = (($9) - ($884))|0;
       $$pn$i = $885;$estr$2$i = $883;
      }
      $886 = (($pl$0$i) + 1)|0;
      $887 = (($886) + ($$311$i))|0;
      $l$1$i = (($887) + ($839))|0;
      $888 = (($l$1$i) + ($$pn$i))|0;
      $889 = $fl$1$ & 73728;
      $890 = ($889|0)==(0);
      $891 = ($w$1|0)>($888|0);
      $or$cond$i93$i = $890 & $891;
      if ($or$cond$i93$i) {
       $892 = (($w$1) - ($888))|0;
       $893 = ($892>>>0)>(256);
       $894 = $893 ? 256 : $892;
       _memset(($pad$i|0),32,($894|0))|0;
       $895 = ($892>>>0)>(255);
       if ($895) {
        $$01$i95$i = $892;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $896 = (($$01$i95$i) + -256)|0;
         $897 = ($896>>>0)>(255);
         if ($897) {
          $$01$i95$i = $896;
         } else {
          break;
         }
        }
        $898 = $892 & 255;
        $$0$lcssa$i97$i = $898;
       } else {
        $$0$lcssa$i97$i = $892;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $899 = ($889|0)==(65536);
      $or$cond$i100$i = $899 & $891;
      if ($or$cond$i100$i) {
       $900 = (($w$1) - ($888))|0;
       $901 = ($900>>>0)>(256);
       $902 = $901 ? 256 : $900;
       _memset(($pad$i|0),48,($902|0))|0;
       $903 = ($900>>>0)>(255);
       if ($903) {
        $$01$i102$i = $900;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $904 = (($$01$i102$i) + -256)|0;
         $905 = ($904>>>0)>(255);
         if ($905) {
          $$01$i102$i = $904;
         } else {
          break;
         }
        }
        $906 = $900 & 255;
        $$0$lcssa$i104$i = $906;
       } else {
        $$0$lcssa$i104$i = $900;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($841) {
       $907 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $907 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $908 = HEAP32[$d$4191$i>>2]|0;
        $909 = ($908|0)==(0);
        if ($909) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $908;
         while(1) {
          $910 = (($y$03$i109$i>>>0) % 10)&-1;
          $911 = $910 | 48;
          $912 = $911&255;
          $913 = ((($$12$i110$i)) + -1|0);
          HEAP8[$913>>0] = $912;
          $914 = (($y$03$i109$i>>>0) / 10)&-1;
          $915 = ($y$03$i109$i>>>0)<(10);
          if ($915) {
           $$1$lcssa$i112$i = $913;
           break;
          } else {
           $$12$i110$i = $913;$y$03$i109$i = $914;
          }
         }
        }
        $916 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($916) {
          $920 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($920)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $917 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($917) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $918 = ((($s7$0188$i)) + -1|0);
           HEAP8[$918>>0] = 48;
           $919 = ($918>>>0)>($buf$i>>>0);
           if ($919) {
            $s7$0188$i = $918;
           } else {
            $s7$1$i = $918;
            break;
           }
          }
         }
        } while(0);
        $921 = $s7$1$i;
        $922 = (($15) - ($921))|0;
        (___fwritex($s7$1$i,$922,$f)|0);
        $923 = ((($d$4191$i)) + 4|0);
        $924 = ($923>>>0)>($$31$i>>>0);
        if ($924) {
         $$lcssa470 = $923;
         break;
        } else {
         $d$4191$i = $923;
        }
       }
       $925 = ($837|0)==(0);
       if (!($925)) {
        (___fwritex(10992,1,$f)|0);
       }
       $926 = ($$lcssa470>>>0)<($z$6$i$lcssa>>>0);
       $927 = ($$311$i|0)>(0);
       $928 = $927 & $926;
       if ($928) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa470;
        while(1) {
         $929 = HEAP32[$d$5183$i>>2]|0;
         $930 = ($929|0)==(0);
         if ($930) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $929;
          while(1) {
           $931 = (($y$03$i118$i>>>0) % 10)&-1;
           $932 = $931 | 48;
           $933 = $932&255;
           $934 = ((($$12$i119$i)) + -1|0);
           HEAP8[$934>>0] = $933;
           $935 = (($y$03$i118$i>>>0) / 10)&-1;
           $936 = ($y$03$i118$i>>>0)<(10);
           if ($936) {
            $$lcssa471 = $934;
            break;
           } else {
            $$12$i119$i = $934;$y$03$i118$i = $935;
           }
          }
          $937 = ($$lcssa471>>>0)>($buf$i>>>0);
          if ($937) {
           $s8$0180$i = $$lcssa471;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa471;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $938 = ((($s8$0180$i)) + -1|0);
           HEAP8[$938>>0] = 48;
           $939 = ($938>>>0)>($buf$i>>>0);
           if ($939) {
            $s8$0180$i = $938;
            label = 289;
           } else {
            $s8$0$lcssa$i = $938;
            break;
           }
          }
         }
         $940 = ($$412184$i|0)>(9);
         $941 = $940 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$941,$f)|0);
         $942 = ((($d$5183$i)) + 4|0);
         $943 = (($$412184$i) + -9)|0;
         $944 = ($942>>>0)<($z$6$i$lcssa>>>0);
         $945 = $940 & $944;
         if ($945) {
          $$412184$i = $943;$d$5183$i = $942;
         } else {
          $$412$lcssa$i = $943;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $946 = ($$412$lcssa$i|0)>(0);
       if ($946) {
        $947 = ($$412$lcssa$i>>>0)>(256);
        $948 = $947 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($948|0))|0;
        $949 = ($$412$lcssa$i>>>0)>(255);
        if ($949) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $950 = (($$01$i126$i) + -256)|0;
          $951 = ($950>>>0)>(255);
          if ($951) {
           $$01$i126$i = $950;
          } else {
           break;
          }
         }
         $952 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $952;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $953 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $953;
       $954 = ($$311$i|0)>(-1);
       do {
        if ($954) {
         $955 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $956 = HEAP32[$d$6195$i>>2]|0;
          $957 = ($956|0)==(0);
          if ($957) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $956;
           while(1) {
            $958 = (($y$03$i133$i>>>0) % 10)&-1;
            $959 = $958 | 48;
            $960 = $959&255;
            $961 = ((($$12$i134$i)) + -1|0);
            HEAP8[$961>>0] = $960;
            $962 = (($y$03$i133$i>>>0) / 10)&-1;
            $963 = ($y$03$i133$i>>>0)<(10);
            if ($963) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa465 = $961;
             break;
            } else {
             $$12$i134$i = $961;$y$03$i133$i = $962;
            }
           }
           $964 = ($$lcssa465|0)==($14|0);
           if ($964) {
            label = 303;
           } else {
            $1181 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa465;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1181 = $14;$s9$0$i = $16;
          }
          $965 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($965) {
            (___fwritex($s9$0$i,1,$f)|0);
            $969 = ($$5196$i|0)<(1);
            $or$cond29$i = $955 & $969;
            if ($or$cond29$i) {
             $s9$2$i = $1181;
             break;
            }
            (___fwritex(10992,1,$f)|0);
            $s9$2$i = $1181;
           } else {
            $966 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($966) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $967 = ((($s9$1192$i)) + -1|0);
             HEAP8[$967>>0] = 48;
             $968 = ($967>>>0)>($buf$i>>>0);
             if ($968) {
              $s9$1192$i = $967;
             } else {
              $s9$2$i = $967;
              break;
             }
            }
           }
          } while(0);
          $970 = $s9$2$i;
          $971 = (($15) - ($970))|0;
          $972 = ($$5196$i|0)>($971|0);
          $973 = $972 ? $971 : $$5196$i;
          (___fwritex($s9$2$i,$973,$f)|0);
          $974 = (($$5196$i) - ($971))|0;
          $975 = ((($d$6195$i)) + 4|0);
          $976 = ($975>>>0)<($z$6$$i>>>0);
          $977 = ($974|0)>(-1);
          $978 = $976 & $977;
          if ($978) {
           $$5196$i = $974;$d$6195$i = $975;
          } else {
           $$lcssa467 = $974;
           break;
          }
         }
         $979 = ($$lcssa467|0)>(0);
         if (!($979)) {
          break;
         }
         $980 = ($$lcssa467>>>0)>(256);
         $981 = $980 ? 256 : $$lcssa467;
         _memset(($pad$i|0),48,($981|0))|0;
         $982 = ($$lcssa467>>>0)>(255);
         if ($982) {
          $$01$i141$i = $$lcssa467;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $983 = (($$01$i141$i) + -256)|0;
           $984 = ($983>>>0)>(255);
           if ($984) {
            $$01$i141$i = $983;
           } else {
            break;
           }
          }
          $985 = $$lcssa467 & 255;
          $$0$lcssa$i143$i = $985;
         } else {
          $$0$lcssa$i143$i = $$lcssa467;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $986 = $estr$2$i;
       $987 = (($9) - ($986))|0;
       (___fwritex($estr$2$i,$987,$f)|0);
      }
      $988 = ($889|0)==(8192);
      $or$cond$i$i = $988 & $891;
      if ($or$cond$i$i) {
       $989 = (($w$1) - ($888))|0;
       $990 = ($989>>>0)>(256);
       $991 = $990 ? 256 : $989;
       _memset(($pad$i|0),32,($991|0))|0;
       $992 = ($989>>>0)>(255);
       if ($992) {
        $$01$i$i = $989;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $993 = (($$01$i$i) + -256)|0;
         $994 = ($993>>>0)>(255);
         if ($994) {
          $$01$i$i = $993;
         } else {
          break;
         }
        }
        $995 = $989 & 255;
        $$0$lcssa$i$i = $995;
       } else {
        $$0$lcssa$i$i = $989;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $891 ? $w$1 : $888;
      $$0$i = $w$30$i;
     } else {
      $440 = $t$0 & 32;
      $441 = ($440|0)!=(0);
      $442 = $441 ? 10960 : 10968;
      $443 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $444 = $441 ? 10976 : 10984;
      $pl$1$i = $443 ? 0 : $pl$0$i;
      $s1$0$i = $443 ? $444 : $442;
      $445 = (($pl$1$i) + 3)|0;
      $446 = $fl$1$ & 8192;
      $447 = ($446|0)==(0);
      $448 = ($w$1|0)>($445|0);
      $or$cond$i35$i = $447 & $448;
      if ($or$cond$i35$i) {
       $449 = (($w$1) - ($445))|0;
       $450 = ($449>>>0)>(256);
       $451 = $450 ? 256 : $449;
       _memset(($pad$i|0),32,($451|0))|0;
       $452 = ($449>>>0)>(255);
       if ($452) {
        $$01$i37$i = $449;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $453 = (($$01$i37$i) + -256)|0;
         $454 = ($453>>>0)>(255);
         if ($454) {
          $$01$i37$i = $453;
         } else {
          break;
         }
        }
        $455 = $449 & 255;
        $$0$lcssa$i39$i = $455;
       } else {
        $$0$lcssa$i39$i = $449;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $456 = $fl$1$ & 73728;
      $457 = ($456|0)==(8192);
      $or$cond$i42$i = $457 & $448;
      if ($or$cond$i42$i) {
       $458 = (($w$1) - ($445))|0;
       $459 = ($458>>>0)>(256);
       $460 = $459 ? 256 : $458;
       _memset(($pad$i|0),32,($460|0))|0;
       $461 = ($458>>>0)>(255);
       if ($461) {
        $$01$i44$i = $458;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $462 = (($$01$i44$i) + -256)|0;
         $463 = ($462>>>0)>(255);
         if ($463) {
          $$01$i44$i = $462;
         } else {
          break;
         }
        }
        $464 = $458 & 255;
        $$0$lcssa$i46$i = $464;
       } else {
        $$0$lcssa$i46$i = $458;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $465 = $448 ? $w$1 : $445;
      $$0$i = $465;
     }
    } while(0);
    $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 83:  {
    $386 = $259;
    $387 = ($p$0|0)==(0);
    if ($387) {
     $1175 = $259;$1176 = $386;$i$0$lcssa275 = 0;
     label = 102;
    } else {
     $1173 = $386;$1174 = $259;$p$4274 = $p$0;
     label = 97;
    }
    break;
   }
   case 110:  {
    switch ($st$0$lcssa447|0) {
    case 0:  {
     $260 = $259;
     HEAP32[$260>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $261 = $259;
     HEAP32[$261>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $269 = $cnt$1&65535;
     $270 = $259;
     HEAP16[$270>>1] = $269;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $262 = ($cnt$1|0)<(0);
     $263 = $262 << 31 >> 31;
     $264 = $259;
     $265 = $264;
     $266 = $265;
     HEAP32[$266>>2] = $cnt$1;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $263;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $273 = $259;
     HEAP32[$273>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $274 = ($cnt$1|0)<(0);
     $275 = $274 << 31 >> 31;
     $276 = $259;
     $277 = $276;
     $278 = $277;
     HEAP32[$278>>2] = $cnt$1;
     $279 = (($277) + 4)|0;
     $280 = $279;
     HEAP32[$280>>2] = $275;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $271 = $cnt$1&255;
     $272 = $259;
     HEAP8[$272>>0] = $271;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $281 = ($p$0>>>0)>(8);
    $282 = $281 ? $p$0 : 8;
    $283 = $fl$1$ | 8;
    $fl$3 = $283;$p$1 = $282;$t$1 = 120;
    label = 73;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 111:  {
    $307 = ($259|0)==(0);
    $308 = ($286|0)==(0);
    $309 = $307 & $308;
    if ($309) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$311 = $259;$315 = $286;
     while(1) {
      $310 = $311 & 7;
      $312 = $310 | 48;
      $313 = $312&255;
      $314 = ((($$03$i48)) + -1|0);
      HEAP8[$314>>0] = $313;
      $316 = (_bitshift64Lshr(($311|0),($315|0),3)|0);
      $317 = tempRet0;
      $318 = ($316|0)==(0);
      $319 = ($317|0)==(0);
      $320 = $318 & $319;
      if ($320) {
       $$0$lcssa$i51 = $314;
       break;
      } else {
       $$03$i48 = $314;$311 = $316;$315 = $317;
      }
     }
    }
    $321 = $fl$1$ & 8;
    $322 = ($321|0)==(0);
    $or$cond19 = $322 | $309;
    $$24 = $or$cond19 ? 10912 : (10917);
    $323 = $or$cond19&1;
    $$25 = $323 ^ 1;
    $361 = $259;$363 = $286;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 105: case 100:  {
    $324 = ($286|0)<(0);
    if ($324) {
     $325 = (_i64Subtract(0,0,($259|0),($286|0))|0);
     $326 = tempRet0;
     $331 = $326;$333 = $325;$pl$0 = 1;$prefix$0 = 10912;
     label = 84;
     break L86;
    }
    $327 = $fl$1$ & 2048;
    $328 = ($327|0)==(0);
    if ($328) {
     $329 = $fl$1$ & 1;
     $330 = ($329|0)==(0);
     $$ = $330 ? 10912 : (10914);
     $331 = $286;$333 = $259;$pl$0 = $329;$prefix$0 = $$;
     label = 84;
    } else {
     $331 = $286;$333 = $259;$pl$0 = 1;$prefix$0 = (10913);
     label = 84;
    }
    break;
   }
   default: {
    $1169 = $286;$1170 = $259;$a$2 = $fmt89;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 10912;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $284 = $t$1 & 32;
   $285 = ($259|0)==(0);
   $287 = ($286|0)==(0);
   $288 = $285 & $287;
   if ($288) {
    $361 = $259;$363 = $286;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10912;
    label = 89;
   } else {
    $$012$i = $2;$290 = $259;$297 = $286;
    while(1) {
     $289 = $290 & 15;
     $291 = (10896 + ($289)|0);
     $292 = HEAP8[$291>>0]|0;
     $293 = $292&255;
     $294 = $293 | $284;
     $295 = $294&255;
     $296 = ((($$012$i)) + -1|0);
     HEAP8[$296>>0] = $295;
     $298 = (_bitshift64Lshr(($290|0),($297|0),4)|0);
     $299 = tempRet0;
     $300 = ($298|0)==(0);
     $301 = ($299|0)==(0);
     $302 = $300 & $301;
     if ($302) {
      $$lcssa482 = $296;
      break;
     } else {
      $$012$i = $296;$290 = $298;$297 = $299;
     }
    }
    $303 = $fl$3 & 8;
    $304 = ($303|0)==(0);
    if ($304) {
     $361 = $259;$363 = $286;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10912;
     label = 89;
    } else {
     $305 = $t$1 >> 4;
     $306 = (10912 + ($305)|0);
     $361 = $259;$363 = $286;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $306;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $332 = ($331>>>0)>(0);
   $334 = ($333>>>0)>(4294967295);
   $335 = ($331|0)==(0);
   $336 = $335 & $334;
   $337 = $332 | $336;
   if ($337) {
    $$05$i = $2;$338 = $333;$339 = $331;
    while(1) {
     $340 = (___uremdi3(($338|0),($339|0),10,0)|0);
     $341 = tempRet0;
     $342 = $340 | 48;
     $343 = $342&255;
     $344 = ((($$05$i)) + -1|0);
     HEAP8[$344>>0] = $343;
     $345 = (___udivdi3(($338|0),($339|0),10,0)|0);
     $346 = tempRet0;
     $347 = ($339>>>0)>(9);
     $348 = ($338>>>0)>(4294967295);
     $349 = ($339|0)==(9);
     $350 = $349 & $348;
     $351 = $347 | $350;
     if ($351) {
      $$05$i = $344;$338 = $345;$339 = $346;
     } else {
      $$lcssa478 = $344;$1171 = $345;$1172 = $346;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa478;$$01$lcssa$off0$i = $1171;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $333;
   }
   $352 = ($$01$lcssa$off0$i|0)==(0);
   if ($352) {
    $361 = $333;$363 = $331;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $353 = (($y$03$i>>>0) % 10)&-1;
     $354 = $353 | 48;
     $355 = $354&255;
     $356 = ((($$12$i)) + -1|0);
     HEAP8[$356>>0] = $355;
     $357 = (($y$03$i>>>0) / 10)&-1;
     $358 = ($y$03$i>>>0)<(10);
     if ($358) {
      $361 = $333;$363 = $331;$a$0 = $356;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $356;$y$03$i = $357;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $380 = (_memchr($a$1,0,$p$0)|0);
   $381 = ($380|0)==(0|0);
   $382 = $380;
   $383 = $a$1;
   $384 = (($382) - ($383))|0;
   $385 = (($a$1) + ($p$0)|0);
   $z$1 = $381 ? $385 : $380;
   $p$3 = $381 ? $p$0 : $384;
   $1169 = $286;$1170 = $259;$a$2 = $a$1;$fl$6 = $258;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 10912;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1173;
   while(1) {
    $388 = HEAP32[$ws$0181>>2]|0;
    $389 = ($388|0)==(0);
    if ($389) {
     $i$0$lcssa = $i$0180;$l$2 = $l$1179;
     break;
    }
    $390 = (_wctomb($mb,$388)|0);
    $391 = ($390|0)<(0);
    $392 = (($p$4274) - ($i$0180))|0;
    $393 = ($390>>>0)>($392>>>0);
    $or$cond22 = $391 | $393;
    if ($or$cond22) {
     $i$0$lcssa = $i$0180;$l$2 = $390;
     break;
    }
    $394 = ((($ws$0181)) + 4|0);
    $395 = (($390) + ($i$0180))|0;
    $396 = ($p$4274>>>0)>($395>>>0);
    if ($396) {
     $i$0180 = $395;$l$1179 = $390;$ws$0181 = $394;
    } else {
     $i$0$lcssa = $395;$l$2 = $390;
     break;
    }
   }
   $397 = ($l$2|0)<(0);
   if ($397) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1175 = $1174;$1176 = $1173;$i$0$lcssa275 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $359 = ($p$2|0)>(-1);
   $360 = $fl$4 & -65537;
   $$fl$4 = $359 ? $360 : $fl$4;
   $362 = ($361|0)!=(0);
   $364 = ($363|0)!=(0);
   $365 = $362 | $364;
   $366 = ($p$2|0)!=(0);
   $or$cond = $365 | $366;
   if ($or$cond) {
    $367 = $a$0;
    $368 = (($3) - ($367))|0;
    $369 = $365&1;
    $370 = $369 ^ 1;
    $371 = (($370) + ($368))|0;
    $372 = ($p$2|0)>($371|0);
    $p$2$ = $372 ? $p$2 : $371;
    $1169 = $363;$1170 = $361;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1169 = $363;$1170 = $361;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $398 = $fl$1$ & 73728;
   $399 = ($398|0)==(0);
   $400 = ($w$1|0)>($i$0$lcssa275|0);
   $or$cond$i64 = $399 & $400;
   if ($or$cond$i64) {
    $401 = (($w$1) - ($i$0$lcssa275))|0;
    $402 = ($401>>>0)>(256);
    $403 = $402 ? 256 : $401;
    _memset(($pad$i|0),32,($403|0))|0;
    $404 = ($401>>>0)>(255);
    if ($404) {
     $$01$i66 = $401;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $405 = (($$01$i66) + -256)|0;
      $406 = ($405>>>0)>(255);
      if ($406) {
       $$01$i66 = $405;
      } else {
       break;
      }
     }
     $407 = $401 & 255;
     $$0$lcssa$i68 = $407;
    } else {
     $$0$lcssa$i68 = $401;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $408 = ($i$0$lcssa275|0)==(0);
   L465: do {
    if (!($408)) {
     $i$1191 = 0;$ws$1192 = $1176;
     while(1) {
      $409 = HEAP32[$ws$1192>>2]|0;
      $410 = ($409|0)==(0);
      if ($410) {
       break L465;
      }
      $411 = (_wctomb($mb,$409)|0);
      $412 = (($411) + ($i$1191))|0;
      $413 = ($412|0)>($i$0$lcssa275|0);
      if ($413) {
       break L465;
      }
      $414 = ((($ws$1192)) + 4|0);
      (___fwritex($mb,$411,$f)|0);
      $415 = ($412>>>0)<($i$0$lcssa275>>>0);
      if ($415) {
       $i$1191 = $412;$ws$1192 = $414;
      } else {
       break;
      }
     }
    }
   } while(0);
   $416 = ($398|0)==(8192);
   $or$cond$i71 = $416 & $400;
   if ($or$cond$i71) {
    $417 = (($w$1) - ($i$0$lcssa275))|0;
    $418 = ($417>>>0)>(256);
    $419 = $418 ? 256 : $417;
    _memset(($pad$i|0),32,($419|0))|0;
    $420 = ($417>>>0)>(255);
    if ($420) {
     $$01$i73 = $417;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $421 = (($$01$i73) + -256)|0;
      $422 = ($421>>>0)>(255);
      if ($422) {
       $$01$i73 = $421;
      } else {
       break;
      }
     }
     $423 = $417 & 255;
     $$0$lcssa$i75 = $423;
    } else {
     $$0$lcssa$i75 = $417;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $424 = $400 ? $w$1 : $i$0$lcssa275;
   $1164 = $286;$1165 = $1175;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $424;$l10n$0 = $l10n$3;
   continue;
  }
  $996 = $z$2;
  $997 = $a$2;
  $998 = (($996) - ($997))|0;
  $999 = ($p$5|0)<($998|0);
  $$p$5 = $999 ? $998 : $p$5;
  $1000 = (($pl$2) + ($$p$5))|0;
  $1001 = ($w$1|0)<($1000|0);
  $w$2 = $1001 ? $1000 : $w$1;
  $1002 = $fl$6 & 73728;
  $1003 = ($1002|0)==(0);
  $1004 = ($w$2|0)>($1000|0);
  $or$cond$i81 = $1003 & $1004;
  if ($or$cond$i81) {
   $1005 = (($w$2) - ($1000))|0;
   $1006 = ($1005>>>0)>(256);
   $1007 = $1006 ? 256 : $1005;
   _memset(($pad$i|0),32,($1007|0))|0;
   $1008 = ($1005>>>0)>(255);
   if ($1008) {
    $$01$i83 = $1005;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1009 = (($$01$i83) + -256)|0;
     $1010 = ($1009>>>0)>(255);
     if ($1010) {
      $$01$i83 = $1009;
     } else {
      break;
     }
    }
    $1011 = $1005 & 255;
    $$0$lcssa$i85 = $1011;
   } else {
    $$0$lcssa$i85 = $1005;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1012 = ($1002|0)==(65536);
  $or$cond$i57 = $1012 & $1004;
  if ($or$cond$i57) {
   $1013 = (($w$2) - ($1000))|0;
   $1014 = ($1013>>>0)>(256);
   $1015 = $1014 ? 256 : $1013;
   _memset(($pad$i|0),48,($1015|0))|0;
   $1016 = ($1013>>>0)>(255);
   if ($1016) {
    $$01$i59 = $1013;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1017 = (($$01$i59) + -256)|0;
     $1018 = ($1017>>>0)>(255);
     if ($1018) {
      $$01$i59 = $1017;
     } else {
      break;
     }
    }
    $1019 = $1013 & 255;
    $$0$lcssa$i61 = $1019;
   } else {
    $$0$lcssa$i61 = $1013;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1020 = ($$p$5|0)>($998|0);
  if ($1020) {
   $1021 = (($$p$5) - ($998))|0;
   $1022 = ($1021>>>0)>(256);
   $1023 = $1022 ? 256 : $1021;
   _memset(($pad$i|0),48,($1023|0))|0;
   $1024 = ($1021>>>0)>(255);
   if ($1024) {
    $$01$i44 = $1021;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1025 = (($$01$i44) + -256)|0;
     $1026 = ($1025>>>0)>(255);
     if ($1026) {
      $$01$i44 = $1025;
     } else {
      break;
     }
    }
    $1027 = $1021 & 255;
    $$0$lcssa$i46 = $1027;
   } else {
    $$0$lcssa$i46 = $1021;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$998,$f)|0);
  $1028 = ($1002|0)==(8192);
  $or$cond$i = $1028 & $1004;
  if ($or$cond$i) {
   $1029 = (($w$2) - ($1000))|0;
   $1030 = ($1029>>>0)>(256);
   $1031 = $1030 ? 256 : $1029;
   _memset(($pad$i|0),32,($1031|0))|0;
   $1032 = ($1029>>>0)>(255);
   if ($1032) {
    $$01$i = $1029;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1033 = (($$01$i) + -256)|0;
     $1034 = ($1033>>>0)>(255);
     if ($1034) {
      $$01$i = $1033;
     } else {
      break;
     }
    }
    $1035 = $1029 & 255;
    $$0$lcssa$i = $1035;
   } else {
    $$0$lcssa$i = $1029;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1164 = $1169;$1165 = $1170;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1036 = ($f|0)==(0|0);
  if (!($1036)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1037 = ($l10n$0$lcssa|0)==(0);
  if ($1037) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2166 = 1;
  }
  while(1) {
   $1038 = (($nl_type) + ($i$2166<<2)|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = ($1039|0)==(0);
   if ($1040) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $1042 = (($nl_arg) + ($i$2166<<3)|0);
   $1043 = ($1039>>>0)>(20);
   L530: do {
    if (!($1043)) {
     do {
      switch ($1039|0) {
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1075 = $arglist_current44;
       $1076 = ((0) + 8|0);
       $expanded169 = $1076;
       $expanded168 = (($expanded169) - 1)|0;
       $1077 = (($1075) + ($expanded168))|0;
       $1078 = ((0) + 8|0);
       $expanded173 = $1078;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1079 = $1077 & $expanded171;
       $1080 = $1079;
       $1081 = $1080;
       $1082 = $1081;
       $1083 = HEAP32[$1082>>2]|0;
       $1084 = (($1081) + 4)|0;
       $1085 = $1084;
       $1086 = HEAP32[$1085>>2]|0;
       $arglist_next45 = ((($1080)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1087 = $1042;
       $1088 = $1087;
       HEAP32[$1088>>2] = $1083;
       $1089 = (($1087) + 4)|0;
       $1090 = $1089;
       HEAP32[$1090>>2] = $1086;
       break L530;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1044 = $arglist_current35;
       $1045 = ((0) + 4|0);
       $expanded148 = $1045;
       $expanded147 = (($expanded148) - 1)|0;
       $1046 = (($1044) + ($expanded147))|0;
       $1047 = ((0) + 4|0);
       $expanded152 = $1047;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1048 = $1046 & $expanded150;
       $1049 = $1048;
       $1050 = HEAP32[$1049>>2]|0;
       $arglist_next36 = ((($1049)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1042>>2] = $1050;
       break L530;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1051 = $arglist_current38;
       $1052 = ((0) + 4|0);
       $expanded155 = $1052;
       $expanded154 = (($expanded155) - 1)|0;
       $1053 = (($1051) + ($expanded154))|0;
       $1054 = ((0) + 4|0);
       $expanded159 = $1054;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1055 = $1053 & $expanded157;
       $1056 = $1055;
       $1057 = HEAP32[$1056>>2]|0;
       $arglist_next39 = ((($1056)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1058 = ($1057|0)<(0);
       $1059 = $1058 << 31 >> 31;
       $1060 = $1042;
       $1061 = $1060;
       HEAP32[$1061>>2] = $1057;
       $1062 = (($1060) + 4)|0;
       $1063 = $1062;
       HEAP32[$1063>>2] = $1059;
       break L530;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1091 = $arglist_current47;
       $1092 = ((0) + 4|0);
       $expanded176 = $1092;
       $expanded175 = (($expanded176) - 1)|0;
       $1093 = (($1091) + ($expanded175))|0;
       $1094 = ((0) + 4|0);
       $expanded180 = $1094;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1095 = $1093 & $expanded178;
       $1096 = $1095;
       $1097 = HEAP32[$1096>>2]|0;
       $arglist_next48 = ((($1096)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1098 = $1097&65535;
       $1099 = $1098 << 16 >> 16;
       $1100 = ($1099|0)<(0);
       $1101 = $1100 << 31 >> 31;
       $1102 = $1042;
       $1103 = $1102;
       HEAP32[$1103>>2] = $1099;
       $1104 = (($1102) + 4)|0;
       $1105 = $1104;
       HEAP32[$1105>>2] = $1101;
       break L530;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1106 = $arglist_current50;
       $1107 = ((0) + 4|0);
       $expanded183 = $1107;
       $expanded182 = (($expanded183) - 1)|0;
       $1108 = (($1106) + ($expanded182))|0;
       $1109 = ((0) + 4|0);
       $expanded187 = $1109;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1110 = $1108 & $expanded185;
       $1111 = $1110;
       $1112 = HEAP32[$1111>>2]|0;
       $arglist_next51 = ((($1111)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1112 & 65535;
       $1113 = $1042;
       $1114 = $1113;
       HEAP32[$1114>>2] = $$mask1$i;
       $1115 = (($1113) + 4)|0;
       $1116 = $1115;
       HEAP32[$1116>>2] = 0;
       break L530;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1117 = $arglist_current53;
       $1118 = ((0) + 4|0);
       $expanded190 = $1118;
       $expanded189 = (($expanded190) - 1)|0;
       $1119 = (($1117) + ($expanded189))|0;
       $1120 = ((0) + 4|0);
       $expanded194 = $1120;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1121 = $1119 & $expanded192;
       $1122 = $1121;
       $1123 = HEAP32[$1122>>2]|0;
       $arglist_next54 = ((($1122)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1124 = $1123&255;
       $1125 = $1124 << 24 >> 24;
       $1126 = ($1125|0)<(0);
       $1127 = $1126 << 31 >> 31;
       $1128 = $1042;
       $1129 = $1128;
       HEAP32[$1129>>2] = $1125;
       $1130 = (($1128) + 4)|0;
       $1131 = $1130;
       HEAP32[$1131>>2] = $1127;
       break L530;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1150 = $arglist_current62;
       $1151 = ((0) + 8|0);
       $expanded211 = $1151;
       $expanded210 = (($expanded211) - 1)|0;
       $1152 = (($1150) + ($expanded210))|0;
       $1153 = ((0) + 8|0);
       $expanded215 = $1153;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1154 = $1152 & $expanded213;
       $1155 = $1154;
       $1156 = +HEAPF64[$1155>>3];
       $arglist_next63 = ((($1155)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1042>>3] = $1156;
       break L530;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1064 = $arglist_current41;
       $1065 = ((0) + 4|0);
       $expanded162 = $1065;
       $expanded161 = (($expanded162) - 1)|0;
       $1066 = (($1064) + ($expanded161))|0;
       $1067 = ((0) + 4|0);
       $expanded166 = $1067;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1068 = $1066 & $expanded164;
       $1069 = $1068;
       $1070 = HEAP32[$1069>>2]|0;
       $arglist_next42 = ((($1069)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1071 = $1042;
       $1072 = $1071;
       HEAP32[$1072>>2] = $1070;
       $1073 = (($1071) + 4)|0;
       $1074 = $1073;
       HEAP32[$1074>>2] = 0;
       break L530;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1132 = $arglist_current56;
       $1133 = ((0) + 4|0);
       $expanded197 = $1133;
       $expanded196 = (($expanded197) - 1)|0;
       $1134 = (($1132) + ($expanded196))|0;
       $1135 = ((0) + 4|0);
       $expanded201 = $1135;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1136 = $1134 & $expanded199;
       $1137 = $1136;
       $1138 = HEAP32[$1137>>2]|0;
       $arglist_next57 = ((($1137)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1138 & 255;
       $1139 = $1042;
       $1140 = $1139;
       HEAP32[$1140>>2] = $$mask$i;
       $1141 = (($1139) + 4)|0;
       $1142 = $1141;
       HEAP32[$1142>>2] = 0;
       break L530;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1143 = $arglist_current59;
       $1144 = ((0) + 8|0);
       $expanded204 = $1144;
       $expanded203 = (($expanded204) - 1)|0;
       $1145 = (($1143) + ($expanded203))|0;
       $1146 = ((0) + 8|0);
       $expanded208 = $1146;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1147 = $1145 & $expanded206;
       $1148 = $1147;
       $1149 = +HEAPF64[$1148>>3];
       $arglist_next60 = ((($1148)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1042>>3] = $1149;
       break L530;
       break;
      }
      default: {
       break L530;
      }
      }
     } while(0);
    }
   } while(0);
   $1157 = (($i$2166) + 1)|0;
   $1158 = ($1157|0)<(10);
   if ($1158) {
    $i$2166 = $1157;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1041 = ($i$2166$lcssa|0)<(10);
  if ($1041) {
   $i$3164 = $i$2166$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1161 = (($nl_type) + ($i$3164<<2)|0);
   $1162 = HEAP32[$1161>>2]|0;
   $1163 = ($1162|0)==(0);
   $1159 = (($i$3164) + 1)|0;
   if (!($1163)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1160 = ($1159|0)<(10);
   if ($1160) {
    $i$3164 = $1159;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[11000>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (11040 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (11040 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[11000>>2] = $22;
     } else {
      $23 = HEAP32[(11016)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(11008)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (11040 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (11040 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[11000>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(11016)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(11008)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(11020)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (11040 + ($92<<2)|0);
      $94 = HEAP32[11000>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[11000>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (11040 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (11040 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(11016)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(11008)>>2] = $81;
     HEAP32[(11020)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(11004)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (11304 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(11016)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (11304 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(11004)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(11004)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(11016)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(11016)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(11016)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(11008)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(11020)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (11040 + ($229<<2)|0);
       $231 = HEAP32[11000>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[11000>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (11040 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (11040 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(11016)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(11008)>>2] = $rsize$0$i$lcssa;
      HEAP32[(11020)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(11004)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (11304 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (11304 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(11008)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(11016)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (11304 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(11004)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(11004)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(11016)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(11016)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(11016)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L85: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (11040 + ($424<<2)|0);
          $426 = HEAP32[11000>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[11000>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (11040 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (11040 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(11016)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (11304 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(11004)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(11004)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L103: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L103;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(11016)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L85;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(11016)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(11008)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(11020)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(11020)>>2] = $514;
   HEAP32[(11008)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(11008)>>2] = 0;
   HEAP32[(11020)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(11012)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(11012)>>2] = $528;
  $529 = HEAP32[(11024)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(11024)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[11472>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(11480)>>2] = $538;
    HEAP32[(11476)>>2] = $538;
    HEAP32[(11484)>>2] = -1;
    HEAP32[(11488)>>2] = -1;
    HEAP32[(11492)>>2] = 0;
    HEAP32[(11444)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[11472>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(11480)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(11440)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(11432)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(11444)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(11024)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (11448);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(11012)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(11476)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(11432)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(11440)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(11480)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(11444)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(11444)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(11432)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(11432)>>2] = $632;
  $633 = HEAP32[(11436)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(11436)>>2] = $632;
  }
  $635 = HEAP32[(11024)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(11016)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(11016)>>2] = $tbase$255$i;
    }
    HEAP32[(11448)>>2] = $tbase$255$i;
    HEAP32[(11452)>>2] = $tsize$254$i;
    HEAP32[(11460)>>2] = 0;
    $640 = HEAP32[11472>>2]|0;
    HEAP32[(11036)>>2] = $640;
    HEAP32[(11032)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (11040 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (11040 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (11040 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(11024)>>2] = $654;
    HEAP32[(11012)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(11488)>>2]|0;
    HEAP32[(11028)>>2] = $659;
   } else {
    $sp$084$i = (11448);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(11012)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(11024)>>2] = $684;
       HEAP32[(11012)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(11488)>>2]|0;
       HEAP32[(11028)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(11016)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(11016)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (11448);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (11448);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(11012)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(11012)>>2] = $730;
        HEAP32[(11024)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(11020)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(11008)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(11008)>>2] = $736;
         HEAP32[(11020)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L331: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (11040 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[11000>>2]|0;
            $763 = $762 & $761;
            HEAP32[11000>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (11304 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(11004)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(11004)>>2] = $806;
             break L331;
            } else {
             $807 = HEAP32[(11016)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L331;
             }
            }
           } while(0);
           $814 = HEAP32[(11016)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(11016)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (11040 + ($840<<2)|0);
         $842 = HEAP32[11000>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[11000>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (11040 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (11040 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(11016)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (11304 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(11004)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(11004)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L417: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L417;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(11016)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(11016)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (11448);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(11024)>>2] = $953;
    HEAP32[(11012)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(11488)>>2]|0;
    HEAP32[(11028)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(11448)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(11448)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(11448)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(11448)+12>>2]|0;
    HEAP32[(11448)>>2] = $tbase$255$i;
    HEAP32[(11452)>>2] = $tsize$254$i;
    HEAP32[(11460)>>2] = 0;
    HEAP32[(11456)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (11040 + ($977<<2)|0);
      $979 = HEAP32[11000>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[11000>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (11040 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (11040 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(11016)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (11304 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(11004)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(11004)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(11016)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(11016)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(11012)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(11012)>>2] = $1062;
   $1063 = HEAP32[(11024)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(11024)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(11016)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(11020)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(11008)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (11040 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[11000>>2]|0;
     $36 = $35 & $34;
     HEAP32[11000>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (11304 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(11004)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(11004)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(11016)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(11016)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(11016)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(11024)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(11012)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(11012)>>2] = $120;
   HEAP32[(11024)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(11020)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(11020)>>2] = 0;
   HEAP32[(11008)>>2] = 0;
   return;
  }
  $125 = HEAP32[(11020)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(11008)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(11008)>>2] = $128;
   HEAP32[(11020)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (11040 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(11016)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[11000>>2]|0;
     $152 = $151 & $150;
     HEAP32[11000>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(11016)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(11016)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(11016)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (11304 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(11004)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(11004)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(11016)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(11016)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(11016)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(11020)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(11008)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (11040 + ($233<<2)|0);
  $235 = HEAP32[11000>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[11000>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (11040 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (11040 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(11016)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (11304 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(11004)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(11004)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L201: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L201;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(11016)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(11016)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(11032)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(11032)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (11456);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(11032)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(11016)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(11480)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(11024)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(11012)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(11024)>>2] = $36;
  HEAP32[(11012)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(11020)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(11008)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(11008)>>2] = $storemerge21;
  HEAP32[(11020)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (11040 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[11000>>2]|0;
    $88 = $87 & $86;
    HEAP32[11000>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (11304 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(11004)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(11004)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(11016)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(11016)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(11016)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(11016)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(11020)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(11008)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (11040 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[11000>>2]|0;
     $32 = $31 & $30;
     HEAP32[11000>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (11304 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(11004)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(11004)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(11016)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(11016)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(11016)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(11016)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(11024)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(11012)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(11012)>>2] = $115;
   HEAP32[(11024)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(11020)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(11020)>>2] = 0;
   HEAP32[(11008)>>2] = 0;
   return;
  }
  $120 = HEAP32[(11020)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(11008)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(11008)>>2] = $123;
   HEAP32[(11020)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (11040 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[11000>>2]|0;
     $146 = $145 & $144;
     HEAP32[11000>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (11304 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(11004)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(11004)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(11016)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(11016)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(11016)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(11020)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(11008)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (11040 + ($224<<2)|0);
  $226 = HEAP32[11000>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[11000>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (11040 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (11040 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(11016)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (11304 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(11004)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(11004)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(11016)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(11016)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&31](a1|0,+a2);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(1); }
function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2); }
function b3() { ; nullFunc_i(3);return 0; }
function b4(p0) { p0 = p0|0; nullFunc_vi(4); }
function b5(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(5); }
function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
function _SDL_LockSurface__wrapper(p0) { p0 = p0|0; return _SDL_LockSurface(p0|0)|0; }
function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7); }
function b8() { ; nullFunc_v(8); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9); }
function b10(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0; }
function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
function b11(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(11);return 0; }
function b12(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZL16stbi__stdio_readPvPci,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_vid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__Z13apply_post_fxR11Framebufferf,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_i = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxa_get_globals_fast,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,b4,b4,b4,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b4,b4,b4,b4,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b4,b4,b4,b4,b4,b4,_main_loop,__ZZ21load_bitmap_from_filePKcENK3__0clEv,b4,b4,b4,__Z12render_levelR4Game,b4,__Z9render_uiR4Game,__ZZL6renderR4GameENK3__2clEv
,__ZZL6renderR4GameENK3__1clEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,__ZL16stbi__stdio_skipPvi,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Z13clear_buffersR11Framebuffer5Color,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,_abort_message,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,__ZL15stbi__stdio_eofPv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_malloc,b6,b6,_SDL_LockSurface__wrapper,__ZN4impl7deferFnIZL6renderR4GameE3__2EENS_5DeferIT_EEOS5_,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__ZL16stbi__idct_blockPhiPs,b7];
var FUNCTION_TABLE_v = [b8,b8,b8,b8,__ZL25default_terminate_handlerv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8,___cxa_end_catch__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,__ZL22stbi__YCbCr_to_RGB_rowPhPKhS1_S1_ii];
var FUNCTION_TABLE_iii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_printf__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,__ZL23stbi__resample_row_hv_2PhS_S_ii,__ZL14resample_row_1PhS_S_ii,__ZL22stbi__resample_row_v_2PhS_S_ii,__ZL22stbi__resample_row_h_2PhS_S_ii,__ZL26stbi__resample_row_genericPhS_S_ii,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



